{"version":3,"file":"gpu-io.min.js","sources":["../node_modules/tslib/tslib.es6.js","../node_modules/@amandaghassaei/type-checks/dist/type-checks.js","../src/constants.ts","../src/conversions.ts","../src/glsl/common/precision.ts","../src/regex.ts","../src/polyfills.ts","../src/utils.ts","../node_modules/changedpi/dist/index.js","../node_modules/@petamoriken/float16/src/_util/messages.mjs","../node_modules/@petamoriken/float16/src/_util/primordials.mjs","../node_modules/@petamoriken/float16/src/_util/arrayIterator.mjs","../node_modules/@petamoriken/float16/src/_util/is.mjs","../node_modules/@petamoriken/float16/src/_util/brand.mjs","../node_modules/@petamoriken/float16/src/_util/converter.mjs","../node_modules/@petamoriken/float16/src/_util/spec.mjs","../node_modules/@petamoriken/float16/src/Float16Array.mjs","../node_modules/@petamoriken/float16/src/DataView.mjs","../node_modules/file-saver/dist/FileSaver.min.js","../src/checks.ts","../src/framebuffers.ts","../src/GPULayer.ts","../src/extensions.ts","../src/GPULayerHelpers.ts","../src/Vector4.ts","../src/glsl/vertex/DefaultVertexShader.ts","../src/glsl/vertex/VertexShaderHelpers.ts","../src/glsl/vertex/LayerLinesVertexShader.ts","../src/glsl/vertex/LayerPointsVertexShader.ts","../src/glsl/vertex/LayerVectorFieldVertexShader.ts","../src/glsl/vertex/LayerMeshVertexShader.ts","../src/GPUProgram.ts","../src/Programs.ts","../src/GPUComposer.ts","../src/glsl/vertex/SegmentVertexShader.ts","../src/GPUIndexBuffer.ts","../node_modules/@petamoriken/float16/src/isTypedArray.mjs","../src/index.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.push(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.push(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TypeChecks = {}));\n})(this, (function (exports) { 'use strict';\n\n\t/**\n\t * Checks if value is a number (including Infinity).\n\t */\n\tfunction isNumber(value) {\n\t    return !Number.isNaN(value) && typeof value === 'number';\n\t}\n\t/**\n\t * Checks if value is finite number.\n\t */\n\tfunction isFiniteNumber(value) {\n\t    return isNumber(value) && Number.isFinite(value);\n\t}\n\t/**\n\t * Checks if value is integer.\n\t */\n\tfunction isInteger(value) {\n\t    return isFiniteNumber(value) && (value % 1 === 0);\n\t}\n\t/**\n\t * Checks if value is positive number (> 0).\n\t */\n\tfunction isPositiveNumber(value) {\n\t    return isNumber(value) && value > 0;\n\t}\n\t/**\n\t * Checks if value is positive integer (> 0).\n\t */\n\tfunction isPositiveInteger(value) {\n\t    return isInteger(value) && value > 0;\n\t}\n\t/**\n\t * Checks if value is negative number (< 0).\n\t */\n\tfunction isNegativeNumber(value) {\n\t    return isNumber(value) && value < 0;\n\t}\n\t/**\n\t * Checks if value is negative integer (< 0).\n\t */\n\tfunction isNegativeInteger(value) {\n\t    return isInteger(value) && value < 0;\n\t}\n\t/**\n\t * Checks if value is non-negative number (>= 0).\n\t */\n\tfunction isNonNegativeNumber(value) {\n\t    return isNumber(value) && value >= 0;\n\t}\n\t/**\n\t * Checks if value is non-negative integer (>= 0).\n\t */\n\tfunction isNonNegativeInteger(value) {\n\t    return isInteger(value) && value >= 0;\n\t}\n\t/**\n\t * Checks if value is non-positive number (<= 0).\n\t */\n\tfunction isNonPositiveNumber(value) {\n\t    return isNumber(value) && value <= 0;\n\t}\n\t/**\n\t * Checks if value is non-positive integer (<= 0).\n\t */\n\tfunction isNonPositiveInteger(value) {\n\t    return isInteger(value) && value <= 0;\n\t}\n\t/**\n\t * Checks if value is number in range [min, max].\n\t */\n\tfunction isNumberInRange(value, min, max) {\n\t    return isNumber(value) && value >= min && value <= max;\n\t}\n\t/**\n\t * Checks if value is integer in range [min, max].\n\t */\n\tfunction isIntegerInRange(value, min, max) {\n\t    return isInteger(value) && value >= min && value <= max;\n\t}\n\t/**\n\t * Checks if value is string.\n\t */\n\tfunction isString(value) {\n\t    return typeof value === 'string';\n\t}\n\t/**\n\t * Checks if value is TypedArray.\n\t */\n\tfunction isTypedArray(value) {\n\t    return ArrayBuffer.isView(value) && !(value instanceof DataView);\n\t}\n\t/**\n\t * Checks if value is Array or TypedArray.\n\t */\n\tfunction isArray(value) {\n\t    return Array.isArray(value) || isTypedArray(value);\n\t}\n\t/**\n\t * Checks if value is Javascript object.\n\t */\n\tfunction isObject(value) {\n\t    return typeof value === 'object' && !isArray(value) && value !== null && !(value instanceof ArrayBuffer) && !(value instanceof DataView);\n\t}\n\t/**\n\t * Checks if value is boolean.\n\t */\n\tfunction isBoolean(value) {\n\t    return typeof value === 'boolean';\n\t}\n\n\texports.isArray = isArray;\n\texports.isBoolean = isBoolean;\n\texports.isFiniteNumber = isFiniteNumber;\n\texports.isInteger = isInteger;\n\texports.isIntegerInRange = isIntegerInRange;\n\texports.isNegativeInteger = isNegativeInteger;\n\texports.isNegativeNumber = isNegativeNumber;\n\texports.isNonNegativeInteger = isNonNegativeInteger;\n\texports.isNonNegativeNumber = isNonNegativeNumber;\n\texports.isNonPositiveInteger = isNonPositiveInteger;\n\texports.isNonPositiveNumber = isNonPositiveNumber;\n\texports.isNumber = isNumber;\n\texports.isNumberInRange = isNumberInRange;\n\texports.isObject = isObject;\n\texports.isPositiveInteger = isPositiveInteger;\n\texports.isPositiveNumber = isPositiveNumber;\n\texports.isString = isString;\n\texports.isTypedArray = isTypedArray;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=type-checks.js.map\n","import type { GPULayer } from './GPULayer';\n\n// Data types and constants.\n\n/**\n * Half float data type.\n */\nexport const HALF_FLOAT = 'HALF_FLOAT';\n/**\n * Float data type.\n */\nexport const FLOAT = 'FLOAT';\n/**\n * Unsigned byte data type.\n */\nexport const UNSIGNED_BYTE = 'UNSIGNED_BYTE';\n/**\n * Byte data type.\n */\nexport const BYTE = 'BYTE';\n/**\n * Unsigned short data type.\n */\nexport const UNSIGNED_SHORT = 'UNSIGNED_SHORT';\n/**\n * Short data type.\n */\nexport const SHORT = 'SHORT';\n/**\n * Unsigned int data type.\n */\nexport const UNSIGNED_INT = 'UNSIGNED_INT';\n/**\n * Int data type.\n */\nexport const INT = 'INT';\n/**\n * Boolean data type (GPUProgram uniforms only).\n */\nexport const BOOL = 'BOOL';\n/**\n * Unsigned int data type (GPUProgram uniforms only).\n */\nexport const UINT = 'UINT';\n\n// Filter types.\n/**\n * Nearest texture filtering.\n */\nexport const NEAREST = 'NEAREST';\n/**\n * Linear texture filtering.\n */\nexport const LINEAR = 'LINEAR';\n\n// Wrap types.\n/**\n * Clamp to edge wrapping (no wrapping).\n */\nexport const CLAMP_TO_EDGE = 'CLAMP_TO_EDGE';\n/**\n * Repeat/periodic wrapping.\n */\nexport const REPEAT = 'REPEAT';\n// export const MIRRORED_REPEAT = 'MIRRORED_REPEAT';\n\n// GPULayer parameter types.\n/**\n * GPULayer array types.\n */\nexport type GPULayerArray =  Float32Array | Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array;\n/**\n * @private\n */\nexport const validArrayTypes = [Float32Array, Uint8Array, Int8Array, Uint16Array, Int16Array, Uint32Array, Int32Array, Array];\n/**\n * GPULayer data types.\n */\nexport type GPULayerType = typeof HALF_FLOAT | typeof FLOAT | typeof UNSIGNED_BYTE | typeof BYTE | typeof UNSIGNED_SHORT | typeof SHORT | typeof UNSIGNED_INT | typeof INT;\n/**\n * @private\n */\nexport const validDataTypes = [HALF_FLOAT, FLOAT, UNSIGNED_BYTE, BYTE, UNSIGNED_SHORT, SHORT, UNSIGNED_INT, INT];\n/**\n * GPULayer numComponents options.\n */\nexport type GPULayerNumComponents = 1 | 2 | 3 | 4;\n/**\n * GPULayer filter/interpolation types.\n */\nexport type GPULayerFilter = typeof LINEAR | typeof NEAREST;\n/**\n * @private\n */\nexport const validFilters = [NEAREST, LINEAR];\n/**\n * @private\n */\n/**\n * GPULayer wrap types.\n */\nexport type GPULayerWrap = typeof REPEAT | typeof CLAMP_TO_EDGE;// | typeof MIRRORED_REPEAT;\n/**\n * @private\n */\nexport const validWraps = [CLAMP_TO_EDGE, REPEAT]; // MIRRORED_REPEAT\n/**\n * The WebGLTexture corresponding to a GPULayer buffer (e.g. currentState or lastState).\n * This data structure also includes a reference back to the GPULayer that it originated from.\n */\nexport type GPULayerState = {\n\ttexture: WebGLTexture,\n\tlayer: GPULayer,\n}\n\n// For image urls that are passed in and inited as textures.\n/**\n * RGB image format.\n */\nexport const RGB = 'RGB';\n/**\n * RGBA image format.\n */\nexport const RGBA = 'RGBA';\n/**\n * Image formats for GPULayer.initFromImage().\n */\nexport type ImageFormat = typeof RGB | typeof RGBA;\n/**\n * Image types for GPULayer.initFromImage().\n */\n export type ImageType = typeof UNSIGNED_BYTE | typeof FLOAT | typeof HALF_FLOAT;\n/**\n * @private\n */\nexport const validImageFormats = [RGB, RGBA];\n/**\n * @private\n */\n export const validImageTypes = [UNSIGNED_BYTE, FLOAT, HALF_FLOAT];\n\n// GLSL versions.\n/**\n * GLSL version 300 (WebGL2 only).\n */\nexport const GLSL3 = '300 es';\n/**\n * GLSL version 100 (WebGL1 and WebGL2).\n */\nexport const GLSL1 = '100';\n/**\n * GLSL available versions.\n */\nexport type GLSLVersion = typeof GLSL1 | typeof GLSL3;\n\n// WebGL versions.\n/**\n * WebGL2 context ID.\n */\nexport const WEBGL2 = 'webgl2';\n/**\n * WebGL1 context ID.\n */\nexport const WEBGL1 = 'webgl';\n/**\n * Experimental WebGL context ID.\n */\nexport const EXPERIMENTAL_WEBGL = 'experimental-webgl';\n/**\n * Experimental WebGL context ID.\n */\n export const EXPERIMENTAL_WEBGL2 = 'experimental-webgl2';\n\n// Precision declarations.\n/**\n * GLSL lowp precision declaration.\n */\nexport const PRECISION_LOW_P = 'lowp';\n/**\n * GLSL mediump precision declaration.\n */\nexport const PRECISION_MEDIUM_P = 'mediump';\n/**\n * GLSL highp precision declaration.\n */\nexport const PRECISION_HIGH_P = 'highp';\n/**\n * GLSL available precision declarations.\n */\nexport type GLSLPrecision = typeof PRECISION_LOW_P | typeof PRECISION_MEDIUM_P | typeof PRECISION_HIGH_P;\n\n// Uniform types.\n/**\n * @private\n */\nexport const FLOAT_1D_UNIFORM = 'FLOAT_1D_UNIFORM';\n/**\n * @private\n */\nexport const FLOAT_2D_UNIFORM = 'FLOAT_2D_UNIFORM';\n/**\n * @private\n */\nexport const FLOAT_3D_UNIFORM = 'FLOAT_3D_UNIFORM';\n/**\n * @private\n */\nexport const FLOAT_4D_UNIFORM = 'FLOAT_4D_UNIFORM';\n/**\n * @private\n */\nexport const INT_1D_UNIFORM = 'INT_1D_UNIFORM';\n/**\n * @private\n */\nexport const INT_2D_UNIFORM = 'INT_2D_UNIFORM';\n/**\n * @private\n */\nexport const INT_3D_UNIFORM = 'INT_3D_UNIFORM';\n/**\n * @private\n */\nexport const INT_4D_UNIFORM = 'INT_4D_UNIFORM';\n/**\n * @private\n */\nexport const UINT_1D_UNIFORM = 'UINT_1D_UNIFORM';\n/**\n * @private\n */\nexport const UINT_2D_UNIFORM = 'UINT_2D_UNIFORM';\n/**\n * @private\n */\nexport const UINT_3D_UNIFORM = 'UINT_3D_UNIFORM';\n/**\n * @private\n */\nexport const UINT_4D_UNIFORM = 'UINT_4D_UNIFORM';\n/**\n * @private\n */\n export const BOOL_1D_UNIFORM = 'BOOL_1D_UNIFORM';\n /**\n * @private\n */\n  export const BOOL_2D_UNIFORM = 'BOOL_2D_UNIFORM';\n  /**\n * @private\n */\n export const BOOL_3D_UNIFORM = 'BOOL_3D_UNIFORM';\n /**\n * @private\n */\n  export const BOOL_4D_UNIFORM = 'BOOL_4D_UNIFORM';\n\n// Uniform types and values.\n/**\n * GPUProgram uniform types.\n */\nexport type UniformType = typeof FLOAT | typeof INT | typeof UINT | typeof BOOL;\n/**\n * @private\n */\nexport type UniformInternalType = \n\ttypeof BOOL_1D_UNIFORM |\n\ttypeof BOOL_2D_UNIFORM |\n\ttypeof BOOL_3D_UNIFORM |\n\ttypeof BOOL_4D_UNIFORM |\n\ttypeof FLOAT_1D_UNIFORM |\n\ttypeof FLOAT_2D_UNIFORM |\n\ttypeof FLOAT_3D_UNIFORM |\n\ttypeof FLOAT_4D_UNIFORM |\n\ttypeof INT_1D_UNIFORM |\n\ttypeof INT_2D_UNIFORM |\n\ttypeof INT_3D_UNIFORM |\n\ttypeof INT_4D_UNIFORM |\n\ttypeof UINT_1D_UNIFORM |\n\ttypeof UINT_2D_UNIFORM |\n\ttypeof UINT_3D_UNIFORM |\n\ttypeof UINT_4D_UNIFORM;\n/**\n * GPUProgram uniform values.\n */\nexport type UniformValue = boolean | boolean[] | number | number[];\n/**\n * GPUProgram uniform parameters.\n */\nexport type UniformParams = {\n\tname: string,\n\tvalue: UniformValue,\n\ttype: UniformType,\n};\n/**\n * @private\n */\nexport type Uniform = { \n\tlocation: WeakMap<WebGLProgram, WebGLUniformLocation>,\n\tvalue: UniformValue,\n\ttype: UniformInternalType,\n};\n\n// Vertex shader types.\n/**\n * @private\n */\nexport const DEFAULT_PROGRAM_NAME = 'DEFAULT';\n/**\n * @private\n */\nexport const SEGMENT_PROGRAM_NAME = 'SEGMENT';\n/**\n * @private\n */\nexport const LAYER_POINTS_PROGRAM_NAME = 'LAYER_POINTS';\n/**\n * @private\n */\nexport const LAYER_LINES_PROGRAM_NAME = 'LAYER_LINES';\n/**\n * @private\n */\nexport const LAYER_VECTOR_FIELD_PROGRAM_NAME = 'LAYER_VECTOR_FIELD';\n/**\n * @private\n */\n export const LAYER_MESH_PROGRAM_NAME = 'LAYER_MESH';\n// Vertex shader compile time constants.\n/**\n * @private\n */\nexport const GPUIO_VS_WRAP_X = 'GPUIO_VS_WRAP_X';\n/**\n * @private\n */\nexport const GPUIO_VS_WRAP_Y = 'GPUIO_VS_WRAP_Y';\n/**\n * @private\n */\n export const GPUIO_VS_INDEXED_POSITIONS = 'GPUIO_VS_INDEXED_POSITIONS';\n/**\n * @private\n */\nexport const GPUIO_VS_UV_ATTRIBUTE = 'GPUIO_VS_UV_ATTRIBUTE';\n /**\n * @private\n */\nexport const GPUIO_VS_NORMAL_ATTRIBUTE = 'GPUIO_VS_NORMAL_ATTRIBUTE';\n/**\n * @private\n */\nexport const GPUIO_VS_POSITION_W_ACCUM = 'GPUIO_VS_POSITION_W_ACCUM';\n\n/**\n * @private\n */\nexport type PROGRAM_NAME_INTERNAL =\n\ttypeof DEFAULT_PROGRAM_NAME |\n\ttypeof SEGMENT_PROGRAM_NAME |\n\ttypeof LAYER_POINTS_PROGRAM_NAME |\n\ttypeof LAYER_LINES_PROGRAM_NAME |\n\ttypeof LAYER_VECTOR_FIELD_PROGRAM_NAME |\n\ttypeof LAYER_MESH_PROGRAM_NAME;\n\n// Pass in #defines as strings to make it easier to control float vs int.\n/**\n * Object containing compile time #define constants for GPUProgram fragment shader.\n */\nexport type CompileTimeConstants = { [key: string]: string };\n\n// Error callback, defaults to throwing an error.\nexport type ErrorCallback = (message: string) => void;\n/**\n * @private\n */\nexport const DEFAULT_ERROR_CALLBACK = (message: string) => { throw new Error(message); };\n\n// For stepCircle() and stepSegment() (with end caps).\n/**\n * @private\n */\nexport const DEFAULT_CIRCLE_NUM_SEGMENTS = 18;// Must be divisible by 6 to work with stepSegment().\n\n// Extrema values.\n/**\n * @private\n */\nexport const MIN_UNSIGNED_BYTE = 0;\n/**\n * @private\n */\nexport const MAX_UNSIGNED_BYTE = 2 ** 8 - 1;\n/**\n * @private\n */\nexport const MIN_BYTE = -(2 ** 7);\n/**\n * @private\n */\nexport const MAX_BYTE = 2 ** 7 - 1;\n/**\n * @private\n */\nexport const MIN_UNSIGNED_SHORT = 0;\n/**\n * @private\n */\nexport const MAX_UNSIGNED_SHORT = 2 ** 16 - 1;\n/**\n * @private\n */\nexport const MIN_SHORT = -(2 ** 15);\n/**\n * @private\n */\nexport const MAX_SHORT = 2 ** 15 - 1;\n/**\n * @private\n */\nexport const MIN_UNSIGNED_INT = 0;\n/**\n * @private\n */\nexport const MAX_UNSIGNED_INT = 2 ** 32 - 1;\n/**\n * @private\n */\nexport const MIN_INT = -(2 ** 31);\n/**\n * @private\n */\nexport const MAX_INT = 2 ** 31 - 1;\n// There are larger HALF_FLOAT and FLOAT ints, but they may be spaced out by > 1.\n/**\n * @private\n */\nexport const MIN_HALF_FLOAT_INT = -2048;\n/**\n * @private\n */\nexport const MAX_HALF_FLOAT_INT = 2048;\n/**\n * @private\n */\nexport const MIN_FLOAT_INT = -16777216;\n/**\n * @private\n */\nexport const MAX_FLOAT_INT = 16777216;\n\n// Precision compile time constants\n/**\n * @private\n */\nexport const GPUIO_INT_PRECISION = 'GPUIO_INT_PRECISION';\n/**\n * @private\n */\nexport const GPUIO_FLOAT_PRECISION = 'GPUIO_FLOAT_PRECISION';\n\nexport const BOUNDARY_TOP = 'BOUNDARY_TOP';\nexport const BOUNDARY_BOTTOM = 'BOUNDARY_BOTTOM';\nexport const BOUNDARY_LEFT = 'BOUNDARY_LEFT';\nexport const BOUNDARY_RIGHT = 'BOUNDARY_RIGHT';\nexport type BoundaryEdge = typeof BOUNDARY_TOP | typeof BOUNDARY_BOTTOM | typeof BOUNDARY_LEFT | typeof BOUNDARY_RIGHT;\n","import {\n\tBYTE,\n\tFLOAT,\n\tGLSL1,\n\tGLSLPrecision,\n\tGLSLVersion,\n\tGPULayerNumComponents,\n\tGPULayerType,\n\tHALF_FLOAT,\n\tINT,\n\tPRECISION_HIGH_P,\n\tPRECISION_LOW_P,\n\tPRECISION_MEDIUM_P,\n\tSHORT,\n\tUINT,\n\tUNSIGNED_BYTE,\n\tUNSIGNED_INT,\n\tUNSIGNED_SHORT,\n} from './constants';\n\n/**\n * Enum for precision values.\n * See src/glsl/common/precision.ts for more info.\n * @private\n */\n export function intForPrecision(precision: GLSLPrecision) {\n\tif (precision === PRECISION_HIGH_P) return 2;\n\tif (precision === PRECISION_MEDIUM_P) return 1;\n\tif (precision === PRECISION_LOW_P) return 0;\n\tthrow new Error(`Unknown shader precision value: ${JSON.stringify(precision)}.`);\n}\n\n/**\n * @private\n */\nexport function uniformTypeForType(type: GPULayerType, glslVersion: GLSLVersion) {\n\tswitch (type) {\n\t\tcase HALF_FLOAT:\n\t\tcase FLOAT:\n\t\t\treturn FLOAT;\n\t\tcase UNSIGNED_BYTE:\n\t\tcase UNSIGNED_SHORT:\n\t\tcase UNSIGNED_INT:\n\t\t\tif (glslVersion === GLSL1) return INT;\n\t\t\treturn UINT;\n\t\tcase BYTE:\n\t\tcase SHORT:\n\t\tcase INT:\n\t\t\treturn INT;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid type: ${type} passed to glslKeyForType.`);\n\t}\n}\n\n/**\n * @private\n */\nexport function arrayConstructorForType(\n\ttype: GPULayerType,\n\thalfFloatsAsFloats = false,\n) {\n\tswitch (type) {\n\t\tcase HALF_FLOAT:\n\t\t\tif (halfFloatsAsFloats) return Float32Array;\n\t\t\treturn Uint16Array;\n\t\tcase FLOAT:\n\t\t\treturn Float32Array;\n\t\tcase UNSIGNED_BYTE:\n\t\t\treturn Uint8Array;\n\t\tcase BYTE:\n\t\t\treturn Int8Array;\n\t\tcase UNSIGNED_SHORT:\n\t\t\treturn Uint16Array;\n\t\tcase SHORT:\n\t\t\treturn Int16Array;\n\t\tcase UNSIGNED_INT:\n\t\t\treturn Uint32Array;\n\t\tcase INT:\n\t\t\treturn Int32Array;\n\t\tdefault:\n\t\t\tthrow new Error(`Unsupported type: \"${type}\".`);\n\t}\n}\n\n/**\n * @private\n */\nexport function glslTypeForType(type: GPULayerType, numComponents: GPULayerNumComponents) {\n\tswitch (type) {\n\t\tcase HALF_FLOAT:\n\t\tcase FLOAT:\n\t\t\tif (numComponents === 1) return 'float';\n\t\t\treturn `vec${numComponents}`;\n\t\tcase UNSIGNED_BYTE:\n\t\tcase UNSIGNED_SHORT:\n\t\tcase UNSIGNED_INT:\n\t\t\tif (numComponents === 1) return 'uint';\n\t\t\treturn `uvec${numComponents}`;\n\t\tcase BYTE:\n\t\tcase SHORT:\n\t\tcase INT:\n\t\t\tif (numComponents === 1) return 'int';\n\t\t\treturn `ivec${numComponents}`;\n\t}\n\tthrow new Error(`Invalid type: ${type} passed to glslTypeForType.`);\n}\n\n/**\n * @private\n */\n export function glslPrefixForType(type: GPULayerType) {\n\tswitch (type) {\n\t\tcase HALF_FLOAT:\n\t\tcase FLOAT:\n\t\t\treturn '';\n\t\tcase UNSIGNED_BYTE:\n\t\tcase UNSIGNED_SHORT:\n\t\tcase UNSIGNED_INT:\n\t\t\treturn 'u';\n\t\tcase BYTE:\n\t\tcase SHORT:\n\t\tcase INT:\n\t\t\treturn 'i';\n\t}\n\tthrow new Error(`Invalid type: ${type} passed to glslPrefixForType.`);\n}\n\n/**\n * @private\n */\nexport function glslComponentSelectionForNumComponents(numComponents: GPULayerNumComponents) {\n\tswitch (numComponents) {\n\t\tcase 1:\n\t\t\treturn '.x';\n\t\tcase 2:\n\t\t\treturn '.xy';\n\t\tcase 3:\n\t\t\treturn '.xyz';\n\t\tcase 4:\n\t\t\treturn '';\n\t}\n\tthrow new Error(`Invalid numComponents: ${numComponents} passed to glslComponentSelectionForNumComponents.`);\n}","import {\n\tGPUIO_FLOAT_PRECISION,\n\tGPUIO_INT_PRECISION,\n\tPRECISION_LOW_P,\n\tPRECISION_MEDIUM_P,\n} from '../../constants';\nimport { intForPrecision } from '../../conversions';\n\n// These precision definitions are applied to all vertex and fragment shaders.\n// Default to highp, but fallback to mediump if highp not available.\n// These defaults can be set in GPUComposer constructor as intPrecision and floatPrecision parameters.\n// https://webglfundamentals.org/webgl/lessons/webgl-precision-issues.html\nexport const PRECISION_SOURCE = `\n#if (${GPUIO_INT_PRECISION} == ${intForPrecision(PRECISION_LOW_P)})\n\tprecision lowp int;\n\t#if (__VERSION__ == 300)\n\t\tprecision lowp isampler2D;\n\t\tprecision lowp usampler2D;\n\t#endif\n#elif (${GPUIO_INT_PRECISION} == ${intForPrecision(PRECISION_MEDIUM_P)})\n\tprecision mediump int;\n\t#if (__VERSION__ == 300)\n\t\tprecision mediump isampler2D;\n\t\tprecision mediump usampler2D;\n\t#endif\n#else \n\t#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\tprecision highp int;\n\t\t#if (__VERSION__ == 300)\n\t\t\tprecision highp isampler2D;\n\t\t\tprecision highp usampler2D;\n\t\t#endif\n\t#else\n\t\tprecision mediump int;\n\t\t#if (__VERSION__ == 300)\n\t\t\tprecision mediump isampler2D;\n\t\t\tprecision mediump usampler2D;\n\t\t#endif\n\t#endif\n#endif\n#if (${GPUIO_FLOAT_PRECISION} == ${intForPrecision(PRECISION_LOW_P)})\n\tprecision lowp float;\n\tprecision lowp sampler2D;\n#elif (${GPUIO_FLOAT_PRECISION} == ${intForPrecision(PRECISION_MEDIUM_P)})\n\tprecision mediump float;\n\tprecision mediump sampler2D;\n#else\n\t#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\tprecision highp float;\n\t\tprecision highp sampler2D;\n\t#else\n\t\tprecision mediump float;\n\t\tprecision mediump sampler2D;\n\t#endif\n#endif\n`;","import { GLSLVersion, GLSL3 } from './constants';\n\n/**\n * Helper functions for converting GLSL3 to GLSL1 and checking for valid shader code.\n * Note: there is no positive lookbehind support in some browsers, use capturing parens instead.\n * https://stackoverflow.com/questions/3569104/positive-look-behind-in-javascript-regular-expression/3569116#3569116\n */\n\ntype GLSLType = 'float' | 'int' | 'uint' | 'vec2' | 'vec3' | 'vec4' | 'ivec2' | 'ivec3' | 'ivec4' | 'uvec2' | 'uvec3' | 'uvec4';\n\n/**\n * Convert vertex shader \"in\" to \"attribute\".\n * @private\n */\nexport function glsl1VertexIn(shaderSource: string) {\n\treturn shaderSource.replace(/\\bin\\b/g, 'attribute');\n}\n\nfunction escapeRegExp(string: string){\n\treturn string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * Typecast variable assignment.\n * This is used in cases when e.g. varyings have to be converted to float in GLSL1.\n */\nfunction typecastVariable(shaderSource: string, variableName: string, type: string) {\n\t// \"s\" makes this work for multiline values.\n\t// Do this without lookbehind to support older browsers.\n\t// const regexMatch = new RegExp(`(?<=\\\\b${escapeRegExp(variableName)}\\\\s*=\\\\s*)\\\\S[^;]*(?=;)`, 'sg');\n\tconst regexMatch = new RegExp(`\\\\b${escapeRegExp(variableName)}\\\\s*=\\\\s*\\\\S[^;]*;`, 'sg');\n\tconst assignmentExpressions = shaderSource.match(regexMatch);\n\tif (assignmentExpressions) {\n\t\t// Loop through all places where variable is assigned and typecast.\n\t\tfor (let i = 0; i < assignmentExpressions.length; i++) {\n\t\t\tconst regexValueMatch = new RegExp(`\\\\b${escapeRegExp(variableName)}\\\\s*=\\\\s*(\\\\S[^;]*);`, 's');\n\t\t\tconst value = assignmentExpressions[i].match(regexValueMatch);\n\t\t\tif (value && value[1]) {\n\t\t\t\tconst regexReplace = new RegExp(`\\\\b${escapeRegExp(variableName)}\\\\s*=\\\\s*${escapeRegExp(value[1])}\\\\s*;`, 's');\n\t\t\t\tshaderSource = shaderSource.replace(regexReplace, `${variableName} = ${type}(${value[1]});`);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Could not find value in expression: \"${assignmentExpressions[i]}\"`);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconsole.warn(`No assignment found for shader variable ${variableName}.`);\n\t}\n\treturn shaderSource;\n}\n\n/**\n * Convert int varyings to float types.\n * Also update any variable assignments so that they are cast to float.\n * @private\n */\nfunction _castVaryingToFloat(shaderSource: string, regexString: string, type: string) {\n\t// Do this without lookbehind to support older browsers.\n\t// const regexMatch = new RegExp(`(?<=${regexString}\\\\s+)\\\\S[^;]*(?=;)`, 'g');\n\tconst regexMatch = new RegExp(`${regexString}\\\\s+\\\\S[^;]*;`, 'g');\n\tconst castToFloatExpressions = shaderSource.match(regexMatch);\n\tif (castToFloatExpressions) {\n\t\t// Replace all with new type.\n\t\tconst regexReplace = new RegExp(`${regexString}\\\\b`, 'g');\n\t\tshaderSource = shaderSource.replace(regexReplace, `varying ${type}`);\n\t\t// Loop through each expression, grab variable name, and cast all assignments.\n\t\tfor (let i = 0; i < castToFloatExpressions.length; i++) {\n\t\t\tconst regexVariableMatch = new RegExp(`${regexString}\\\\s+(\\\\S[^;]*);`);\n\t\t\tconst variable = castToFloatExpressions[i].match(regexVariableMatch);\n\t\t\tif (variable && variable[2]) {\n\t\t\t\tshaderSource = typecastVariable(shaderSource, variable[2], type);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Could not find variable name in expression: \"${castToFloatExpressions[i]}\"`);\n\t\t\t}\n\t\t}\n\t}\n\treturn shaderSource;\n}\n\n/**\n * Convert int varyings to float types.\n * Only exported for testing.\n * @private\n */\nexport function castVaryingToFloat(shaderSource: string) {\n\t// Need to init all expressions with the same number of capturing groups\n\t// so that this will work in _castVaryingToFloat.\n\tshaderSource = _castVaryingToFloat(shaderSource, '\\\\bvarying\\\\s+(u)?int', 'float');\n\tshaderSource = _castVaryingToFloat(shaderSource, '\\\\bvarying\\\\s+(i|u)vec2', 'vec2');\n\tshaderSource = _castVaryingToFloat(shaderSource, '\\\\bvarying\\\\s+(i|u)vec3', 'vec3');\n\tshaderSource = _castVaryingToFloat(shaderSource, '\\\\bvarying\\\\s+(i|u)vec4', 'vec4');\n\treturn shaderSource;\n}\n\n/**\n * Convert vertex shader \"out\" to \"varying\".\n * Also remove \"flat\" if necessary.\n * Also cast as float if necessary.\n * @private\n */\nexport function glsl1VertexOut(shaderSource: string) {\n\tshaderSource = shaderSource.replace(/(\\bflat\\s+)?\\bout\\b/g, 'varying');\n\tshaderSource = castVaryingToFloat(shaderSource);\n\treturn shaderSource;\n}\n\n/**\n * Convert fragment shader \"in\" to \"varying\".\n * Also remove \"flat\" if necessary.\n * Also cast as float if necessary.\n * @private\n */\nexport function glsl1FragmentIn(shaderSource: string) {\n\tshaderSource = shaderSource.replace(/(\\bflat\\s+)?\\bin\\b/g, 'varying');\n\tshaderSource = castVaryingToFloat(shaderSource);\n\treturn shaderSource;\n}\n\n/**\n * Get variable name, type, and layout number for out variables.\n * Only exported for testing.\n * @private\n */\nexport function getFragmentOuts(shaderSource: string, programName: string) {\n\tconst outs: { [key: string]: {\n\t\tlocation: number,\n\t\ttype: GLSLType,\n\t}} = {};\n\tlet maxLocation = 0;\n\twhile (true) {\n\t\t// Do this without lookbehind to support older browsers.\n\t\tconst match = shaderSource.match(/\\b(layout\\s*\\(\\s*location\\s*=\\s*([0-9]+)\\s*\\)\\s*)?out\\s+((lowp|mediump|highp)\\s+)?((float|int|uint|([iu]?vec[234]))\\s+)?([_$a-zA-Z0-9]+)\\s*;/);\n\t\tif (!match) {\n\t\t\tif (Object.keys(outs).length === 0) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\t// Sort by location.\n\t\t\tconst variableNames = Object.keys(outs);\n\t\t\tconst numVariables = variableNames.length;\n\t\t\tconst outsSorted: {\n\t\t\t\tname: string,\n\t\t\t\ttype: GLSLType,\n\t\t\t}[] = new Array(maxLocation).fill(undefined);\n\t\t\t\n\t\t\tfor (let i = 0; i < numVariables; i++) {\n\t\t\t\tconst name = variableNames[i];\n\t\t\t\tconst { location, type } = outs[name];\n\t\t\t\tif (outsSorted[location] !== undefined) {\n\t\t\t\t\tthrow new Error(`Must be exactly one out declaration per layout location in GPUProgram \"${programName}\", conflicting declarations found at location ${location}.`);\n\t\t\t\t}\n\t\t\t\toutsSorted[location] =  { name, type };\n\t\t\t}\n\t\t\tif (variableNames.length !== maxLocation + 1) {\n\t\t\t\tthrow new Error(`Must be exactly one out declaration per layout location in GPUProgram \"${programName}\", layout locations must be sequential (no missing location numbers) starting from 0.`);\n\t\t\t}\n\t\t\tfor (let i = 0; i <= maxLocation; i++) {\n\t\t\t\tif (outsSorted[i] === undefined) {\n\t\t\t\t\tthrow new Error(`Missing out declaration at location ${i} in GPUProgram \"${programName}\", layout locations must be sequential (no missing location numbers) starting from 0.`);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn outsSorted;\n\t\t}\n\t\t// Save out parameters.\n\t\tconst name = match[8];\n\t\tconst location = parseInt(match[2] || '0');\n\t\tconst type = match[6] as GLSLType;\n\t\tif (!type) {\n\t\t\tthrow new Error(`No type found for out declaration \"${match[0]}\" for GPUProgram \"${programName}\".`);\n\t\t}\n\t\tif (!name) {\n\t\t\tthrow new Error(`No variable name found for out declaration \"${match[0]}\" for GPUProgram \"${programName}\".`);\n\t\t}\n\t\tif (outs[name]) {\n\t\t\tif (outs[name].location !== location) {\n\t\t\t\tthrow new Error(`All out declarations for variable \"${name}\" must have same location in GPUProgram \"${programName}\".`);\n\t\t\t}\n\t\t} else {\n\t\t\tif (location > maxLocation) maxLocation = location;\n\t\t\touts[name] = {\n\t\t\t\tlocation,\n\t\t\t\ttype,\n\t\t\t};\n\t\t}\n\t\t// Remove out definition so we can match to the next one.\n\t\tshaderSource = shaderSource.replace(match[0], '');\n\t}\n}\n\n/**\n * Convert out variables to gl_FragColor.\n * @private\n */\nexport function glsl1FragmentOut(shaderSource: string, programName: string) {\n\tconst outs = getFragmentOuts(shaderSource, programName);\n\tif (outs.length === 0) {\n\t\treturn [shaderSource];\n\t}\n\t// Remove layout declarations.\n\tshaderSource = shaderSource.replace(/\\blayout\\s*\\(\\s*location\\s*=\\s*([0-9]+)\\s*\\)\\s*/g, '');\n\t// If we detect multiple out declarations, we need to split the shader source.\n\n\tconst shaderSources: string[] = [];\n\tfor (let i = 0, numOuts = outs.length; i < numOuts; i++) {\n\t\tconst { type, name } = outs[i];\n\n\t\t// Remove out declaration for this variable.\n\t\tconst outRegex = new RegExp(`\\\\bout\\\\s+((lowp|mediump|highp)\\\\s+)?(float|int|uint|([iu]?vec[234]))\\\\s+${name}\\\\s*;`, 'g');\n\t\tlet outShaderSource = shaderSource.replace(outRegex, '');\n\t\t// Remove any other out declarations.\n\t\toutShaderSource = outShaderSource.replace(/\\bout\\b/g, '');\n\n\t\tlet assignmentFound = false;\n\t\t// Replace each instance of \"name =\" with gl_FragColor = and cast to vec4.\n\t\t// Do this without lookbehind to support older browsers.\n\t\t// const output = outShaderSource.match(/(?<=\\b${name}\\s*=\\s*)\\S.*(?=;)/s); // /s makes this work for multiline.\n\t\t// ? puts this in lazy mode (match shortest strings).\n\t\tconst regex = new RegExp(`\\\\b${name}\\\\s*=\\\\s*(\\\\S.*?);`, 's'); // 's' makes this work for multiline.\n\t\twhile (true) {\n\t\t\tconst output = outShaderSource.match(regex);\n\t\t\tif (output && output[1]) {\n\t\t\t\tassignmentFound = true;\n\t\t\t\tlet filler = '';\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'float':\n\t\t\t\t\tcase 'int':\n\t\t\t\t\tcase 'uint':\n\t\t\t\t\t\tfiller = ', 0, 0, 0';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vec2':\n\t\t\t\t\tcase 'ivec2':\n\t\t\t\t\tcase 'uvec2':\n\t\t\t\t\t\tfiller = ', 0, 0';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'vec3':\n\t\t\t\t\tcase 'ivec3':\n\t\t\t\t\tcase 'uvec3':\n\t\t\t\t\t\tfiller = ', 0';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toutShaderSource = outShaderSource.replace(regex, `gl_FragColor = vec4(${output[1]}${filler});`);\n\t\t\t} else {\n\t\t\t\tif (!assignmentFound) throw new Error(`No assignment found for out declaration in GPUProgram \"${programName}\".`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tshaderSources.push(outShaderSource);\n\t}\n\treturn shaderSources;\n}\n\n/**\n * Contains gl_FragColor.\n * @private\n */\n function containsGLFragColor(shaderSource: string) {\n\treturn !!shaderSource.match(/\\bgl_FragColor\\b/);\n}\n\n/**\n * Check for presence of gl_FragColor in fragment shader source.\n * @private \n */\n export function checkFragmentShaderForFragColor(shaderSource: string, glslVersion: GLSLVersion, name: string) {\n\tconst gl_FragColor = containsGLFragColor(shaderSource);\n\tif (glslVersion === GLSL3) {\n\t\t// Check that fragment shader source DOES NOT contain gl_FragColor\n\t\tif (gl_FragColor) {\n\t\t\tthrow new Error(`Found \"gl_FragColor\" declaration in fragment shader for GPUProgram \"${name}\": either init GPUComposer with glslVersion = GLSL1 or use GLSL3 syntax in your fragment shader.`);\n\t\t}\n\t}\n}\n\n/**\n * Convert texture to texture2D.\n * @private\n */\nexport function glsl1Texture(shaderSource: string) {\n\treturn shaderSource.replace(/\\btexture\\(/g, 'texture2D(');\n}\n\n/**\n * Convert isampler2D and usampler2D to sampler2D.\n * @private\n */\nexport function glsl1Sampler2D(shaderSource: string) {\n\treturn shaderSource.replace(/\\b(i|u)sampler2D\\b/g, 'sampler2D');\n}\n\n/**\n * Unsigned int types are not supported, use int types instead.\n * @private\n */\nexport function glsl1Uint(shaderSource: string) {\n\tshaderSource = shaderSource.replace(/\\buint\\b/g, 'int');\n\tshaderSource = shaderSource.replace(/\\buvec2\\b/g, 'ivec2');\n\tshaderSource = shaderSource.replace(/\\buvec3\\b/g, 'ivec3');\n\tshaderSource = shaderSource.replace(/\\buvec4\\b/g, 'ivec4');\n\tshaderSource = shaderSource.replace(/\\buint\\(/g, 'int(');\n\tshaderSource = shaderSource.replace(/\\buvec2\\(/g, 'ivec2(');\n\tshaderSource = shaderSource.replace(/\\buvec3\\(/g, 'ivec3(');\n\tshaderSource = shaderSource.replace(/\\buvec4\\(/g, 'ivec4(');\n\treturn shaderSource;\n}\n\n/**\n * Replace all highp with mediump.\n * @private\n */\nexport function highpToMediump(shaderSource: string) {\n\treturn shaderSource.replace(/\\bhighp\\b/, 'mediump');\n}\n\n/**\n * Strip out any version numbers.\n * https://github.com/Jam3/glsl-version-regex\n * @private\n */\nexport function stripVersion(shaderSource: string) {\n\tconst origLength = shaderSource.length;\n\tshaderSource = shaderSource.replace(/^\\s*\\#version\\s+([0-9]+(\\s+(es)+)?)\\s*/, '');\n\tif (shaderSource.length !== origLength) {\n\t\tconsole.warn('GPUIO expects shader source that does not contain #version declarations, removing....');\n\t}\n\treturn shaderSource;\n}\n\n/**\n * Strip out any precision declarations.\n * @private\n */\nexport function stripPrecision(shaderSource: string) {\n\tconst origLength = shaderSource.length;\n\tshaderSource = shaderSource.replace(/\\s*precision\\s+((highp)|(mediump)|(lowp))\\s+[a-zA-Z0-9]+\\s*;/g, '');\n\tif (shaderSource.length !== origLength) {\n\t\tconsole.warn('GPUIO expects shader source that does not contain precision declarations, removing....');\n\t}\n\treturn shaderSource;\n}\n\n/**\n * Strip out comments from shader code.\n * @private\n */\nexport function stripComments(shaderSource: string) {\n\tshaderSource = shaderSource.replace(/[\\t ]*\\/\\/.*\\n/g, ''); // Remove single-line comments.\n\t// ? puts this in lazy mode (match shortest strings).\n\tshaderSource = shaderSource.replace(/\\/\\*.*?\\*\\//gs, ''); /* Remove multi-line comments */\n\treturn shaderSource;\n}\n\n/**\n * Get the number of sampler2D's in a fragment shader program.\n * @private\n */\nexport function getSampler2DsInProgram(shaderSource: string) {\n\t// Do this without lookbehind to support older browsers.\n\t// const samplers = shaderSource.match(/(?<=\\buniform\\s+(((highp)|(mediump)|(lowp))\\s+)?(i|u)?sampler2D\\s+)\\w+(?=\\s?;)/g);\n\tconst samplersNoDuplicates: {[key: string]: boolean} = {};\n\tconst regex = '\\\\buniform\\\\s+(((highp)|(mediump)|(lowp))\\\\s+)?(i|u)?sampler2D\\\\s+(\\\\w+)\\\\s*;';\n\tconst samplers = shaderSource.match(new RegExp(regex, 'g'));\n\tif (!samplers || samplers.length === 0) return [];\n\t// We need to be a bit careful as same sampler could be declared multiple times if compile time conditionals are used.\n\t// Extract uniform name.\n\tconst uniformMatch = new RegExp(regex);\n\tsamplers.forEach(sampler => {\n\t\tconst uniform = sampler.match(uniformMatch);\n\t\tif (!uniform || !uniform[7]) {\n\t\t\tconsole.warn(`Could not find sampler2D uniform name in string \"${sampler}\".`);\n\t\t\treturn;\n\t\t}\n\t\tsamplersNoDuplicates[uniform[7]] = true;\n\t})\n\treturn Object.keys(samplersNoDuplicates);\n}","import { GLSLVersion, GLSL1 } from './constants';\nimport { getSampler2DsInProgram } from './regex';\n\n/**\n * Wrap type to use in polyfill.\n * (0) Default behavior (no polyfill).\n * (1) REPEAT polyfill.\n * @private\n */\nexport const SAMPLER2D_WRAP_X = 'GPUIO_WRAP_X';\n/**\n * Wrap type to use in polyfill.\n * (0) Default behavior (no polyfill).\n * (1) REPEAT polyfill.\n * @private\n */\nexport const SAMPLER2D_WRAP_Y = 'GPUIO_WRAP_Y';\n/**\n * Flag to cast texture() result to int type (needed for GLSL1).\n * @private\n */\n export const SAMPLER2D_CAST_INT = 'GPUIO_CAST_INT';\n\n/**\n * Filter type to use in polyfill.\n * (0) Default behavior (no polyfill).\n * (0) LINEAR polyfill.\n * @private\n */\nexport const SAMPLER2D_FILTER = 'GPUIO_FILTER';\n\n/**\n * UV size of half a pixel for this texture.\n * @private\n */\nexport const SAMPLER2D_HALF_PX_UNIFORM = 'u_gpuio_half_px';\n\n/**\n * Dimensions of texture\n * @private\n */\nexport const SAMPLER2D_DIMENSIONS_UNIFORM = 'u_gpuio_dimensions';\n\n/**\n * Override texture function to perform polyfill filter/wrap.\n * https://www.codeproject.com/Articles/236394/Bi-Cubic-and-Bi-Linear-Interpolation-with-GLSL\n * @private\n */\nexport function texturePolyfill(shaderSource: string) {\n\tconst textureCalls = shaderSource.match(/\\btexture\\(/g);\n\tif (!textureCalls || textureCalls.length === 0) return { shaderSource, samplerUniforms: [] };\n\tconst samplerUniforms = getSampler2DsInProgram(shaderSource);\n\tif (samplerUniforms.length === 0) return { shaderSource, samplerUniforms };\n\tsamplerUniforms.forEach((name, i) => {\n\t\tconst regex = new RegExp(`\\\\btexture(2D)?\\\\(\\\\s?${name}\\\\b`, 'gs');\n\t\tshaderSource = shaderSource.replace(regex, `GPUIO_TEXTURE_POLYFILL${i}(${name}`);\n\t});\n\tconst remainingTextureCalls = shaderSource.match(/\\btexture(2D)?\\(/g);\n\tif (remainingTextureCalls?.length) {\n\t\tconsole.warn('Fragment shader polyfill has missed some calls to texture().', shaderSource);\n\t}\n\t\n\tlet polyfillUniforms: {[key: string] : string } = {};\n\tfor (let i = 0; i < samplerUniforms.length; i++) {\n\t\t// Init uniforms with a type.\n\t\tpolyfillUniforms[`${SAMPLER2D_HALF_PX_UNIFORM}${i}`] = 'vec2';\n\t\tpolyfillUniforms[`${SAMPLER2D_DIMENSIONS_UNIFORM}${i}`] = 'vec2';\n\t}\n\n\tfunction make_GPUIO_TEXTURE_POLYFILL(i: number, prefix: string, castOpening = '') {\n\t\tconst castEnding = castOpening === '' ? '' : ')';\n\t\tconst returnPrefix = castOpening === '' ? prefix : 'i';\n\t\treturn `\n${returnPrefix}vec4 GPUIO_TEXTURE_POLYFILL${i}(const ${prefix}sampler2D sampler, const vec2 uv) {\n\t${ prefix === '' ? `#if (${SAMPLER2D_FILTER}${i} == 0)` : ''}\n\t\t#if (${SAMPLER2D_WRAP_X}${i} == 0)\n\t\t\t#if (${SAMPLER2D_WRAP_Y}${i} == 0)\n\t\t\t\treturn ${castOpening}texture(sampler, uv)${castEnding};\n\t\t\t#else\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_WRAP_CLAMP_REPEAT(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i})${castEnding};\n\t\t\t#endif\n\t\t#else\n\t\t\t#if (${SAMPLER2D_WRAP_Y}${i} == 0)\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_WRAP_REPEAT_CLAMP(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i})${castEnding};\n\t\t\t#else\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_WRAP_REPEAT_REPEAT(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i})${castEnding};\n\t\t\t#endif\n\t\t#endif\n\t${ prefix === '' ? `#else\n\t\t#if (${SAMPLER2D_WRAP_X}${i} == 0)\n\t\t\t#if (${SAMPLER2D_WRAP_Y}${i} == 0)\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_BILINEAR_INTERP(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i}, ${SAMPLER2D_DIMENSIONS_UNIFORM}${i})${castEnding};\n\t\t\t#else\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_BILINEAR_INTERP_WRAP_CLAMP_REPEAT(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i}, ${SAMPLER2D_DIMENSIONS_UNIFORM}${i})${castEnding};\n\t\t\t#endif\n\t\t#else\n\t\t\t#if (${SAMPLER2D_WRAP_Y}${i} == 0)\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_BILINEAR_INTERP_WRAP_REPEAT_CLAMP(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i}, ${SAMPLER2D_DIMENSIONS_UNIFORM}${i})${castEnding};\n\t\t\t#else\n\t\t\t\treturn ${castOpening}GPUIO_TEXTURE_BILINEAR_INTERP_WRAP_REPEAT_REPEAT(sampler, uv, ${SAMPLER2D_HALF_PX_UNIFORM}${i}, ${SAMPLER2D_DIMENSIONS_UNIFORM}${i})${castEnding};\n\t\t\t#endif\n\t\t#endif\n\t#endif` : '' }\n}\\n`;\n\t}\n\n\tfunction make_GPUIO_TEXTURE_WRAP(prefix: string) {\n\t\treturn `\n${prefix}vec4 GPUIO_TEXTURE_WRAP_REPEAT_REPEAT(const ${prefix}sampler2D sampler, const vec2 uv, const vec2 halfPx) {\n\treturn texture(sampler, GPUIO_WRAP_REPEAT_UV(uv));\n}\n${prefix}vec4 GPUIO_TEXTURE_WRAP_REPEAT_CLAMP(const ${prefix}sampler2D sampler, vec2 uv, const vec2 halfPx) {\n\tuv.x = GPUIO_WRAP_REPEAT_UV_COORD(uv.x);\n\t// uv.y = GPUIO_WRAP_CLAMP_UV_COORD(uv.y, halfPx.y);\n\treturn texture(sampler, uv);\n}\n${prefix}vec4 GPUIO_TEXTURE_WRAP_CLAMP_REPEAT(const ${prefix}sampler2D sampler, vec2 uv, const vec2 halfPx) {\n\t// uv.x = GPUIO_WRAP_CLAMP_UV_COORD(uv.x, halfPx.x);\n\tuv.y = GPUIO_WRAP_REPEAT_UV_COORD(uv.y);\n\treturn texture(sampler, uv);\n}\\n`;\n\t}\n\n\tfunction make_GPUIO_BILINEAR_INTERP(wrapType: string | null) {\n\t\tconst lookupFunction = wrapType ? `GPUIO_TEXTURE_WRAP_${wrapType}` : 'texture';\n\t\tconst extraParams =  wrapType ? `, halfPx` : '';\n\t\treturn`\nvec4 GPUIO_TEXTURE_BILINEAR_INTERP${ wrapType ? `_WRAP_${wrapType}` : '' }(const sampler2D sampler, const vec2 uv, const vec2 halfPx, const vec2 dimensions) {\n\tvec2 pxFraction = fract(uv * dimensions);\n\tvec2 offset = halfPx - vec2(0.00001, 0.00001) * max(\n\t\t\tstep(abs(pxFraction.x - 0.5), 0.001),\n\t\t\tstep(abs(pxFraction.y - 0.5), 0.001)\n\t\t);\n\tvec2 baseUV = uv - offset;\n\tvec2 diagOffset = vec2(offset.x, -offset.y);\n\tvec4 minmin = ${lookupFunction}(sampler, baseUV${extraParams});\n\tvec4 maxmin = ${lookupFunction}(sampler, uv + diagOffset${extraParams});\n\tvec4 minmax = ${lookupFunction}(sampler, uv - diagOffset${extraParams});\n\tvec4 maxmax = ${lookupFunction}(sampler, uv + offset${extraParams});\n\tvec2 t = fract(baseUV * dimensions);\n\tvec4 yMin = mix(minmin, maxmin, t.x);\n\tvec4 yMax = mix(minmax, maxmax, t.x);\n\treturn mix(yMin, yMax, t.y);\n}\\n`;\n\t}\n\n\tshaderSource = `\n${ Object.keys(polyfillUniforms).map((key) => `uniform ${polyfillUniforms[key]} ${key};`).join('\\n') }\n\nfloat GPUIO_WRAP_REPEAT_UV_COORD(const float coord) {\n\treturn fract(coord + ceil(abs(coord)));\n}\nvec2 GPUIO_WRAP_REPEAT_UV(const vec2 uv) {\n\treturn fract(uv + ceil(abs(uv)));\n}\n// float GPUIO_WRAP_CLAMP_UV_COORD(const float coord, const float halfPx) {\n// \treturn clamp(coord, halfPx, 1.0 - halfPx);\n// }\n\n${ make_GPUIO_TEXTURE_WRAP('') }\n#if (__VERSION__ == 300)\n${ ['u', 'i'].map(prefix => make_GPUIO_TEXTURE_WRAP(prefix)).join('\\n') }\n#endif\n\n${ [ null,\n\t'REPEAT_REPEAT',\n\t'REPEAT_CLAMP',\n\t'CLAMP_REPEAT',\n].map(wrap => make_GPUIO_BILINEAR_INTERP(wrap)).join('\\n') }\n\n${ samplerUniforms.map((uniform, index) => {\nreturn `#ifndef ${SAMPLER2D_CAST_INT}${index}\n\t${ make_GPUIO_TEXTURE_POLYFILL(index, '') }\n#endif`}).join('\\n') }\n#if (__VERSION__ == 300)\n${ ['u', 'i'].map(prefix => {\n\treturn samplerUniforms.map((uniform, index) => {\n\t\treturn make_GPUIO_TEXTURE_POLYFILL(index, prefix);\n\t}).join('\\n');\n}).join('\\n') }\n#else\n\t${ samplerUniforms.map((uniform, index) => {\nreturn `#ifdef ${SAMPLER2D_CAST_INT}${index}\n\t${make_GPUIO_TEXTURE_POLYFILL(index, '', 'ivec4(') }\n#endif`}).join('\\n') }\n#endif\n\n${shaderSource}`;\n\treturn {\n\t\tshaderSource,\n\t\tsamplerUniforms,\n\t}\n}\n\ntype T = 'float' | 'vec2' | 'vec3' | 'vec4';\ntype TI = 'int' | 'ivec2' | 'ivec3' | 'ivec4';\ntype TU = 'uint' | 'uvec2' | 'uvec3' | 'uvec4';\ntype TB = 'bool' | 'bvec2' | 'bvec3' | 'bvec4';\n\nfunction floatTypeForIntType(type: TI | TU): T {\n\tswitch(type) {\n\t\tcase 'int':\n\t\tcase 'uint':\n\t\t\treturn 'float';\n\t\tcase 'ivec2':\n\t\tcase 'uvec2':\n\t\t\treturn 'vec2';\n\t\tcase 'ivec3':\n\t\tcase 'uvec3':\n\t\t\treturn 'vec3';\n\t\tcase 'ivec4':\n\t\tcase 'uvec4':\n\t\t\treturn 'vec4';\n\t}\n\tthrow new Error(`Unknown type ${type}.`);\n}\n\nfunction floatTypeForBoolType(type: TB): T {\n\tswitch(type) {\n\t\tcase 'bool':\n\t\t\treturn 'float';\n\t\tcase 'bvec2':\n\t\t\treturn 'vec2';\n\t\tcase 'bvec3':\n\t\t\treturn 'vec3';\n\t\tcase 'bvec4':\n\t\t\treturn 'vec4';\n\t}\n\tthrow new Error(`Unknown type ${type}.`);\n}\n\nfunction abs(type: TI) { return `${type} abs(const ${type} a) { return ${type}(abs(${floatTypeForIntType(type)}(a))); }`; }\nfunction sign(type: TI) { return `${type} sign(const ${type} a) { return ${type}(sign(${floatTypeForIntType(type)}(a))); }`; }\nfunction trunc(type: T) { return `${type} trunc(const ${type} a) { return round(a - fract(a) * sign(a)); }`; }\nfunction round(type: T) { return `${type} round(const ${type} a) { return floor(a + 0.5); }`; }\nfunction roundEven(type: T) { return `${type} roundEven(const ${type} a) { return 2.0 * round(a / 2.0); }`; }\nfunction min(type1: TI, type2: TI) { return `${type1} min(const ${type1} a, const ${type2} b) { return ${type1}(min(${floatTypeForIntType(type1)}(a), ${floatTypeForIntType(type2)}(b))); }`; }\nfunction max(type1: TI, type2: TI) { return `${type1} max(const ${type1} a, const ${type2} b) { return ${type1}(max(${floatTypeForIntType(type1)}(a), ${floatTypeForIntType(type2)}(b))); }`; }\nfunction clamp(type1: TI, type2: TI) { return `${type1} clamp(const ${type1} a, const ${type2} min, const ${type2} max) { return ${type1}(clamp(${floatTypeForIntType(type1)}(a), ${floatTypeForIntType(type2)}(min), ${floatTypeForIntType(type2)}(max))); }`; }\nfunction mix(type1: T, type2: TB) { return `${type1} mix(const ${type1} a, const ${type1} b, const ${type2} c) { return mix(a, b, ${floatTypeForBoolType(type2)}(c)); }`; }\nfunction det2(n: number, m: number, size: number) { return `a[${n}][${m}] * a[${(n + 1) % size}][${(m + 1) % size}] - a[${(n + 1) % size}][${m}] * a[${n}][${(m + 1) % size}]`; }\n// TODO: I don't think these are quite right yet.\nfunction det3(n: number, m: number, size: number) { return [0, 1, 2].map(offset => `a[${n}][${(m + offset) % size}] * (${det2((n + 1) % size, (m + 1 + offset) % size, size)})`).join(' + '); }\nfunction det4(n: number, m: number, size: number) { return [0, 1, 2, 3].map(offset => `a[${n}][${(m + offset) % size}] * (${det3((n + 1) % size, (m + 1 + offset) % size, size)})`).join(' + '); }\n\n/**\n * Polyfill common functions/operators that GLSL1 lacks.\n * @private\n */\nexport function GLSL1Polyfills(shaderSource: string) {\n\t// We'll attempt to just add in what we need, but no worries if we add extraneous functions.\n\t// They will be removed by compiler.\n\tlet GLSL1_POLYFILLS = '';\n\n\t// We don't need to create unsigned int polyfills, bc unsigned int is not a supported type in GLSL1.\n\t// All unsigned int variables will be cast as int and be caught by the signed int polyfills.\n\n\tif (shaderSource.includes('abs')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\n${abs('int')}\n${abs('ivec2')}\n${abs('ivec3')}\n${abs('ivec4')}\n`;\n\t}\n\n\tif (shaderSource.includes('sign')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\n${sign('int')}\n${sign('ivec2')}\n${sign('ivec3')}\n${sign('ivec4')}\n`;\n\t}\n\n\tif (shaderSource.includes('round')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\n${round('float')}\n${round('vec2')}\n${round('vec3')}\n${round('vec4')}\n`;\n\t}\n\n\tif (shaderSource.includes('trunc')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\n${trunc('float')}\n${trunc('vec2')}\n${trunc('vec3')}\n${trunc('vec4')}\n`;\n\t}\n\n\tif (shaderSource.includes('roundEven')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\n${roundEven('float')}\n${roundEven('vec2')}\n${roundEven('vec3')}\n${roundEven('vec4')}\n`;\n\t}\n\n\tif (shaderSource.includes('min')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\n${min('int', 'int')}\n${min('ivec2', 'ivec2')}\n${min('ivec3', 'ivec3')}\n${min('ivec4', 'ivec4')}\n${min('ivec2', 'int')}\n${min('ivec3', 'int')}\n${min('ivec4', 'int')}\n`;\n\t}\n\n\tif (shaderSource.includes('max')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\n${max('int', 'int')}\n${max('ivec2', 'ivec2')}\n${max('ivec3', 'ivec3')}\n${max('ivec4', 'ivec4')}\n${max('ivec2', 'int')}\n${max('ivec3', 'int')}\n${max('ivec4', 'int')}\n`;\n\t}\n\n\tif (shaderSource.includes('clamp')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\n${clamp('int', 'int')}\n${clamp('ivec2', 'ivec2')}\n${clamp('ivec3', 'ivec3')}\n${clamp('ivec4', 'ivec4')}\n${clamp('ivec2', 'int')}\n${clamp('ivec3', 'int')}\n${clamp('ivec4', 'int')}\n`;\n\t}\n\n\tif (shaderSource.includes('mix')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\n${mix('float', 'bool')}\n${mix('vec2', 'bvec2')}\n${mix('vec3', 'bvec3')}\n${mix('vec4', 'bvec4')}\n`;\n\t}\n\n\tif (shaderSource.includes('outerProduct')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\nmat2 outerProduct(const vec2 a, const vec2 b) {\n\treturn mat2(\n\t\ta.x * b.x, a.x * b.y,\n\t\ta.y * b.x, a.y * b.y\n\t);\n}\nmat3 outerProduct(const vec3 a, const vec3 b) {\n\treturn mat3(\n\t\ta.x * b.x, a.x * b.y, a.x * b.z,\n\t\ta.y * b.x, a.y * b.y, a.y * b.z,\n\t\ta.z * b.x, a.z * b.y, a.z * b.z\n\t);\n}\nmat4 outerProduct(const vec4 a, const vec4 b) {\n\treturn mat4(\n\t\ta.x * b.x, a.x * b.y, a.x * b.z, a.x * b.w,\n\t\ta.y * b.x, a.y * b.y, a.y * b.z, a.y * b.w,\n\t\ta.z * b.x, a.z * b.y, a.z * b.z, a.z * b.w,\n\t\ta.w * b.x, a.w * b.y, a.w * b.z, a.w * b.w\n\t);\n}\n`;\n\t}\n\n\tif (shaderSource.includes('transpose')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\nmat2 transpose(mat2 a) {\n\tfloat temp = a[0][1];\n\ta[0][1] = a[1][0];\n\ta[1][0] = temp;\n\treturn a;\n}\nmat3 transpose(mat3 a) {\n\tfloat temp = a[0][2];\n\ta[0][2] = a[2][0];\n\ta[2][0] = temp;\n\ttemp = a[0][1];\n\ta[0][1] = a[1][0];\n\ta[1][0] = temp;\n\ttemp = a[1][2];\n\ta[1][2] = a[2][1];\n\ta[2][1] = temp;\n\treturn a;\n}\nmat4 transpose(mat4 a) {\n\tfloat temp = a[0][3];\n\ta[0][3] = a[3][0];\n\ta[3][0] = temp;\n\ttemp = a[0][2];\n\ta[0][2] = a[2][0];\n\ta[2][0] = temp;\n\ttemp = a[2][3];\n\ta[2][3] = a[3][2];\n\ta[3][2] = temp;\n\ttemp = a[0][1];\n\ta[0][1] = a[1][0];\n\ta[1][0] = temp;\n\ttemp = a[1][2];\n\ta[1][2] = a[2][1];\n\ta[2][1] = temp;\n\ttemp = a[2][3];\n\ta[2][3] = a[3][2];\n\ta[3][2] = temp;\n\treturn a;\n}\n`;\n\t}\n\n\tif (shaderSource.includes('determinant')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\nfloat determinant(const mat2 a) {\n\treturn ${ det2(0, 0, 2) };\n}\nfloat determinant(const mat3 a) {\n\treturn ${ det3(0, 0, 3) };\n}\nfloat determinant(const mat4 a) {\n\treturn ${ det4(0, 0, 4) };\n}\n`;\n\t}\n\n\t// Copied from https://github.com/gpujs/gpu.js/blob/master/src/backend/web-gl/fragment-shader.js\n\tif (shaderSource.includes('sinh')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\nfloat sinh(const float x) {\n\treturn (pow(${Math.E}, x) - pow(${Math.E}, -x)) / 2.0;\n}\n`;\n\t}\n\tif (shaderSource.includes('cosh')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\nfloat cosh(const float x) {\n\treturn (pow(${Math.E}, x) + pow(${Math.E}, -x)) / 2.0; \n}\n`;\n\t}\n\tif (shaderSource.includes('tanh')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\nfloat tanh(const float x) {\n\tfloat e = exp(2.0 * x);\n\treturn (e - 1.0) / (e + 1.0);\n}\n`;\n\t}\n\tif (shaderSource.includes('asinh')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\nfloat asinh(const float x) {\n\treturn log(x + sqrt(x * x + 1.0));\n}\n`;\n\t}\n\tif (shaderSource.includes('asinh')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\nfloat acosh(const float x) {\n\treturn log(x + sqrt(x * x - 1.0));\n}\n`;\n\t}\n\tif (shaderSource.includes('asinh')) {\n\t\tGLSL1_POLYFILLS += `\\n\\n\nfloat atanh(float x) {\n\tx = (x + 1.0) / (x - 1.0);\n\treturn 0.5 * log(x * sign(x));\n}\n`;\n\t}\n\n\treturn GLSL1_POLYFILLS;\n}\n\nfunction index1DToUV(type1: 'int' | 'uint', type2: 'ivec2' | 'uvec2' | 'vec2') {\nreturn`vec2 index1DToUV(const ${type1} index1D, const ${type2} dimensions) {\n\t${type1} width = ${type1}(dimensions.x);\n\t${type1} y = index1D / width;\n\t${type1} x = index1D - width * y;\n\tfloat u = (float(x) + 0.5) / float(dimensions.x);\n\tfloat v = (float(y) + 0.5) / float(dimensions.y);\n\treturn vec2(u, v);\n}`;\n}\nfunction modi(type1: TI | TU, type2: TI | TU) { return `${type1} modi(const ${type1} x, const ${type2} y) { return x - y * (x / y); }`; }\nfunction stepi(type1: TI | TU, type2: TI | TU) { return `${type2} stepi(const ${type1} x, const ${type2} y) { return ${type2}(step(${floatTypeForIntType(type1)}(x), ${floatTypeForIntType(type2)}(y))); }`; }\nfunction bitshiftLeft(type1: TI | TU, type2: TI | TU) {\nreturn`${type1} bitshiftLeft(const ${type1} a, const ${type2} b) {\n\t#if (__VERSION__ == 300)\n\t\treturn a << b;\n\t#else\n\t\treturn a * ${type1}(pow(${floatTypeForIntType(type2)}(2.0), ${floatTypeForIntType(type2)}(b)));\n\t#endif\n}`;\n}\nfunction bitshiftRight(type1: TI | TU, type2: TI | TU) {\nreturn `${type1} bitshiftRight(const ${type1} a, const ${type2} b) {\n\t#if (__VERSION__ == 300)\n\t\treturn a >> b;\n\t#else\n\t\treturn ${type1}(round(${floatTypeForIntType(type1)}(a) / pow(${floatTypeForIntType(type2)}(2.0), ${floatTypeForIntType(type2)}(b))));\n\t#endif\n}`; }\n// Copied from https://github.com/gpujs/gpu.js/blob/master/src/backend/web-gl/fragment-shader.js\n// Seems like these could be optimized.\nfunction bitwiseOr(numBits: 8 | 16 | 32) {\nreturn `int bitwiseOr${numBits === 32 ? '' : numBits}(int a, int b) {\n\t#if (__VERSION__ == 300)\n\t\treturn a | b;\n\t#else\n\t\tint result = 0;\n\t\tint n = 1;\n\t\t\n\t\tfor (int i = 0; i < ${numBits}; i++) {\n\t\t\tif ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n\t\t\t\tresult += n;\n\t\t\t}\n\t\t\ta = a / 2;\n\t\t\tb = b / 2;\n\t\t\tn = n * 2;\n\t\t\tif(!(a > 0 || b > 0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t#endif\n}`; };\nfunction bitwiseXOR(numBits: 8 | 16 | 32) {\nreturn `int bitwiseXOR${numBits === 32 ? '' : numBits}(int a, int b) {\n\t#if (__VERSION__ == 300)\n\t\treturn a ^ b;\n\t#else\n\t\tint result = 0;\n\t\tint n = 1;\n\t\t\n\t\tfor (int i = 0; i < ${numBits}; i++) {\n\t\t\tif ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n\t\t\t\tresult += n;\n\t\t\t}\n\t\t\ta = a / 2;\n\t\t\tb = b / 2;\n\t\t\tn = n * 2;\n\t\t\tif(!(a > 0 || b > 0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t#endif\n}`; }\nfunction bitwiseAnd(numBits: 8 | 16 | 32) {\nreturn `int bitwiseAnd${numBits === 32 ? '' : numBits}(int a, int b) {\n\t#if (__VERSION__ == 300)\n\t\treturn a & b;\n\t#else\n\t\tint result = 0;\n\t\tint n = 1;\n\t\tfor (int i = 0; i < ${numBits}; i++) {\n\t\t\tif ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n\t\t\t\tresult += n;\n\t\t\t}\n\t\t\ta = a / 2;\n\t\t\tb = b / 2;\n\t\t\tn = n * 2;\n\t\t\tif(!(a > 0 && b > 0)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t#endif\n}`; };\nfunction bitwiseNot(numBits: 8 | 16 | 32) {\nreturn `int bitwiseNot${numBits === 32 ? '' : numBits}(int a) {\n\t#if (__VERSION__ == 300)\n\t\treturn ~a;\n\t#else\n\t\tint result = 0;\n\t\tint n = 1;\n\n\t\tfor (int i = 0; i < ${numBits}; i++) {\n\t\t\tif (modi(a, 2) == 0) {\n\t\t\t\tresult += n;\n\t\t\t}\n\t\t\ta = a / 2;\n\t\t\tn = n * 2;\n\t\t}\n\t\treturn result;\n\t#endif\n}`; }\n\n/**\n * Polyfills to be make available for both GLSL1 and GLSL3 fragment shaders.\n * @private\n */\nexport function fragmentShaderPolyfills(shaderSource: string, glslVersion: GLSLVersion) {\n\t// We'll attempt to just add in what we need, but no worries if we add extraneous functions.\n\t// They will be removed by compiler.\n\tlet FRAGMENT_SHADER_POLYFILLS = '';\n\n\t// index1DToUV gives UV coords for 1D indices (for 1D GPULayers).\n\tif (shaderSource.includes('index1DToUV')) {\n\t\tFRAGMENT_SHADER_POLYFILLS += `\\n\n${index1DToUV('int', 'ivec2')}\n${index1DToUV('int', 'vec2')}\n#if (__VERSION__ == 300)\n${index1DToUV('int', 'uvec2')}\n${index1DToUV('uint', 'uvec2')}\n${index1DToUV('uint', 'ivec2')}\n${index1DToUV('uint', 'vec2')}\n#endif\n`;\n\t}\n\n\t// modi is called from GLSL1 bitwise polyfills.\n\tif (shaderSource.includes('modi') || (glslVersion === GLSL1 && shaderSource.includes('bitwise'))) {\n\t\tFRAGMENT_SHADER_POLYFILLS += `\\n\n${modi('int', 'int')}\n${modi('ivec2', 'ivec2')}\n${modi('ivec3', 'ivec3')}\n${modi('ivec4', 'ivec4')}\n${modi('ivec2', 'int')}\n${modi('ivec3', 'int')}\n${modi('ivec4', 'int')}\n#if (__VERSION__ == 300)\n${modi('uint', 'uint')}\n${modi('uvec2', 'uvec2')}\n${modi('uvec3', 'uvec3')}\n${modi('uvec4', 'uvec4')}\n${modi('uvec2', 'uint')}\n${modi('uvec3', 'uint')}\n${modi('uvec4', 'uint')}\n#endif\n`;\n\t}\n\tif (shaderSource.includes('stepi')) {\n\t\tFRAGMENT_SHADER_POLYFILLS += `\\n\n${stepi('int', 'int')}\n${stepi('ivec2', 'ivec2')}\n${stepi('ivec3', 'ivec3')}\n${stepi('ivec4', 'ivec4')}\n${stepi('int', 'ivec2')}\n${stepi('int', 'ivec3')}\n${stepi('int', 'ivec4')}\n#if (__VERSION__ == 300)\n${stepi('uint', 'uint')}\n${stepi('uvec2', 'uvec2')}\n${stepi('uvec3', 'uvec3')}\n${stepi('uvec4', 'uvec4')}\n${stepi('uint', 'uvec2')}\n${stepi('uint', 'uvec3')}\n${stepi('uint', 'uvec4')}\n#endif\n`;\n\t}\n\n\tif (shaderSource.includes('bitshiftLeft')) {\n\t\tFRAGMENT_SHADER_POLYFILLS += `\\n\n${bitshiftLeft('int', 'int')}\n${bitshiftLeft('ivec2', 'ivec2')}\n${bitshiftLeft('ivec3', 'ivec3')}\n${bitshiftLeft('ivec4', 'ivec4')}\n${bitshiftLeft('ivec2', 'int')}\n${bitshiftLeft('ivec3', 'int')}\n${bitshiftLeft('ivec4', 'int')}\n#if (__VERSION__ == 300)\n${bitshiftLeft('uint', 'uint')}\n${bitshiftLeft('uvec2', 'uvec2')}\n${bitshiftLeft('uvec3', 'uvec3')}\n${bitshiftLeft('uvec4', 'uvec4')}\n${bitshiftLeft('uvec2', 'uint')}\n${bitshiftLeft('uvec3', 'uint')}\n${bitshiftLeft('uvec4', 'uint')}\n#endif\n`;\n\t}\n\n\tif (shaderSource.includes('bitshiftRight')) {\n\t\tFRAGMENT_SHADER_POLYFILLS += `\\n\n${bitshiftRight('int', 'int')}\n${bitshiftRight('ivec2', 'ivec2')}\n${bitshiftRight('ivec3', 'ivec3')}\n${bitshiftRight('ivec4', 'ivec4')}\n${bitshiftRight('ivec2', 'int')}\n${bitshiftRight('ivec3', 'int')}\n${bitshiftRight('ivec4', 'int')}\n#if (__VERSION__ == 300)\n${bitshiftRight('uint', 'uint')}\n${bitshiftRight('uvec2', 'uvec2')}\n${bitshiftRight('uvec3', 'uvec3')}\n${bitshiftRight('uvec4', 'uvec4')}\n${bitshiftRight('uvec2', 'uint')}\n${bitshiftRight('uvec3', 'uint')}\n${bitshiftRight('uvec4', 'uint')}\n#endif\n`;\n\t}\n\n\tif (shaderSource.includes('bitwiseOr')) {\n\t\tFRAGMENT_SHADER_POLYFILLS += `\\n\n${bitwiseOr(8)}\n${bitwiseOr(16)}\n${bitwiseOr(32)}\n#if (__VERSION__ == 300)\n${ [8, 16, ''].map(suffix => {\nreturn `\nuint bitwiseOr${suffix}(uint a, uint b) {\n\treturn uint(bitwiseOr${suffix}(int(a), int(b)));\n}`;\n}).join('\\n') }\n#endif\n`;\n\t}\n\n\tif (shaderSource.includes('bitwiseXOR')) {\n\t\tFRAGMENT_SHADER_POLYFILLS += `\\n\n${bitwiseXOR(8)}\n${bitwiseXOR(16)}\n${bitwiseXOR(32)}\n#if (__VERSION__ == 300)\n${ [8, 16, ''].map(suffix => {\nreturn `\nuint bitwiseXOR${suffix}(uint a, uint b) {\n\treturn uint(bitwiseXOR${suffix}(int(a), int(b)));\n}`;\n}).join('\\n') }\n#endif\n`;\n\t}\n\n\tif (shaderSource.includes('bitwiseAnd')) {\n\t\tFRAGMENT_SHADER_POLYFILLS += `\\n\n${bitwiseAnd(8)}\n${bitwiseAnd(16)}\n${bitwiseAnd(32)}\n#if (__VERSION__ == 300)\n${ [8, 16, ''].map(suffix => {\nreturn `\nuint bitwiseAnd${suffix}(uint a, uint b) {\n\treturn uint(bitwiseAnd${suffix}(int(a), int(b)));\n}`;\n}).join('\\n') }\n#endif\n`;\n\t}\n\n\tif (shaderSource.includes('bitwiseNot')) {\n\t\tFRAGMENT_SHADER_POLYFILLS += `\\n\n${bitwiseNot(8)}\n${bitwiseNot(16)}\n${bitwiseNot(32)}\n#if (__VERSION__ == 300)\n${ [8, 16, ''].map(suffix => {\nreturn `\nuint bitwiseNot${suffix}(uint a) {\n\treturn uint(bitwiseNot${suffix}(int(a)));\n}`;\n}).join('\\n') }\n#endif\n`;\n\t}\n\n\treturn FRAGMENT_SHADER_POLYFILLS;\n}\n","import {\n\tisArray,\n\tisBoolean,\n\tisFiniteNumber,\n\tisInteger,\n\tisNonNegativeInteger,\n\tisString,\n} from '@amandaghassaei/type-checks';\nimport {\n\tBOOL,\n\tBOOL_1D_UNIFORM,\n\tBOOL_2D_UNIFORM,\n\tBOOL_3D_UNIFORM,\n\tBOOL_4D_UNIFORM,\n\tBYTE,\n\tCompileTimeConstants,\n\tDEFAULT_ERROR_CALLBACK,\n\tErrorCallback,\n\tFLOAT,\n\tFLOAT_1D_UNIFORM,\n\tFLOAT_2D_UNIFORM,\n\tFLOAT_3D_UNIFORM,\n\tFLOAT_4D_UNIFORM,\n\tGLSL1,\n\tGLSL3,\n\tGLSLPrecision,\n\tGLSLVersion,\n\tGPUIO_FLOAT_PRECISION,\n\tGPUIO_INT_PRECISION,\n\tGPULayerState,\n\tGPULayerType,\n\tHALF_FLOAT,\n\tINT,\n\tINT_1D_UNIFORM,\n\tINT_2D_UNIFORM,\n\tINT_3D_UNIFORM,\n\tINT_4D_UNIFORM,\n\tPRECISION_HIGH_P,\n\tPRECISION_MEDIUM_P,\n\tSHORT,\n\tUINT,\n\tUINT_1D_UNIFORM,\n\tUINT_2D_UNIFORM,\n\tUINT_3D_UNIFORM,\n\tUINT_4D_UNIFORM,\n\tUniformType,\n\tUniformValue,\n\tUNSIGNED_BYTE,\n\tUNSIGNED_INT,\n\tUNSIGNED_SHORT,\n\tWEBGL1,\n\tWEBGL2,\n} from './constants';\nimport { intForPrecision } from './conversions';\nimport { PRECISION_SOURCE } from './glsl/common/precision';\nimport type { GPUComposer } from './GPUComposer';\nimport type { GPULayer } from './GPULayer';\nimport { fragmentShaderPolyfills, GLSL1Polyfills, texturePolyfill } from './polyfills';\nimport {\n\tcheckFragmentShaderForFragColor,\n\tglsl1FragmentIn,\n\tglsl1FragmentOut,\n\tglsl1Sampler2D,\n\tglsl1Texture,\n\tglsl1Uint,\n\tglsl1VertexIn,\n\tglsl1VertexOut,\n\thighpToMediump,\n\tstripComments,\n\tstripPrecision,\n\tstripVersion,\n} from './regex';\n\n/**\n * Memoize results of more complex WebGL tests (that require allocations/deallocations).\n * @private\n */\nconst results = {\n\tsupportsWebGL2: undefined as undefined | boolean,\n\tsupportsHighpVertex: undefined as  undefined | boolean,\n\tsupportsHighpFragment: undefined as undefined | boolean,\n\tmediumpVertexPrecision: undefined as undefined | typeof PRECISION_HIGH_P | typeof PRECISION_MEDIUM_P,\n\tmediumpFragmentPrecision: undefined as undefined | typeof PRECISION_HIGH_P | typeof PRECISION_MEDIUM_P,\n}\n\n/**\n * Test whether a GPULayer type is a float type.\n * @private\n */\nexport function isFloatType(type: GPULayerType) {\n\treturn type === FLOAT || type === HALF_FLOAT;\n}\n\n/**\n * Test whether a GPULayer type is an unsigned int type.\n * @private\n */\n export function isUnsignedIntType(type: GPULayerType) {\n\treturn type === UNSIGNED_BYTE || type === UNSIGNED_SHORT || type === UNSIGNED_INT;\n}\n\n/**\n * Test whether a GPULayer type is a signed int type.\n * @private\n */\n export function isSignedIntType(type: GPULayerType) {\n\treturn type === BYTE || type === SHORT || type === INT;\n}\n\n/**\n * Test whether a GPULayer type is a int type.\n * @private\n */\n export function isIntType(type: GPULayerType) {\n\treturn isUnsignedIntType(type) || isSignedIntType(type);\n}\n\n/**\n * Create a string to pass compile time constants into shader.\n * @private\n */\nfunction convertCompileTimeConstantsToString(compileTimeConstants: CompileTimeConstants) {\n\tlet CTCSource = '';\n\tconst keys = Object.keys(compileTimeConstants);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key = keys[i];\n\t\t// Check that define is passed in as a string.\n\t\tif (!isString(key) || !isString(compileTimeConstants[key])) {\n\t\t\tthrow new Error(`GPUProgram compile time constants must be passed in as key value pairs that are both strings, got key value pair of type [${typeof key} : ${typeof compileTimeConstants[key]}] for key ${key}.`)\n\t\t}\n\t\tCTCSource += `#define ${key} ${compileTimeConstants[key]}\\n`;\n\t}\n\treturn CTCSource;\n}\n\n/**\n * Create header string for fragment and vertex shaders.\n * Export this for testing purposes.\n * @private\n */\nexport function makeShaderHeader(\n\tglslVersion: GLSLVersion,\n\tintPrecision: GLSLPrecision,\n\tfloatPrecision: GLSLPrecision,\n\tcompileTimeConstants?: CompileTimeConstants,\n\textensions?: string,\n) {\n\tconst versionSource = glslVersion === GLSL3 ? `#version ${GLSL3}\\n` : '';\n\tconst compileTimeConstantsSource = compileTimeConstants ? convertCompileTimeConstantsToString(compileTimeConstants) : '';\n\tconst precisionConstantsSource = convertCompileTimeConstantsToString({\n\t\t[GPUIO_INT_PRECISION]: `${intForPrecision(intPrecision)}`,\n\t\t[GPUIO_FLOAT_PRECISION]: `${intForPrecision(floatPrecision)}`,\n\t});\n\treturn `${versionSource}${extensions ? extensions : ''}${compileTimeConstantsSource}${precisionConstantsSource}${PRECISION_SOURCE}`;\n}\n\n/**\n * Compile vertex or fragment shaders.\n * Fragment shaders may be compiled on the fly, so keep this efficient.\n * Copied from http://webglfundamentals.org/webgl/lessons/webgl-boilerplate.html\n * @private\n */\nexport function compileShader(\n\tgl: WebGLRenderingContext | WebGL2RenderingContext,\n\tglslVersion: GLSLVersion,\n\tintPrecision: GLSLPrecision,\n\tfloatPrecision: GLSLPrecision,\n\tshaderSource: string,\n\tshaderType: number,\n\tprogramName: string,\n\terrorCallback: ErrorCallback,\n\tcompileTimeConstants?: CompileTimeConstants,\n\textensions?: string,\n\tcheckCompileStatus = false,\n) {\n\t// Create the shader object\n\tconst shader = gl.createShader(shaderType);\n\tif (!shader) {\n\t\terrorCallback('Unable to init gl shader.');\n\t\treturn null;\n\t}\n\n\t// Set the shader source code.\n\tconst shaderHeader = makeShaderHeader(\n\t\tglslVersion,\n\t\tintPrecision,\n\t\tfloatPrecision,\n\t\tcompileTimeConstants,\n\t\textensions,\n\t);\n\tconst fullShaderSource = `${shaderHeader}${shaderSource}`;\n\tgl.shaderSource(shader, fullShaderSource);\n\n\t// Compile the shader\n\tgl.compileShader(shader);\n\n\tif (checkCompileStatus) {\n\t\t// Check if shaders compiled - do this only on the first compilation bc of:\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#dont_check_shader_compile_status_unless_linking_fails\n\t\tconst success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\t\tif (!success) {\n\t\t\t// Something went wrong during compilation - print shader source (with line number) and the error.\n\t\t\tconsole.log(fullShaderSource.split('\\n').map((line, i) => `${i}\\t${line}`).join('\\n'));\n\t\t\terrorCallback(`Could not compile ${shaderType === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex'} shader for program \"${programName}\": ${gl.getShaderInfoLog(shader)}.`);\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn shader;\n}\n\n/**\n * Init a WebGL program from vertex and fragment shaders.\n * GLPrograms may be inited on the fly, so keep this efficient.\n * @private\n */\nexport function initGLProgram(\n\tgl: WebGLRenderingContext | WebGL2RenderingContext,\n\tvertexShader: WebGLShader,\n\tfragmentShader: WebGLShader,\n\tname: string,\n\terrorCallback: ErrorCallback,\n) {\n\t// Create a program.\n\tconst program = gl.createProgram();\n\tif (!program) {\n\t\terrorCallback(`Unable to init GL program for GPUProgram \"${name}\", gl.createProgram() has failed.`);\n\t\treturn;\n\t}\n\t// Link the program.\n\tgl.attachShader(program, vertexShader);\n\tgl.attachShader(program, fragmentShader);\n\tgl.linkProgram(program);\n\t// Check if it linked.\n\tconst success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\tif (!success) {\n\t\t// Something went wrong with the link.\n\t\terrorCallback(`GPUProgram \"${name}\" failed to link: ${gl.getProgramInfoLog(program)}`);\n\t\treturn;\n\t}\n\treturn program;\n}\n\n/**\n * Returns whether a WebGL context is WebGL2.\n * This code is pulled from https://github.com/mrdoob/three.js/blob/master/src/renderers/webgl/WebGLCapabilities.js\n * @param gl - WebGL context to test.\n * @returns - true if WebGL2 context, else false.\n */\nexport function isWebGL2(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n\t// @ts-ignore\n\treturn (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) || (typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext);\n}\n\n/**\n * Returns whether WebGL2 is supported by the current browser.\n * @returns - true if WebGL2 is supported, else false.\n*/\nexport function isWebGL2Supported() {\n\tif (results.supportsWebGL2 === undefined) {\n\t\tconst gl = document.createElement('canvas').getContext(WEBGL2);\n\t\t// GL context and canvas will be garbage collected.\n\t\tresults.supportsWebGL2 = isWebGL2(gl!); // Will return false in case of gl = null.\n\t}\n\treturn results.supportsWebGL2;\n}\n\n/**\n * Checks if the framebuffer is ready to read.\n * @private\n */\nexport function readyToRead(gl: WebGLRenderingContext | WebGL2RenderingContext) {\n\treturn gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE;\n};\n\n/**\n * Detects whether highp is supported by this browser.\n * This is supposed to be relatively easy. You call gl.getShaderPrecisionFormat, you pass in the shader type,\n * VERTEX_SHADER or FRAGMENT_SHADER and you pass in one of LOW_FLOAT, MEDIUM_FLOAT, HIGH_FLOAT, LOW_INT, MEDIUM_INT, HIGH_INT,\n * and it returns the precision info.\n * Unfortunately Safari has a bug here which means checking this way will fail on iPhone, at least as of April 2020.\n * https://webglfundamentals.org/webgl/webgl-precision-lowp-mediump-highp.html\n * @private\n */\nfunction isHighpSupported(vsSource: string, fsSource: string) {\n\tconst gl = document.createElement('canvas').getContext(WEBGL1);\n\tif (!gl) {\n\t\tthrow new Error(`Unable to init webgl context.`);\n\t}\n\ttry {\n\t\tconst vs = compileShader(\n\t\t\tgl,\n\t\t\tGLSL1,\n\t\t\tPRECISION_HIGH_P,\n\t\t\tPRECISION_HIGH_P,\n\t\t\tvsSource,\n\t\t\tgl.VERTEX_SHADER,\n\t\t\t'highpFragmentTest',\n\t\t\tDEFAULT_ERROR_CALLBACK,\n\t\t)!;\n\t\tconst fs = compileShader(\n\t\t\tgl,\n\t\t\tGLSL1,\n\t\t\tPRECISION_HIGH_P,\n\t\t\tPRECISION_HIGH_P,\n\t\t\tfsSource,\n\t\t\tgl.FRAGMENT_SHADER,\n\t\t\t'highpFragmentTest',\n\t\t\tDEFAULT_ERROR_CALLBACK,\n\t\t)!;\n\t\tconst program = initGLProgram(gl, vs, fs, 'highpFragmentTest', DEFAULT_ERROR_CALLBACK)!;\n\t\t// Deallocate everything.\n\t\tgl.deleteProgram(program);\n\t\tgl.deleteShader(vs);\n\t\tgl.deleteShader(fs);\n\t\t// GL context and canvas will be garbage collected.\n\t} catch {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Detects whether highp precision is supported in vertex shaders in the current browser.\n * @returns - true is highp is supported in vertex shaders, else false.\n */\nexport function isHighpSupportedInVertexShader() {\n\tif (results.supportsHighpVertex === undefined) {\n\t\tconst vertexSupport = isHighpSupported(\n\t\t\t'void main() { highp float test = 0.524; gl_Position = vec4(test, test, 0, 1); }',\n\t\t\t'void main() { gl_FragColor = vec4(0); }',\n\t\t);\n\t\tresults.supportsHighpVertex = vertexSupport;\n\t}\n\treturn results.supportsHighpVertex;\n}\n\n/**\n * Detects whether highp precision is supported in fragment shaders in the current browser.\n * @returns - true is highp is supported in fragment shaders, else false.\n */\nexport function isHighpSupportedInFragmentShader() {\n\tif (results.supportsHighpFragment === undefined) {\n\t\tconst fragmentSupport = isHighpSupported(\n\t\t\t'void main() { gl_Position = vec4(0.5, 0.5, 0, 1); }',\n\t\t\t'void main() { highp float test = 1.35; gl_FragColor = vec4(test); }',\n\t\t);\n\t\tresults.supportsHighpFragment = fragmentSupport;\n\t}\n\treturn results.supportsHighpFragment;\n}\n\n/**\n * Helper function to perform a 1px math calculation in order to determine WebGL capabilities.\n * From https://webglfundamentals.org/\n * @private\n */\nfunction test1PxCalc(\n\tname: string,\n\tgl: WebGL2RenderingContext | WebGLRenderingContext,\n\tfs: WebGLShader,\n\tvs: WebGLShader,\n\taddUniforms: (program: WebGLProgram) => void,\n) {\n\tconst program = initGLProgram(gl, vs, fs, name, DEFAULT_ERROR_CALLBACK);\n\tif (!program) {\n\t\tthrow new Error(`Unable to init WebGLProgram.`);\n\t}\n\tconst positionLocation = gl.getAttribLocation(program, 'position');\n\n\t// create a buffer and setup an attribute\n\t// We wouldn't need this except for a bug in Safari.\n\t// See https://webglfundamentals.org/webgl/lessons/webgl-smallest-programs.html\n\t// and https://bugs.webkit.org/show_bug.cgi?id=197592\n\tconst buffer = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\tgl.bufferData(gl.ARRAY_BUFFER, 1, gl.STATIC_DRAW);\n\tgl.enableVertexAttribArray(positionLocation);\n\tgl.vertexAttribPointer(\n\t\tpositionLocation,\n\t\t1, // pull 1 value per vertex shader iteration from buffer\n\t\tgl.UNSIGNED_BYTE, // type of data in buffer,\n\t\tfalse, // don't normalize\n\t\t0, // bytes to advance per iteration (0 = compute from size and type)\n\t\t0, // offset into buffer\n\t);\n\n\tgl.viewport(0, 0, 1, 1);\n\tgl.useProgram(program);\n\n\taddUniforms(program);\n\t\n\tgl.drawArrays(\n\t\tgl.POINTS,\n\t\t0, // offset\n\t\t1, // number of vertices to process\n\t);\n\n\tconst pixel = new Uint8Array(4);\n\tgl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n\n\t// Deallocate everything.\n\tgl.disableVertexAttribArray(positionLocation);\n\tgl.deleteProgram(program);\n\tgl.deleteShader(vs);\n\tgl.deleteShader(fs);\n\tgl.deleteBuffer(buffer);\n\t// GL context and canvas will be garbage collected.\n\n\treturn pixel;\n}\n\n/**\n * Returns the actual precision of mediump inside vertex shader.\n * From https://webglfundamentals.org/webgl/lessons/webgl-precision-issues.html\n * @returns - Vertex shader mediump precision.\n */\nexport function getVertexShaderMediumpPrecision() {\n\tif (results.mediumpVertexPrecision === undefined) {\n\t\t// This entire program is only needed because of a bug in Safari.\n\t\t// Safari doesn't correctly report precision from getShaderPrecisionFormat\n\t\t// at least as of April 2020\n\t\t// see: https://bugs.webkit.org/show_bug.cgi?id=211013\n\n\t\t// Get A WebGL context\n\t\t/** @type {HTMLCanvasElement} */\n\t\tconst canvas = document.createElement(\"canvas\");\n\t\tconst gl = canvas.getContext(\"webgl\");\n\t\tif (!gl) {\n\t\t\tthrow new Error(`Unable to init webgl context.`);\n\t\t}\n\n\t\tconst vs = compileShader(gl, GLSL1, PRECISION_MEDIUM_P, PRECISION_MEDIUM_P, `\n\tattribute vec4 position;  // needed because of another bug in Safari\n\tuniform mediump vec3 v;\n\tvarying mediump vec4 v_result;\n\tvoid main() {\n\t\tgl_Position = position;\n\t\tgl_PointSize = 1.0;\n\t\tv_result = vec4(normalize(v) * 0.5 + 0.5, 1);\n\t}\n\t\t`, gl.VERTEX_SHADER, 'mediumpPrecisionVertexTest', DEFAULT_ERROR_CALLBACK);\n\t\tif (!vs) {\n\t\t\tthrow new Error(`Unable to init vertex shader.`);\n\t\t}\n\n\t\tconst fs = compileShader(gl, GLSL1, PRECISION_MEDIUM_P, PRECISION_MEDIUM_P, `\n\tvarying mediump vec4 v_result;\n\tvoid main() {\n\t\tgl_FragColor = v_result;\n\t}\n\t\t`, gl.FRAGMENT_SHADER, 'mediumpPrecisionVertexTest', DEFAULT_ERROR_CALLBACK);\n\t\tif (!fs) {\n\t\t\tthrow new Error(`Unable to init fragment shader.`);\n\t\t}\n\n\t\t// we're going to compute the normalize vector of\n\t\t// (sqrt(2^31-1), sqrt(2^31-1), sqrt(2^31-1))\n\t\t// which should be impossible on mediump\n\t\tconst value = 2 ** 31 - 1;\n\t\tconst input = Math.sqrt(value);\n\t\tconst expected = ((input / Math.sqrt(input * input * 3)) * 0.5 + 0.5) * 255 | 0;\n\n\t\tconst pixel = test1PxCalc(\n\t\t\t'mediumpPrecisionVertexTest',\n\t\t\tgl,\n\t\t\tfs,\n\t\t\tvs,\n\t\t\t(program: WebGLProgram) => {\n\t\t\t\tconst vLocation = gl.getUniformLocation(program, 'v');\n\t\t\t\tgl.uniform3f(vLocation, input, input, input);\n\t\t\t},\n\t\t);\n\n\t\tconst mediumpPrecision = Math.abs(pixel[0] - expected) > 16;\n\t\tresults.mediumpVertexPrecision = mediumpPrecision ? PRECISION_MEDIUM_P : PRECISION_HIGH_P;\n\t}\n\treturn results.mediumpVertexPrecision;\n}\n\n/**\n * Returns the actual precision of mediump inside fragment shader.\n * From https://webglfundamentals.org/webgl/lessons/webgl-precision-issues.html\n * @returns - Fragment shader supported mediump precision.\n */\nexport function getFragmentShaderMediumpPrecision() {\n\tif (results.mediumpFragmentPrecision === undefined) {\n\t\t// This entire program is only needed because of a bug in Safari.\n\t\t// Safari doesn't correctly report precision from getShaderPrecisionFormat\n\t\t// at least as of April 2020\n\t\t// see: https://bugs.webkit.org/show_bug.cgi?id=211013\n\n\t\t// Get A WebGL context\n\t\tconst canvas = document.createElement(\"canvas\");\n\t\tconst gl = canvas.getContext(\"webgl\");\n\t\tif (!gl) {\n\t\t\tthrow new Error(`Unable to init webgl context.`);\n\t\t}\n\n\t\tconst vs = compileShader(gl, GLSL1, PRECISION_MEDIUM_P, PRECISION_MEDIUM_P,`\n\tattribute vec4 position;  // needed because of another bug in Safari\n\tvoid main() {\n\t\tgl_Position = position;\n\t\tgl_PointSize = 1.0;\n\t}\n\t\t`, gl.VERTEX_SHADER, 'mediumpPrecisionFragmentTest', DEFAULT_ERROR_CALLBACK);\n\t\tif (!vs) {\n\t\t\tthrow new Error(`Unable to init vertex shader.`);\n\t\t}\n\n\t\tconst fs = compileShader(gl, GLSL1, PRECISION_MEDIUM_P, PRECISION_MEDIUM_P, `\n\tuniform mediump vec3 v;\n\tvoid main() {\n\t\tgl_FragColor = vec4(normalize(v) * 0.5 + 0.5, 1);\n\t}\n\t\t`, gl.FRAGMENT_SHADER, 'mediumpPrecisionFragmentTest', DEFAULT_ERROR_CALLBACK);\n\t\tif (!fs) {\n\t\t\tthrow new Error(`Unable to init fragment shader.`);\n\t\t}\n\n\t\t// we're going to compute the normalize vector of\n\t\t// (sqrt(2^31-1), sqrt(2^31-1), sqrt(2^31-1))\n\t\t// which should be impossible on mediump\n\t\tconst value = 2 ** 31 - 1;\n\t\tconst input = Math.sqrt(value);\n\t\tconst expected = ((input / Math.sqrt(input * input * 3)) * 0.5 + 0.5) * 255 | 0;\n\n\t\tconst pixel = test1PxCalc(\n\t\t\t'mediumpPrecisionFragmentTest',\n\t\t\tgl,\n\t\t\tfs,\n\t\t\tvs,\n\t\t\t(program: WebGLProgram) => {\n\t\t\t\tconst vLocation = gl.getUniformLocation(program, 'v');\n\t\t\t\tgl.uniform3f(vLocation, input, input, input);\n\t\t\t},\n\t\t);\n\n\t\tconst mediumpPrecision = Math.abs(pixel[0] - expected) > 16;\n\t\tresults.mediumpFragmentPrecision =  mediumpPrecision ? PRECISION_MEDIUM_P : PRECISION_HIGH_P;\n\t}\n\treturn results.mediumpFragmentPrecision;\n}\n\n/**\n * Returns whether a number is a power of 2.\n * @private\n */\nexport function isPowerOf2(value: number) {\n\t// Use bitwise operation to evaluate this.\n\treturn value > 0 && (value & (value - 1)) == 0;\n}\n\n/**\n * Returns a Float32 array with sequential values [0, 1, 2, 3...].\n * @private\n */\nexport function initSequentialFloatArray(length: number) {\n\tconst array = new Float32Array(length);\n\tfor (let i = 0; i < length; i++) {\n\t\tarray[i] = i;\n\t}\n\treturn array;\n}\n\n/**\n * Strip out any unnecessary elements in shader source, e.g. #version and precision declarations.\n * This is called once on initialization, so doesn't need to be extremely efficient.\n * @private\n */\nfunction preprocessShader(shaderSource: string) {\n\t// Strip out any version numbers.\n\tshaderSource = stripVersion(shaderSource);\n\t// Strip out any precision declarations.\n\tshaderSource = stripPrecision(shaderSource);\n\t// Strip out comments.\n\tshaderSource = stripComments(shaderSource);\n\treturn shaderSource;\n}\n\n/**\n * Common code for converting vertex/fragment shader source to GLSL1.\n * This is called once on initialization, so doesn't need to be extremely efficient.\n * @private\n */\nfunction convertShaderToGLSL1(shaderSource: string) {\n\t// No isampler2D or usampler2D.\n\tshaderSource = glsl1Sampler2D(shaderSource);\n\t// Unsigned int types are not supported, use int types instead.\n\tshaderSource = glsl1Uint(shaderSource);\n\t// Convert texture to texture2D.\n\tshaderSource = glsl1Texture(shaderSource);\n\treturn shaderSource;\n}\n\n/**\n * Convert vertex shader source to GLSL1.\n * This is called once on initialization, so doesn't need to be extremely efficient.\n * @private\n */\nfunction convertVertexShaderToGLSL1(shaderSource: string) {\n\tshaderSource = convertShaderToGLSL1(shaderSource);\n\t// Convert in to attribute.\n\tshaderSource = glsl1VertexIn(shaderSource);\n\t// Convert out to varying.\n\tshaderSource = glsl1VertexOut(shaderSource);\n\treturn shaderSource;\n}\n\n/**\n * Convert fragment shader source to GLSL1.\n * This is called once on initialization, so doesn't need to be extremely efficient.\n * @private\n */\nexport function convertFragmentShaderToGLSL1(shaderSource: string, name: string) {\n\tshaderSource = convertShaderToGLSL1(shaderSource);\n\t// Convert in to varying.\n\tshaderSource = glsl1FragmentIn(shaderSource);\n\t// Convert out to gl_FragColor.\n\treturn glsl1FragmentOut(shaderSource, name);\n}\n\n/**\n * Preprocess vertex shader for glslVersion and browser capabilities.\n * This is called once on initialization, so doesn't need to be extremely efficient.\n * @private\n */\nexport function preprocessVertexShader(shaderSource: string, glslVersion: GLSLVersion) {\n\tshaderSource = preprocessShader(shaderSource);\n\t// Check if highp supported in vertex shaders.\n\tif (!isHighpSupportedInVertexShader()) {\n\t\tconsole.warn('highp not supported in vertex shader in this browser, falling back to mediump.');\n\t\t// Replace all highp with mediump.\n\t\tshaderSource = highpToMediump(shaderSource);\n\t}\n\tif (glslVersion === GLSL3) {\n\t\treturn shaderSource;\n\t}\n\treturn convertVertexShaderToGLSL1(shaderSource);\n}\n\n\n\n/**\n * Preprocess fragment shader for glslVersion and browser capabilities.\n * This is called once on initialization of GPUProgram, so doesn't need to be extremely efficient.\n * @private\n */\nexport function preprocessFragmentShader(shaderSource: string, glslVersion: GLSLVersion, name: string) {\n\tshaderSource = preprocessShader(shaderSource);\n\tcheckFragmentShaderForFragColor(shaderSource, glslVersion, name);\n\t// Check if highp supported in fragment shaders.\n\tif (!isHighpSupportedInFragmentShader()) {\n\t\tconsole.warn('highp not supported in fragment shader in this browser, falling back to mediump.');\n\t\t// Replace all highp with mediump.\n\t\tshaderSource = highpToMediump(shaderSource);\n\t}\n\t// Add function/operator polyfills.\n\tshaderSource = fragmentShaderPolyfills(shaderSource, glslVersion) + shaderSource;\n\t// Add texture() polyfills.\n\tlet samplerUniforms: string[];\n\t({ shaderSource, samplerUniforms } = texturePolyfill(shaderSource));\n\tif (glslVersion !== GLSL3) {\n\t\tconst sources = convertFragmentShaderToGLSL1(shaderSource, name);\n\t\t// If this shader has multiple outputs, it is split into multiple sources.\n\t\tfor (let i = 0, numSources = sources.length; i < numSources; i++) {\n\t\t\t// Add glsl1 specific polyfills.\n\t\t\tsources[i] = GLSL1Polyfills(sources[i]) + sources[i];\n\t\t}\n\t\tshaderSource = sources.shift()!;\n\t\tif (sources.length) {\n\t\t\treturn { shaderSource, samplerUniforms, additionalSources: sources };\n\t\t}\n\t}\n\treturn { shaderSource, samplerUniforms };\n}\n\n/**\n * Check uniforms and return internal WebGL type (e.g. [1234][u]?[if])\n * @private\n */\nexport function uniformInternalTypeForValue(\n\tvalue: UniformValue,\n\ttype: UniformType,\n\tuniformName: string,\n\tprogramName: string,\n) {\n\tif (type === FLOAT) {\n\t\t// Check that we are dealing with a number.\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0; i < (value as number[]).length; i++) {\n\t\t\t\tif (!isFiniteNumber((value as number[])[i])) {\n\t\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected float or float[] of length 1-4.`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isFiniteNumber(value)) {\n\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected float or float[] of length 1-4.`);\n\t\t\t}\n\t\t}\n\t\tif (!isArray(value) || (value as number[]).length === 1) {\n\t\t\treturn FLOAT_1D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 2) {\n\t\t\treturn FLOAT_2D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 3) {\n\t\t\treturn FLOAT_3D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 4) {\n\t\t\treturn FLOAT_4D_UNIFORM;\n\t\t}\n\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected float or float[] of length 1-4.`);\n\t} else if (type === INT) {\n\t\t// Check that we are dealing with an int.\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0; i < (value as number[]).length; i++) {\n\t\t\t\tif (!isInteger((value as number[])[i])) {\n\t\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected int or int[] of length 1-4.`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isInteger(value)) {\n\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected int or int[] of length 1-4.`);\n\t\t\t}\n\t\t}\n\t\tif (!isArray(value) || (value as number[]).length === 1) {\n\t\t\treturn INT_1D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 2) {\n\t\t\treturn INT_2D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 3) {\n\t\t\treturn INT_3D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 4) {\n\t\t\treturn INT_4D_UNIFORM;\n\t\t}\n\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected int or int[] of length 1-4.`);\n\t} else if (type === UINT) {\n\t\t// Check that we are dealing with a uint.\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0; i < (value as number[]).length; i++) {\n\t\t\t\tif (!isNonNegativeInteger((value as number[])[i])) {\n\t\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected uint or uint[] of length 1-4.`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isNonNegativeInteger(value)) {\n\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected uint or uint[] of length 1-4.`);\n\t\t\t}\n\t\t}\n\t\tif (!isArray(value) || (value as number[]).length === 1) {\n\t\t\treturn UINT_1D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 2) {\n\t\t\treturn UINT_2D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 3) {\n\t\t\treturn UINT_3D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 4) {\n\t\t\treturn UINT_4D_UNIFORM;\n\t\t}\n\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected uint or uint[] of length 1-4.`);\n\t} else if (type === BOOL) {\n\t\t// Check that we are dealing with a boolean.\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0; i < (value as boolean[]).length; i++) {\n\t\t\t\tif (!isBoolean((value as boolean[])[i])) {\n\t\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected bool or bool[] of length 1-4.`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isBoolean(value)) {\n\t\t\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected bool or bool[] of length 1-4.`);\n\t\t\t}\n\t\t}\n\t\tif (!isArray(value) || (value as number[]).length === 1) {\n\t\t\treturn BOOL_1D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 2) {\n\t\t\treturn BOOL_2D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 3) {\n\t\t\treturn BOOL_3D_UNIFORM;\n\t\t}\n\t\tif ((value as number[]).length === 4) {\n\t\t\treturn BOOL_4D_UNIFORM;\n\t\t}\n\t\tthrow new Error(`Invalid value ${JSON.stringify(value)} for uniform \"${uniformName}\" in program \"${programName}\", expected boolean.`);\n\t} else {\n\t\tthrow new Error(`Invalid type \"${type}\" for uniform \"${uniformName}\" in program \"${programName}\", expected ${FLOAT} or ${INT} or ${BOOL}.`);\n\t}\n}\n\n/**\n * Get index of GPULayer in array of inputs.\n * Used by GPUComposer.\n * @private\n */\nexport function indexOfLayerInArray(layer: GPULayer, array: (GPULayer | GPULayerState)[]) {\n\treturn array.findIndex(item => item === layer || (item as GPULayerState).layer === layer);\n}\n\nfunction clientWaitAsync(\n\tgl: WebGL2RenderingContext,\n\tsync: WebGLSync,\n\tflags: number,\n\tinterval_ms: number,\n) {\n\treturn new Promise<void>((resolve, reject) => {\n\t  function test() {\n\t\tconst res = gl.clientWaitSync(sync, flags, 0);\n\t\tif (res === gl.WAIT_FAILED) {\n\t\t  reject();\n\t\t  return;\n\t\t}\n\t\tif (res === gl.TIMEOUT_EXPIRED) {\n\t\t  setTimeout(test, interval_ms);\n\t\t  return;\n\t\t}\n\t\tresolve();\n\t  }\n\t  test();\n\t});\n  }\n  \n async function getBufferSubDataAsync(\n\tgl: WebGL2RenderingContext,\n\ttarget: number,\n\tbuffer: WebGLBuffer,\n\tsrcByteOffset: number,\n\tdstBuffer: ArrayBufferView,\n) {\n\tconst sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0)!;\n\tgl.flush();\n  \n\tawait clientWaitAsync(gl, sync, 0, 10);\n\tgl.deleteSync(sync);\n  \n\tgl.bindBuffer(target, buffer);\n\tgl.getBufferSubData(target, srcByteOffset, dstBuffer);\n\tgl.bindBuffer(target, null);\n}\n\n/**\n * Non-blocking version of gl.readPixels for WebGL2 only.\n * https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#use_non-blocking_async_data_readback\n * @param gl - WebGL2 Rendering Context\n * @param x - The first horizontal pixel that is read from the lower left corner of a rectangular block of pixels.\n * @param y - The first vertical pixel that is read from the lower left corner of a rectangular block of pixels.\n * @param w - The width of the rectangle.\n * @param h - The height of the rectangle.\n * @param format - The GLenum format of the pixel data.\n * @param type - The GLenum data type of the pixel data.\n * @param dstBuffer - An object to read data into. The array type must match the type of the type parameter.\n * @returns \n */\nexport async function readPixelsAsync(\n\tgl: WebGL2RenderingContext,\n\tx: number, y: number,\n\tw: number, h: number,\n\tformat: number,\n\ttype: number,\n\tdstBuffer: ArrayBufferView,\n) {\n\tconst buf = gl.createBuffer()!;\n\tgl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n\tgl.bufferData(gl.PIXEL_PACK_BUFFER, dstBuffer.byteLength, gl.STREAM_READ);\n\tgl.readPixels(x, y, w, h, format, type, 0);\n\tgl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n  \n\tawait getBufferSubDataAsync(gl, gl.PIXEL_PACK_BUFFER, buf, 0, dstBuffer);\n  \n\tgl.deleteBuffer(buf);\n\treturn dstBuffer;\n  }","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.changeDpiBlob = changeDpiBlob;\nexports.changeDpiDataUrl = changeDpiDataUrl;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction createPngDataTable() {\n  /* Table of CRCs of all 8-bit messages. */\n  var crcTable = new Int32Array(256);\n  for (var n = 0; n < 256; n++) {\n    var c = n;\n    for (var k = 0; k < 8; k++) {\n      c = c & 1 ? 0xedb88320 ^ c >>> 1 : c >>> 1;\n    }\n    crcTable[n] = c;\n  }\n  return crcTable;\n}\n\nfunction calcCrc(buf) {\n  var c = -1;\n  if (!pngDataTable) pngDataTable = createPngDataTable();\n  for (var n = 0; n < buf.length; n++) {\n    c = pngDataTable[(c ^ buf[n]) & 0xFF] ^ c >>> 8;\n  }\n  return c ^ -1;\n}\n\nvar pngDataTable = void 0;\n\nvar PNG = 'image/png';\nvar JPEG = 'image/jpeg';\n\n// those are 3 possible signature of the physBlock in base64.\n// the pHYs signature block is preceed by the 4 bytes of lenght. The length of\n// the block is always 9 bytes. So a phys block has always this signature:\n// 0 0 0 9 p H Y s.\n// However the data64 encoding aligns we will always find one of those 3 strings.\n// this allow us to find this particular occurence of the pHYs block without\n// converting from b64 back to string\nvar b64PhysSignature1 = 'AAlwSFlz';\nvar b64PhysSignature2 = 'AAAJcEhZ';\nvar b64PhysSignature3 = 'AAAACXBI';\n\nvar _P = 'p'.charCodeAt(0);\nvar _H = 'H'.charCodeAt(0);\nvar _Y = 'Y'.charCodeAt(0);\nvar _S = 's'.charCodeAt(0);\n\nfunction changeDpiBlob(blob, dpi) {\n  // 33 bytes are ok for pngs and jpegs\n  // to contain the information.\n  var headerChunk = blob.slice(0, 33);\n  return new Promise(function (resolve, reject) {\n    var fileReader = new FileReader();\n    fileReader.onload = function () {\n      var dataArray = new Uint8Array(fileReader.result);\n      var tail = blob.slice(33);\n      var changedArray = changeDpiOnArray(dataArray, dpi, blob.type);\n      resolve(new Blob([changedArray, tail], { type: blob.type }));\n    };\n    fileReader.readAsArrayBuffer(headerChunk);\n  });\n}\n\nfunction changeDpiDataUrl(base64Image, dpi) {\n  var dataSplitted = base64Image.split(',');\n  var format = dataSplitted[0];\n  var body = dataSplitted[1];\n  var type = void 0;\n  var headerLength = void 0;\n  var overwritepHYs = false;\n  if (format.indexOf(PNG) !== -1) {\n    type = PNG;\n    var b64Index = detectPhysChunkFromDataUrl(body);\n    // 28 bytes in dataUrl are 21bytes, length of phys chunk with everything inside.\n    if (b64Index >= 0) {\n      headerLength = Math.ceil((b64Index + 28) / 3) * 4;\n      overwritepHYs = true;\n    } else {\n      headerLength = 33 / 3 * 4;\n    }\n  }\n  if (format.indexOf(JPEG) !== -1) {\n    type = JPEG;\n    headerLength = 18 / 3 * 4;\n  }\n  // 33 bytes are ok for pngs and jpegs\n  // to contain the information.\n  var stringHeader = body.substring(0, headerLength);\n  var restOfData = body.substring(headerLength);\n  var headerBytes = atob(stringHeader);\n  var dataArray = new Uint8Array(headerBytes.length);\n  for (var i = 0; i < dataArray.length; i++) {\n    dataArray[i] = headerBytes.charCodeAt(i);\n  }\n  var finalArray = changeDpiOnArray(dataArray, dpi, type, overwritepHYs);\n  var base64Header = btoa(String.fromCharCode.apply(String, _toConsumableArray(finalArray)));\n  return [format, ',', base64Header, restOfData].join('');\n}\n\nfunction detectPhysChunkFromDataUrl(data) {\n  var b64index = data.indexOf(b64PhysSignature1);\n  if (b64index === -1) {\n    b64index = data.indexOf(b64PhysSignature2);\n  }\n  if (b64index === -1) {\n    b64index = data.indexOf(b64PhysSignature3);\n  }\n  // if b64index === -1 chunk is not found\n  return b64index;\n}\n\nfunction searchStartOfPhys(data) {\n  var length = data.length - 1;\n  // we check from the end since we cut the string in proximity of the header\n  // the header is within 21 bytes from the end.\n  for (var i = length; i >= 4; i--) {\n    if (data[i - 4] === 9 && data[i - 3] === _P && data[i - 2] === _H && data[i - 1] === _Y && data[i] === _S) {\n      return i - 3;\n    }\n  }\n}\n\nfunction changeDpiOnArray(dataArray, dpi, format, overwritepHYs) {\n  if (format === JPEG) {\n    dataArray[13] = 1; // 1 pixel per inch or 2 pixel per cm\n    dataArray[14] = dpi >> 8; // dpiX high byte\n    dataArray[15] = dpi & 0xff; // dpiX low byte\n    dataArray[16] = dpi >> 8; // dpiY high byte\n    dataArray[17] = dpi & 0xff; // dpiY low byte\n    return dataArray;\n  }\n  if (format === PNG) {\n    var physChunk = new Uint8Array(13);\n    // chunk header pHYs\n    // 9 bytes of data\n    // 4 bytes of crc\n    // this multiplication is because the standard is dpi per meter.\n    dpi *= 39.3701;\n    physChunk[0] = _P;\n    physChunk[1] = _H;\n    physChunk[2] = _Y;\n    physChunk[3] = _S;\n    physChunk[4] = dpi >>> 24; // dpiX highest byte\n    physChunk[5] = dpi >>> 16; // dpiX veryhigh byte\n    physChunk[6] = dpi >>> 8; // dpiX high byte\n    physChunk[7] = dpi & 0xff; // dpiX low byte\n    physChunk[8] = physChunk[4]; // dpiY highest byte\n    physChunk[9] = physChunk[5]; // dpiY veryhigh byte\n    physChunk[10] = physChunk[6]; // dpiY high byte\n    physChunk[11] = physChunk[7]; // dpiY low byte\n    physChunk[12] = 1; // dot per meter....\n\n    var crc = calcCrc(physChunk);\n\n    var crcChunk = new Uint8Array(4);\n    crcChunk[0] = crc >>> 24;\n    crcChunk[1] = crc >>> 16;\n    crcChunk[2] = crc >>> 8;\n    crcChunk[3] = crc & 0xff;\n\n    if (overwritepHYs) {\n      var startingIndex = searchStartOfPhys(dataArray);\n      dataArray.set(physChunk, startingIndex);\n      dataArray.set(crcChunk, startingIndex + 13);\n      return dataArray;\n    } else {\n      // i need to give back an array of data that is divisible by 3 so that\n      // dataurl encoding gives me integers, for luck this chunk is 17 + 4 = 21\n      // if it was we could add a text chunk contaning some info, untill desired\n      // length is met.\n\n      // chunk structur 4 bytes for length is 9\n      var chunkLength = new Uint8Array(4);\n      chunkLength[0] = 0;\n      chunkLength[1] = 0;\n      chunkLength[2] = 0;\n      chunkLength[3] = 9;\n\n      var finalHeader = new Uint8Array(54);\n      finalHeader.set(dataArray, 0);\n      finalHeader.set(chunkLength, 33);\n      finalHeader.set(physChunk, 37);\n      finalHeader.set(crcChunk, 50);\n      return finalHeader;\n    }\n  }\n}","export const THIS_IS_NOT_AN_OBJECT = \"This is not an object\";\nexport const THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT = \"This is not a Float16Array object\";\nexport const THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY =\n  \"This constructor is not a subclass of Float16Array\";\nexport const THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT =\n  \"The constructor property value is not an object\";\nexport const SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT =\n  \"Species constructor didn't return TypedArray object\";\nexport const DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH =\n  \"Derived constructor created TypedArray object which was too small length\";\nexport const ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER =\n  \"Attempting to access detached ArrayBuffer\";\nexport const CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT =\n  \"Cannot convert undefined or null to object\";\nexport const CANNOT_MIX_BIGINT_AND_OTHER_TYPES =\n  \"Cannot mix BigInt and other types, use explicit conversions\";\nexport const ITERATOR_PROPERTY_IS_NOT_CALLABLE = \"@@iterator property is not callable\";\nexport const REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE =\n  \"Reduce of empty array with no initial value\";\nexport const OFFSET_IS_OUT_OF_BOUNDS = \"Offset is out of bounds\";\n","/* eslint-disable no-restricted-globals, no-restricted-syntax */\n/* global SharedArrayBuffer */\n\nimport { CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT } from \"./messages.mjs\";\n\n/** @type {<T extends (...args: any) => any>(target: T) => (thisArg: ThisType<T>, ...args: any[]) => any} */\nfunction uncurryThis(target) {\n  return (thisArg, ...args) => {\n    return ReflectApply(target, thisArg, args);\n  };\n}\n\n/** @type {(target: any, key: string | symbol) => (thisArg: any, ...args: any[]) => any} */\nfunction uncurryThisGetter(target, key) {\n  return uncurryThis(\n    ReflectGetOwnPropertyDescriptor(\n      target,\n      key\n    ).get\n  );\n}\n\n// Reflect\nexport const {\n  apply: ReflectApply,\n  construct: ReflectConstruct,\n  defineProperty: ReflectDefineProperty,\n  get: ReflectGet,\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor,\n  getPrototypeOf: ReflectGetPrototypeOf,\n  has: ReflectHas,\n  ownKeys: ReflectOwnKeys,\n  set: ReflectSet,\n  setPrototypeOf: ReflectSetPrototypeOf,\n} = Reflect;\n\n// Proxy\nexport const NativeProxy = Proxy;\n\n// Number\nexport const {\n  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,\n  isFinite: NumberIsFinite,\n  isNaN: NumberIsNaN,\n} = Number;\n\n// Symbol\nexport const {\n  iterator: SymbolIterator,\n  species: SymbolSpecies,\n  toStringTag: SymbolToStringTag,\n  for: SymbolFor,\n} = Symbol;\n\n// Object\nexport const NativeObject = Object;\nexport const {\n  create: ObjectCreate,\n  defineProperty: ObjectDefineProperty,\n  freeze: ObjectFreeze,\n  is: ObjectIs,\n} = NativeObject;\nconst ObjectPrototype = NativeObject.prototype;\n/** @type {(object: object, key: PropertyKey) => Function | undefined} */\nexport const ObjectPrototype__lookupGetter__ = /** @type {any} */ (ObjectPrototype).__lookupGetter__\n  ? uncurryThis(/** @type {any} */ (ObjectPrototype).__lookupGetter__)\n  : (object, key) => {\n    if (object == null) {\n      throw NativeTypeError(\n        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n      );\n    }\n\n    let target = NativeObject(object);\n    do {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      if (descriptor !== undefined) {\n        if (ObjectHasOwn(descriptor, \"get\")) {\n          return descriptor.get;\n        }\n\n        return;\n      }\n    } while ((target = ReflectGetPrototypeOf(target)) !== null);\n  };\n/** @type {(object: object, key: PropertyKey) => boolean} */\nexport const ObjectHasOwn = /** @type {any} */ (NativeObject).hasOwn ||\n  uncurryThis(ObjectPrototype.hasOwnProperty);\n\n// Array\nconst NativeArray = Array;\nexport const ArrayIsArray = NativeArray.isArray;\nconst ArrayPrototype = NativeArray.prototype;\n/** @type {(array: ArrayLike<unknown>, separator?: string) => string} */\nexport const ArrayPrototypeJoin = uncurryThis(ArrayPrototype.join);\n/** @type {<T>(array: T[], ...items: T[]) => number} */\nexport const ArrayPrototypePush = uncurryThis(ArrayPrototype.push);\n/** @type {(array: ArrayLike<unknown>, ...opts: any[]) => string} */\nexport const ArrayPrototypeToLocaleString = uncurryThis(\n  ArrayPrototype.toLocaleString\n);\nexport const NativeArrayPrototypeSymbolIterator = ArrayPrototype[SymbolIterator];\n/** @type {<T>(array: T[]) => IterableIterator<T>} */\nexport const ArrayPrototypeSymbolIterator = uncurryThis(NativeArrayPrototypeSymbolIterator);\n\n// Math\nexport const MathTrunc = Math.trunc;\n\n// ArrayBuffer\nexport const NativeArrayBuffer = ArrayBuffer;\nexport const ArrayBufferIsView = NativeArrayBuffer.isView;\nconst ArrayBufferPrototype = NativeArrayBuffer.prototype;\n/** @type {(buffer: ArrayBuffer, begin?: number, end?: number) => number} */\nexport const ArrayBufferPrototypeSlice = uncurryThis(ArrayBufferPrototype.slice);\n/** @type {(buffer: ArrayBuffer) => ArrayBuffer} */\nexport const ArrayBufferPrototypeGetByteLength = uncurryThisGetter(ArrayBufferPrototype, \"byteLength\");\n\n// SharedArrayBuffer\nexport const NativeSharedArrayBuffer = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : null;\n/** @type {(buffer: SharedArrayBuffer) => SharedArrayBuffer} */\nexport const SharedArrayBufferPrototypeGetByteLength = NativeSharedArrayBuffer\n  && uncurryThisGetter(NativeSharedArrayBuffer.prototype, \"byteLength\");\n\n// TypedArray\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n/** @type {any} */\nexport const TypedArray = ReflectGetPrototypeOf(Uint8Array);\nconst TypedArrayFrom = TypedArray.from;\nexport const TypedArrayPrototype = TypedArray.prototype;\nexport const NativeTypedArrayPrototypeSymbolIterator = TypedArrayPrototype[SymbolIterator];\n/** @type {(typedArray: TypedArray) => IterableIterator<number>} */\nexport const TypedArrayPrototypeKeys = uncurryThis(TypedArrayPrototype.keys);\n/** @type {(typedArray: TypedArray) => IterableIterator<number>} */\nexport const TypedArrayPrototypeValues = uncurryThis(\n  TypedArrayPrototype.values\n);\n/** @type {(typedArray: TypedArray) => IterableIterator<[number, number]>} */\nexport const TypedArrayPrototypeEntries = uncurryThis(\n  TypedArrayPrototype.entries\n);\n/** @type {(typedArray: TypedArray, array: ArrayLike<number>, offset?: number) => void} */\nexport const TypedArrayPrototypeSet = uncurryThis(TypedArrayPrototype.set);\n/** @type {<T extends TypedArray>(typedArray: T) => T} */\nexport const TypedArrayPrototypeReverse = uncurryThis(\n  TypedArrayPrototype.reverse\n);\n/** @type {<T extends TypedArray>(typedArray: T, value: number, start?: number, end?: number) => T} */\nexport const TypedArrayPrototypeFill = uncurryThis(TypedArrayPrototype.fill);\n/** @type {<T extends TypedArray>(typedArray: T, target: number, start: number, end?: number) => T} */\nexport const TypedArrayPrototypeCopyWithin = uncurryThis(\n  TypedArrayPrototype.copyWithin\n);\n/** @type {<T extends TypedArray>(typedArray: T, compareFn?: (a: number, b: number) => number) => T} */\nexport const TypedArrayPrototypeSort = uncurryThis(TypedArrayPrototype.sort);\n/** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */\nexport const TypedArrayPrototypeSlice = uncurryThis(TypedArrayPrototype.slice);\n/** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */\nexport const TypedArrayPrototypeSubarray = uncurryThis(\n  TypedArrayPrototype.subarray\n);\n/** @type {((typedArray: TypedArray) => ArrayBuffer)} */\nexport const TypedArrayPrototypeGetBuffer = uncurryThisGetter(\n  TypedArrayPrototype,\n  \"buffer\"\n);\n/** @type {((typedArray: TypedArray) => number)} */\nexport const TypedArrayPrototypeGetByteOffset = uncurryThisGetter(\n  TypedArrayPrototype,\n  \"byteOffset\"\n);\n/** @type {((typedArray: TypedArray) => number)} */\nexport const TypedArrayPrototypeGetLength = uncurryThisGetter(\n  TypedArrayPrototype,\n  \"length\"\n);\n/** @type {(target: unknown) => string} */\nexport const TypedArrayPrototypeGetSymbolToStringTag = uncurryThisGetter(\n  TypedArrayPrototype,\n  SymbolToStringTag\n);\n\n// Uint16Array\nexport const NativeUint16Array = Uint16Array;\n/** @type {Uint16ArrayConstructor[\"from\"]} */\nexport const Uint16ArrayFrom = (...args) => {\n  return ReflectApply(TypedArrayFrom, NativeUint16Array, args);\n};\n\n// Uint32Array\nexport const NativeUint32Array = Uint32Array;\n\n// Float32Array\nexport const NativeFloat32Array = Float32Array;\n\n// ArrayIterator\n/** @type {any} */\nexport const ArrayIteratorPrototype = ReflectGetPrototypeOf([][SymbolIterator]());\n/** @type {<T>(arrayIterator: IterableIterator<T>) => IteratorResult<T>} */\nexport const ArrayIteratorPrototypeNext = uncurryThis(ArrayIteratorPrototype.next);\n\n// Generator\n/** @type {<T = unknown, TReturn = any, TNext = unknown>(generator: Generator<T, TReturn, TNext>, value?: TNext) => T} */\nexport const GeneratorPrototypeNext = uncurryThis((function* () {})().next);\n\n// Iterator\nexport const IteratorPrototype = ReflectGetPrototypeOf(ArrayIteratorPrototype);\n\n// DataView\nconst DataViewPrototype = DataView.prototype;\n/** @type {(dataView: DataView, byteOffset: number, littleEndian?: boolean) => number} */\nexport const DataViewPrototypeGetUint16 = uncurryThis(\n  DataViewPrototype.getUint16\n);\n/** @type {(dataView: DataView, byteOffset: number, value: number, littleEndian?: boolean) => void} */\nexport const DataViewPrototypeSetUint16 = uncurryThis(\n  DataViewPrototype.setUint16\n);\n\n// Error\nexport const NativeTypeError = TypeError;\nexport const NativeRangeError = RangeError;\n\n// WeakSet\n/**\n * Do not construct with arguments to avoid calling the \"add\" method\n *\n * @type {{new <T extends {}>(): WeakSet<T>}}\n */\nexport const NativeWeakSet = WeakSet;\nconst WeakSetPrototype = NativeWeakSet.prototype;\n/** @type {<T extends {}>(set: WeakSet<T>, value: T) => Set<T>} */\nexport const WeakSetPrototypeAdd = uncurryThis(WeakSetPrototype.add);\n/** @type {<T extends {}>(set: WeakSet<T>, value: T) => boolean} */\nexport const WeakSetPrototypeHas = uncurryThis(WeakSetPrototype.has);\n\n// WeakMap\n/**\n * Do not construct with arguments to avoid calling the \"set\" method\n *\n * @type {{new <K extends {}, V>(): WeakMap<K, V>}}\n */\nexport const NativeWeakMap = WeakMap;\nconst WeakMapPrototype = NativeWeakMap.prototype;\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => V} */\nexport const WeakMapPrototypeGet = uncurryThis(WeakMapPrototype.get);\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => boolean} */\nexport const WeakMapPrototypeHas = uncurryThis(WeakMapPrototype.has);\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K, value: V) => WeakMap} */\nexport const WeakMapPrototypeSet = uncurryThis(WeakMapPrototype.set);\n","import {\n  ArrayIteratorPrototype,\n  ArrayIteratorPrototypeNext,\n  ArrayPrototypeSymbolIterator,\n  GeneratorPrototypeNext,\n  IteratorPrototype,\n  NativeArrayPrototypeSymbolIterator,\n  NativeWeakMap,\n  ObjectCreate,\n  ObjectDefineProperty,\n  ReflectGetOwnPropertyDescriptor,\n  ReflectOwnKeys,\n  SymbolIterator,\n  WeakMapPrototypeGet,\n  WeakMapPrototypeSet,\n} from \"./primordials.mjs\";\n\n/** @type {WeakMap<{}, IterableIterator<any>>} */\nconst arrayIterators = new NativeWeakMap();\n\nconst SafeIteratorPrototype = ObjectCreate(null, {\n  next: {\n    value: function next() {\n      const arrayIterator = WeakMapPrototypeGet(arrayIterators, this);\n      return ArrayIteratorPrototypeNext(arrayIterator);\n    },\n  },\n\n  [SymbolIterator]: {\n    value: function values() {\n      return this;\n    },\n  },\n});\n\n/**\n * Wrap the Array around the SafeIterator If Array.prototype [@@iterator] has been modified\n *\n * @type {<T>(array: T[]) => Iterable<T>}\n */\nexport function safeIfNeeded(array) {\n  if (array[SymbolIterator] === NativeArrayPrototypeSymbolIterator) {\n    return array;\n  }\n\n  const safe = ObjectCreate(SafeIteratorPrototype);\n  WeakMapPrototypeSet(arrayIterators, safe, ArrayPrototypeSymbolIterator(array));\n  return safe;\n}\n\n/** @type {WeakMap<{}, Generator<any>>} */\nconst generators = new NativeWeakMap();\n\n/** @see https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object */\nconst DummyArrayIteratorPrototype = ObjectCreate(IteratorPrototype, {\n  next: {\n    value: function next() {\n      const generator = WeakMapPrototypeGet(generators, this);\n      return GeneratorPrototypeNext(generator);\n    },\n    writable: true,\n    configurable: true,\n  },\n});\n\nfor (const key of ReflectOwnKeys(ArrayIteratorPrototype)) {\n  // next method has already defined\n  if (key === \"next\") {\n    continue;\n  }\n\n  // Copy ArrayIteratorPrototype descriptors to DummyArrayIteratorPrototype\n  ObjectDefineProperty(DummyArrayIteratorPrototype, key, ReflectGetOwnPropertyDescriptor(ArrayIteratorPrototype, key));\n}\n\n/**\n * Wrap the Generator around the dummy ArrayIterator\n *\n * @type {<T>(generator: Generator<T>) => IterableIterator<T>}\n */\nexport function wrap(generator) {\n  const dummy = ObjectCreate(DummyArrayIteratorPrototype);\n  WeakMapPrototypeSet(generators, dummy, generator);\n  return dummy;\n}\n","import {\n  ArrayBufferPrototypeGetByteLength,\n  ArrayIsArray,\n  MathTrunc,\n  NativeArrayPrototypeSymbolIterator,\n  NativeSharedArrayBuffer,\n  NativeTypedArrayPrototypeSymbolIterator,\n  NumberIsFinite,\n  SharedArrayBufferPrototypeGetByteLength,\n  SymbolIterator,\n  SymbolToStringTag,\n  TypedArrayPrototypeGetSymbolToStringTag,\n} from \"./primordials.mjs\";\n\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\nexport function isObject(value) {\n  return (value !== null && typeof value === \"object\") ||\n    typeof value === \"function\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is {}}\n */\nexport function isObjectLike(value) {\n  return value !== null && typeof value === \"object\";\n}\n\n// Inspired by util.types implementation of Node.js\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\nexport function isNativeTypedArray(value) {\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\n}\n\n/**\n * @param {unknown} value\n * @returns {value is BigInt64Array|BigUint64Array}\n */\nexport function isNativeBigIntTypedArray(value) {\n  const typedArrayName = TypedArrayPrototypeGetSymbolToStringTag(value);\n  return typedArrayName === \"BigInt64Array\" ||\n    typedArrayName === \"BigUint64Array\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is ArrayBuffer}\n */\nexport function isArrayBuffer(value) {\n  try {\n    ArrayBufferPrototypeGetByteLength(/** @type {any} */ (value));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is SharedArrayBuffer}\n */\nexport function isSharedArrayBuffer(value) {\n  if (NativeSharedArrayBuffer === null) {\n    return false;\n  }\n\n  try {\n    SharedArrayBufferPrototypeGetByteLength(/** @type {any} */ (value));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {value is unknown[]}\n */\nexport function isOrdinaryArray(value) {\n  if (!ArrayIsArray(value)) {\n    return false;\n  }\n\n  if (value[SymbolIterator] === NativeArrayPrototypeSymbolIterator) {\n    return true;\n  }\n\n  // for other realms\n  // eslint-disable-next-line no-restricted-syntax\n  const iterator = value[SymbolIterator]();\n  return iterator[SymbolToStringTag] === \"Array Iterator\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is TypedArray}\n */\nexport function isOrdinaryNativeTypedArray(value) {\n  if (!isNativeTypedArray(value)) {\n    return false;\n  }\n\n  if (value[SymbolIterator] === NativeTypedArrayPrototypeSymbolIterator) {\n    return true;\n  }\n\n  // for other realms\n  // eslint-disable-next-line no-restricted-syntax\n  const iterator = value[SymbolIterator]();\n  return iterator[SymbolToStringTag] === \"Array Iterator\";\n}\n\n/**\n * @param {unknown} value\n * @returns {value is string}\n */\nexport function isCanonicalIntegerIndexString(value) {\n  if (typeof value !== \"string\") {\n    return false;\n  }\n\n  const number = +value;\n  if (value !== number + \"\") {\n    return false;\n  }\n\n  if (!NumberIsFinite(number)) {\n    return false;\n  }\n\n  return number === MathTrunc(number);\n}\n","import { isObject, isObjectLike } from \"./is.mjs\";\nimport { THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT } from \"./messages.mjs\";\nimport { NativeTypeError, ReflectGetPrototypeOf, ReflectHas, SymbolFor } from \"./primordials.mjs\";\n\nexport const brand = SymbolFor(\"__Float16Array__\");\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {boolean}\n */\nexport function hasFloat16ArrayBrand(target) {\n  if (!isObjectLike(target)) {\n    return false;\n  }\n\n  const prototype = ReflectGetPrototypeOf(target);\n  if (!isObjectLike(prototype)) {\n    return false;\n  }\n\n  const constructor = prototype.constructor;\n  if (constructor === undefined) {\n    return false;\n  }\n  if (!isObject(constructor)) {\n    throw NativeTypeError(THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);\n  }\n\n  return ReflectHas(constructor, brand);\n}\n","// algorithm: http://fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nimport {\n  NativeArrayBuffer,\n  NativeFloat32Array,\n  NativeUint32Array,\n} from \"./primordials.mjs\";\n\nconst buffer = new NativeArrayBuffer(4);\nconst floatView = new NativeFloat32Array(buffer);\nconst uint32View = new NativeUint32Array(buffer);\n\nconst baseTable = new NativeUint32Array(512);\nconst shiftTable = new NativeUint32Array(512);\n\nfor (let i = 0; i < 256; ++i) {\n  const e = i - 127;\n\n  // very small number (0, -0)\n  if (e < -27) {\n    baseTable[i]         = 0x0000;\n    baseTable[i | 0x100] = 0x8000;\n    shiftTable[i]         = 24;\n    shiftTable[i | 0x100] = 24;\n\n  // small number (denorm)\n  } else if (e < -14) {\n    baseTable[i]         =  0x0400 >> (-e - 14);\n    baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\n    shiftTable[i]         = -e - 1;\n    shiftTable[i | 0x100] = -e - 1;\n\n  // normal number\n  } else if (e <= 15) {\n    baseTable[i]         =  (e + 15) << 10;\n    baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\n    shiftTable[i]         = 13;\n    shiftTable[i | 0x100] = 13;\n\n  // large number (Infinity, -Infinity)\n  } else if (e < 128) {\n    baseTable[i]         = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i]         = 24;\n    shiftTable[i | 0x100] = 24;\n\n  // stay (NaN, Infinity, -Infinity)\n  } else {\n    baseTable[i]         = 0x7c00;\n    baseTable[i | 0x100] = 0xfc00;\n    shiftTable[i]         = 13;\n    shiftTable[i | 0x100] = 13;\n  }\n}\n\n/**\n * round a number to a half float number bits\n *\n * @param {unknown} num - double float\n * @returns {number} half float number bits\n */\nexport function roundToFloat16Bits(num) {\n  floatView[0] = /** @type {any} */ (num);\n  const f = uint32View[0];\n  const e = (f >> 23) & 0x1ff;\n  return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\n}\n\nconst mantissaTable = new NativeUint32Array(2048);\nconst exponentTable = new NativeUint32Array(64);\nconst offsetTable = new NativeUint32Array(64);\n\nfor (let i = 1; i < 1024; ++i) {\n  let m = i << 13;    // zero pad mantissa bits\n  let e = 0;          // zero exponent\n\n  // normalized\n  while((m & 0x00800000) === 0) {\n    m <<= 1;\n    e -= 0x00800000;  // decrement exponent\n  }\n\n  m &= ~0x00800000;   // clear leading 1 bit\n  e += 0x38800000;    // adjust bias\n\n  mantissaTable[i] = m | e;\n}\nfor (let i = 1024; i < 2048; ++i) {\n  mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\n}\n\nfor (let i = 1; i < 31; ++i) {\n  exponentTable[i] = i << 23;\n}\nexponentTable[31] = 0x47800000;\nexponentTable[32] = 0x80000000;\nfor (let i = 33; i < 63; ++i) {\n  exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n}\nexponentTable[63] = 0xc7800000;\n\nfor (let i = 1; i < 64; ++i) {\n  if (i !== 32) {\n    offsetTable[i] = 1024;\n  }\n}\n\n/**\n * convert a half float number bits to a number\n *\n * @param {number} float16bits - half float number bits\n * @returns {number} double float\n */\nexport function convertToNumber(float16bits) {\n  const m = float16bits >> 10;\n  uint32View[0] = mantissaTable[offsetTable[m] + (float16bits & 0x3ff)] + exponentTable[m];\n  return floatView[0];\n}\n","import { isObject, isSharedArrayBuffer } from \"./is.mjs\";\nimport {\n  THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT,\n  THIS_IS_NOT_AN_OBJECT,\n} from \"./messages.mjs\";\nimport {\n  ArrayBufferPrototypeSlice,\n  MAX_SAFE_INTEGER,\n  MathTrunc,\n  NativeTypeError,\n  NumberIsNaN,\n  ObjectIs,\n  SymbolSpecies,\n} from \"./primordials.mjs\";\n\n/**\n * @see https://tc39.es/ecma262/#sec-tointegerorinfinity\n * @param {unknown} target\n * @returns {number}\n */\nexport function ToIntegerOrInfinity(target) {\n  const number = +target;\n\n  if (NumberIsNaN(number) || number === 0) {\n    return 0;\n  }\n\n  return MathTrunc(number);\n}\n\n/**\n * @see https://tc39.es/ecma262/#sec-tolength\n * @param {unknown} target\n * @returns {number}\n */\nexport function ToLength(target) {\n  const length = ToIntegerOrInfinity(target);\n  if (length < 0) {\n    return 0;\n  }\n\n  return length < MAX_SAFE_INTEGER\n    ? length\n    : MAX_SAFE_INTEGER;\n}\n\n/**\n * @see https://tc39.es/ecma262/#sec-speciesconstructor\n * @param {object} target\n * @param {{ new(...args: any[]): any; }} defaultConstructor\n * @returns {{ new(...args: any[]): any; }}\n */\nexport function SpeciesConstructor(target, defaultConstructor) {\n  if (!isObject(target)) {\n    throw NativeTypeError(THIS_IS_NOT_AN_OBJECT);\n  }\n\n  const constructor = target.constructor;\n  if (constructor === undefined) {\n    return defaultConstructor;\n  }\n  if (!isObject(constructor)) {\n    throw NativeTypeError(THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);\n  }\n\n  const species = constructor[SymbolSpecies];\n  if (species == null) {\n    return defaultConstructor;\n  }\n\n  return species;\n}\n\n/**\n * @see https://tc39.es/ecma262/#sec-isdetachedbuffer\n * @param {ArrayBufferLike} buffer\n * @returns {boolean}\n */\nexport function IsDetachedBuffer(buffer) {\n  if (isSharedArrayBuffer(buffer)) {\n    return false;\n  }\n\n  try {\n    ArrayBufferPrototypeSlice(buffer, 0, 0);\n    return false;\n  } catch (e) {/* empty */}\n\n  return true;\n}\n\n/**\n * bigint comparisons are not supported\n *\n * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort\n * @param {number} x\n * @param {number} y\n * @returns {-1 | 0 | 1}\n */\nexport function defaultCompare(x, y) {\n  const isXNaN = NumberIsNaN(x);\n  const isYNaN = NumberIsNaN(y);\n\n  if (isXNaN && isYNaN) {\n    return 0;\n  }\n\n  if (isXNaN) {\n    return 1;\n  }\n\n  if (isYNaN) {\n    return -1;\n  }\n\n  if (x < y) {\n    return -1;\n  }\n\n  if (x > y) {\n    return 1;\n  }\n\n  if (x === 0 && y === 0) {\n    const isXPlusZero = ObjectIs(x, 0);\n    const isYPlusZero = ObjectIs(y, 0);\n\n    if (!isXPlusZero && isYPlusZero) {\n      return -1;\n    }\n\n    if (isXPlusZero && !isYPlusZero) {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n","import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport {\n  isArrayBuffer,\n  isCanonicalIntegerIndexString,\n  isNativeBigIntTypedArray,\n  isNativeTypedArray,\n  isObject,\n  isOrdinaryArray,\n  isOrdinaryNativeTypedArray,\n  isSharedArrayBuffer,\n} from \"./_util/is.mjs\";\nimport {\n  ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER,\n  CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT,\n  CANNOT_MIX_BIGINT_AND_OTHER_TYPES,\n  DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH,\n  ITERATOR_PROPERTY_IS_NOT_CALLABLE,\n  OFFSET_IS_OUT_OF_BOUNDS,\n  REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE,\n  SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT,\n  THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY,\n  THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT,\n} from \"./_util/messages.mjs\";\nimport {\n  ArrayBufferIsView,\n  ArrayPrototypeJoin,\n  ArrayPrototypePush,\n  ArrayPrototypeToLocaleString,\n  NativeArrayBuffer,\n  NativeObject,\n  NativeProxy,\n  NativeRangeError,\n  NativeTypeError,\n  NativeUint16Array,\n  NativeWeakMap,\n  NativeWeakSet,\n  NumberIsNaN,\n  ObjectDefineProperty,\n  ObjectFreeze,\n  ObjectHasOwn,\n  ObjectPrototype__lookupGetter__,\n  ReflectApply,\n  ReflectConstruct,\n  ReflectDefineProperty,\n  ReflectGet,\n  ReflectGetOwnPropertyDescriptor,\n  ReflectHas,\n  ReflectOwnKeys,\n  ReflectSet,\n  ReflectSetPrototypeOf,\n  SymbolIterator,\n  SymbolToStringTag,\n  TypedArray,\n  TypedArrayPrototype,\n  TypedArrayPrototypeCopyWithin,\n  TypedArrayPrototypeEntries,\n  TypedArrayPrototypeFill,\n  TypedArrayPrototypeGetBuffer,\n  TypedArrayPrototypeGetByteOffset,\n  TypedArrayPrototypeGetLength,\n  TypedArrayPrototypeKeys,\n  TypedArrayPrototypeReverse,\n  TypedArrayPrototypeSet,\n  TypedArrayPrototypeSlice,\n  TypedArrayPrototypeSort,\n  TypedArrayPrototypeSubarray,\n  TypedArrayPrototypeValues,\n  Uint16ArrayFrom,\n  WeakMapPrototypeGet,\n  WeakMapPrototypeHas,\n  WeakMapPrototypeSet,\n  WeakSetPrototypeAdd,\n  WeakSetPrototypeHas,\n} from \"./_util/primordials.mjs\";\nimport {\n  IsDetachedBuffer,\n  SpeciesConstructor,\n  ToIntegerOrInfinity,\n  ToLength,\n  defaultCompare,\n} from \"./_util/spec.mjs\";\n\nconst BYTES_PER_ELEMENT = 2;\n\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\n\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\nconst float16bitsArrays = new NativeWeakMap();\n\n/**\n * @param {unknown} target\n * @returns {target is Float16Array}\n */\nexport function isFloat16Array(target) {\n  return WeakMapPrototypeHas(float16bitsArrays, target) ||\n    (!ArrayBufferIsView(target) && hasFloat16ArrayBrand(target));\n}\n\n/**\n * @param {unknown} target\n * @throws {TypeError}\n * @returns {asserts target is Float16Array}\n */\nfunction assertFloat16Array(target) {\n  if (!isFloat16Array(target)) {\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\n  }\n}\n\n/**\n * @param {unknown} target\n * @param {number=} count\n * @throws {TypeError}\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\n */\nfunction assertSpeciesTypedArray(target, count) {\n  const isTargetFloat16Array = isFloat16Array(target);\n  const isTargetTypedArray = isNativeTypedArray(target);\n\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\n  }\n\n  if (typeof count === \"number\") {\n    let length;\n    if (isTargetFloat16Array) {\n      const float16bitsArray = getFloat16BitsArray(target);\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\n    } else {\n      length = TypedArrayPrototypeGetLength(target);\n    }\n\n    if (length < count) {\n      throw NativeTypeError(\n        DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH\n      );\n    }\n  }\n\n  if (isNativeBigIntTypedArray(target)) {\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n  }\n}\n\n/**\n * @param {Float16Array} float16\n * @throws {TypeError}\n * @returns {Float16BitsArray}\n */\nfunction getFloat16BitsArray(float16) {\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\n  if (float16bitsArray !== undefined) {\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    return float16bitsArray;\n  }\n\n  // from another Float16Array instance (a different version?)\n  const buffer = /** @type {any} */ (float16).buffer;\n\n  if (IsDetachedBuffer(buffer)) {\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n  }\n\n  const cloned = ReflectConstruct(Float16Array, [\n    buffer,\n    /** @type {any} */ (float16).byteOffset,\n    /** @type {any} */ (float16).length,\n  ], float16.constructor);\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\n}\n\n/**\n * @param {Float16BitsArray} float16bitsArray\n * @returns {number[]}\n */\nfunction copyToArray(float16bitsArray) {\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n  const array = [];\n  for (let i = 0; i < length; ++i) {\n    array[i] = convertToNumber(float16bitsArray[i]);\n  }\n\n  return array;\n}\n\n/** @type {WeakSet<Function>} */\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\n  // @@toStringTag getter property is defined in Float16Array.prototype\n  if (key === SymbolToStringTag) {\n    continue;\n  }\n\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\n  }\n}\n\nconst handler = ObjectFreeze(/** @type {ProxyHandler<Float16BitsArray>} */ ({\n  get(target, key, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return convertToNumber(ReflectGet(target, key));\n    }\n\n    // %TypedArray%.prototype getter properties cannot called by Proxy receiver\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\n      return ReflectGet(target, key);\n    }\n\n    return ReflectGet(target, key, receiver);\n  },\n\n  set(target, key, value, receiver) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      return ReflectSet(target, key, roundToFloat16Bits(value));\n    }\n\n    return ReflectSet(target, key, value, receiver);\n  },\n\n  getOwnPropertyDescriptor(target, key) {\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      descriptor.value = convertToNumber(descriptor.value);\n      return descriptor;\n    }\n\n    return ReflectGetOwnPropertyDescriptor(target, key);\n  },\n\n  defineProperty(target, key, descriptor) {\n    if (\n      isCanonicalIntegerIndexString(key) &&\n      ObjectHasOwn(target, key) &&\n      ObjectHasOwn(descriptor, \"value\")\n    ) {\n      descriptor.value = roundToFloat16Bits(descriptor.value);\n      return ReflectDefineProperty(target, key, descriptor);\n    }\n\n    return ReflectDefineProperty(target, key, descriptor);\n  },\n}));\n\nexport class Float16Array {\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\n  constructor(input, _byteOffset, _length) {\n    /** @type {Float16BitsArray} */\n    let float16bitsArray;\n\n    if (isFloat16Array(input)) {\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\n    } else if (isObject(input) && !isArrayBuffer(input)) { // object without ArrayBuffer\n      /** @type {ArrayLike<unknown>} */\n      let list;\n      /** @type {number} */\n      let length;\n\n      if (isNativeTypedArray(input)) { // TypedArray\n        list = input;\n        length = TypedArrayPrototypeGetLength(input);\n\n        const buffer = TypedArrayPrototypeGetBuffer(input);\n        const BufferConstructor = !isSharedArrayBuffer(buffer)\n          ? /** @type {ArrayBufferConstructor} */ (SpeciesConstructor(\n            buffer,\n            NativeArrayBuffer\n          ))\n          : NativeArrayBuffer;\n\n        if (IsDetachedBuffer(buffer)) {\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n        }\n\n        if (isNativeBigIntTypedArray(input)) {\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\n        }\n\n        const data = new BufferConstructor(\n          length * BYTES_PER_ELEMENT\n        );\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\n      } else {\n        const iterator = input[SymbolIterator];\n        if (iterator != null && typeof iterator !== \"function\") {\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n        }\n\n        if (iterator != null) { // Iterable (Array)\n          // for optimization\n          if (isOrdinaryArray(input)) {\n            list = input;\n            length = input.length;\n          } else {\n            // eslint-disable-next-line no-restricted-syntax\n            list = [... /** @type {Iterable<unknown>} */ (input)];\n            length = list.length;\n          }\n        } else { // ArrayLike\n          list = /** @type {ArrayLike<unknown>} */ (input);\n          length = ToLength(list.length);\n        }\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\n      }\n\n      // set values\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\n      }\n    } else { // primitive, ArrayBuffer\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\n    }\n\n    /** @type {Float16Array} */\n    const proxy = /** @type {any} */ (new NativeProxy(float16bitsArray, handler));\n\n    // proxy private storage\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\n\n    return proxy;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\n   */\n  static from(src, ...opts) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      if (isFloat16Array(src) && opts.length === 0) {\n        const float16bitsArray = getFloat16BitsArray(src);\n        const uint16 = new NativeUint16Array(\n          TypedArrayPrototypeGetBuffer(float16bitsArray),\n          TypedArrayPrototypeGetByteOffset(float16bitsArray),\n          TypedArrayPrototypeGetLength(float16bitsArray)\n        );\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16))\n        );\n      }\n\n      if (opts.length === 0) {\n        return new Float16Array(\n          TypedArrayPrototypeGetBuffer(\n            Uint16ArrayFrom(src, roundToFloat16Bits)\n          )\n        );\n      }\n\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          Uint16ArrayFrom(src, function (val, ...args) {\n            return roundToFloat16Bits(\n              ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)])\n            );\n          }, thisArg)\n        )\n      );\n    }\n\n    /** @type {ArrayLike<unknown>} */\n    let list;\n    /** @type {number} */\n    let length;\n\n    const iterator = src[SymbolIterator];\n    if (iterator != null && typeof iterator !== \"function\") {\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\n    }\n\n    if (iterator != null) { // Iterable (TypedArray, Array)\n      // for optimization\n      if (isOrdinaryArray(src)) {\n        list = src;\n        length = src.length;\n      } else if (isOrdinaryNativeTypedArray(src)) {\n        list = src;\n        length = TypedArrayPrototypeGetLength(src);\n      } else {\n        // eslint-disable-next-line no-restricted-syntax\n        list = [...src];\n        length = list.length;\n      }\n    } else { // ArrayLike\n      if (src == null) {\n        throw NativeTypeError(\n          CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n        );\n      }\n      list = NativeObject(src);\n      length = ToLength(list.length);\n    }\n\n    const array = new Constructor(length);\n\n    if (opts.length === 0) {\n      for (let i = 0; i < length; ++i) {\n        array[i] = /** @type {number} */ (list[i]);\n      }\n    } else {\n      const mapFunc = opts[0];\n      const thisArg = opts[1];\n      for (let i = 0; i < length; ++i) {\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\n      }\n    }\n\n    return array;\n  }\n\n  /**\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\n   */\n  static of(...items) {\n    const Constructor = this;\n\n    if (!ReflectHas(Constructor, brand)) {\n      throw NativeTypeError(\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\n      );\n    }\n\n    const length = items.length;\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const float16bitsArray = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        float16bitsArray[i] = roundToFloat16Bits(items[i]);\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n\n    for (let i = 0; i < length; ++i) {\n      array[i] = items[i];\n    }\n\n    return array;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\n  keys() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return TypedArrayPrototypeKeys(float16bitsArray);\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\n   */\n  values() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\n        yield convertToNumber(val);\n      }\n    })());\n  }\n\n  /**\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\n   *\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\n   */\n  entries() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    return wrap((function* () {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\n        yield /** @type {[Number, number]} */ ([i, convertToNumber(val)]);\n      }\n    })());\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\n  at(index) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeIndex = ToIntegerOrInfinity(index);\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\n\n    if (k < 0 || k >= length) {\n      return;\n    }\n\n    return convertToNumber(float16bitsArray[k]);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\n  map(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const proxy = new Float16Array(length);\n      const array = getFloat16BitsArray(proxy);\n\n      for (let i = 0; i < length; ++i) {\n        const val = convertToNumber(float16bitsArray[i]);\n        array[i] = roundToFloat16Bits(\n          ReflectApply(callback, thisArg, [val, i, this])\n        );\n      }\n\n      return proxy;\n    }\n\n    const array = new Constructor(length);\n    assertSpeciesTypedArray(array, length);\n\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\n  filter(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    const kept = [];\n    for (let i = 0; i < length; ++i) {\n      const val = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\n        ArrayPrototypePush(kept, val);\n      }\n    }\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n    const array = new Constructor(kept);\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\n  reduce(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[0]);\n      start = 1;\n    } else {\n      accumulator = opts[0];\n      start = 0;\n    }\n\n    for (let i = start; i < length; ++i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\n  reduceRight(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    if (length === 0 && opts.length === 0) {\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\n    }\n\n    let accumulator, start;\n    if (opts.length === 0) {\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\n      start = length - 2;\n    } else {\n      accumulator = opts[0];\n      start = length - 1;\n    }\n\n    for (let i = start; i >= 0; --i) {\n      accumulator = callback(\n        accumulator,\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this\n      );\n    }\n\n    return accumulator;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\n  forEach(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      ReflectApply(callback, thisArg, [\n        convertToNumber(float16bitsArray[i]),\n        i,\n        this,\n      ]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\n  find(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\n  findIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\n  findLast(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return value;\n      }\n    }\n  }\n\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\n  findLastIndex(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = length - 1; i >= 0; --i) {\n      const value = convertToNumber(float16bitsArray[i]);\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\n  every(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        !ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\n  some(callback, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const thisArg = opts[0];\n\n    for (let i = 0; i < length; ++i) {\n      if (\n        ReflectApply(callback, thisArg, [\n          convertToNumber(float16bitsArray[i]),\n          i,\n          this,\n        ])\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\n  set(input, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const targetOffset = ToIntegerOrInfinity(opts[0]);\n    if (targetOffset < 0) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    if (input == null) {\n      throw NativeTypeError(\n        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\n      );\n    }\n\n    if (isNativeBigIntTypedArray(input)) {\n      throw NativeTypeError(\n        CANNOT_MIX_BIGINT_AND_OTHER_TYPES\n      );\n    }\n\n    // for optimization\n    if (isFloat16Array(input)) {\n      // peel off Proxy\n      return TypedArrayPrototypeSet(\n        getFloat16BitsArray(this),\n        getFloat16BitsArray(input),\n        targetOffset\n      );\n    }\n\n    if (isNativeTypedArray(input)) {\n      const buffer = TypedArrayPrototypeGetBuffer(input);\n      if (IsDetachedBuffer(buffer)) {\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n      }\n    }\n\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    const src = NativeObject(input);\n    const srcLength = ToLength(src.length);\n\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\n    }\n\n    for (let i = 0; i < srcLength; ++i) {\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\n    }\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\n  reverse() {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeReverse(float16bitsArray);\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\n  fill(value, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeFill(\n      float16bitsArray,\n      roundToFloat16Bits(value),\n      ...safeIfNeeded(opts)\n    );\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\n  copyWithin(target, start, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\n  sort(compareFn) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\n      return sortCompare(convertToNumber(x), convertToNumber(y));\n    });\n\n    return this;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\n  slice(start, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    // for optimization\n    if (Constructor === Float16Array) {\n      const uint16 = new NativeUint16Array(\n        TypedArrayPrototypeGetBuffer(float16bitsArray),\n        TypedArrayPrototypeGetByteOffset(float16bitsArray),\n        TypedArrayPrototypeGetLength(float16bitsArray)\n      );\n      return new Float16Array(\n        TypedArrayPrototypeGetBuffer(\n          TypedArrayPrototypeSlice(uint16, start, end)\n        )\n      );\n    }\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n    const relativeStart = ToIntegerOrInfinity(start);\n    const relativeEnd = end === undefined ? length : ToIntegerOrInfinity(end);\n\n    let k;\n    if (relativeStart === -Infinity) {\n      k = 0;\n    } else if (relativeStart < 0) {\n      k = length + relativeStart > 0 ? length + relativeStart : 0;\n    } else {\n      k = length < relativeStart ? length : relativeStart;\n    }\n\n    let final;\n    if (relativeEnd === -Infinity) {\n      final = 0;\n    } else if (relativeEnd < 0) {\n      final = length + relativeEnd > 0 ? length + relativeEnd : 0;\n    } else {\n      final = length < relativeEnd ? length : relativeEnd;\n    }\n\n    const count = final - k > 0 ? final - k : 0;\n    const array = new Constructor(count);\n    assertSpeciesTypedArray(array, count);\n\n    if (count === 0) {\n      return array;\n    }\n\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\n    if (IsDetachedBuffer(buffer)) {\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\n    }\n\n    let n = 0;\n    while (k < final) {\n      array[n] = convertToNumber(float16bitsArray[k]);\n      ++k;\n      ++n;\n    }\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\n  subarray(begin, end) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\n\n    const uint16 = new NativeUint16Array(\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\n      TypedArrayPrototypeGetLength(float16bitsArray)\n    );\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, begin, end);\n\n    const array = new Constructor(\n      TypedArrayPrototypeGetBuffer(uint16Subarray),\n      TypedArrayPrototypeGetByteOffset(uint16Subarray),\n      TypedArrayPrototypeGetLength(uint16Subarray)\n    );\n    assertSpeciesTypedArray(array);\n\n    return /** @type {any} */ (array);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\n  indexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return -1;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    for (let i = from; i < length; ++i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\n  lastIndexOf(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = opts.length >= 1 ? ToIntegerOrInfinity(opts[0]) : length - 1;\n    if (from === -Infinity) {\n      return -1;\n    }\n\n    if (from >= 0) {\n      from = from < length - 1 ? from : length - 1;\n    } else {\n      from += length;\n    }\n\n    for (let i = from; i >= 0; --i) {\n      if (\n        ObjectHasOwn(float16bitsArray, i) &&\n        convertToNumber(float16bitsArray[i]) === element\n      ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\n  includes(element, ...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\n\n    let from = ToIntegerOrInfinity(opts[0]);\n    if (from === Infinity) {\n      return false;\n    }\n\n    if (from < 0) {\n      from += length;\n      if (from < 0) {\n        from = 0;\n      }\n    }\n\n    const isNaN = NumberIsNaN(element);\n    for (let i = from; i < length; ++i) {\n      const value = convertToNumber(float16bitsArray[i]);\n\n      if (isNaN && NumberIsNaN(value)) {\n        return true;\n      }\n\n      if (value === element) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\n  join(separator) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeJoin(array, separator);\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\n  toLocaleString(...opts) {\n    assertFloat16Array(this);\n    const float16bitsArray = getFloat16BitsArray(this);\n\n    const array = copyToArray(float16bitsArray);\n\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\n  }\n\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\n  get [SymbolToStringTag]() {\n    if (isFloat16Array(this)) {\n      return /** @type {any} */ (\"Float16Array\");\n    }\n  }\n}\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n// limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\nObjectDefineProperty(Float16Array, brand, {});\n\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\nReflectSetPrototypeOf(Float16Array, TypedArray);\n\nconst Float16ArrayPrototype = Float16Array.prototype;\n\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\n  value: BYTES_PER_ELEMENT,\n});\n\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\n  value: Float16ArrayPrototype.values,\n  writable: true,\n  configurable: true,\n});\n\n// To make `new Float16Array() instanceof Uint16Array` returns `false`\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);\n","import { safeIfNeeded } from \"./_util/arrayIterator.mjs\";\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\nimport {\n  DataViewPrototypeGetUint16,\n  DataViewPrototypeSetUint16,\n} from \"./_util/primordials.mjs\";\n\n/**\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView\n *\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {[boolean]} opts\n * @returns {number}\n */\nexport function getFloat16(dataView, byteOffset, ...opts) {\n  return convertToNumber(\n    DataViewPrototypeGetUint16(dataView, byteOffset, ...safeIfNeeded(opts))\n  );\n}\n\n/**\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView\n *\n * @param {DataView} dataView\n * @param {number} byteOffset\n * @param {number} value\n * @param {[boolean]} opts\n */\nexport function setFloat16(dataView, byteOffset, value, ...opts) {\n  return DataViewPrototypeSetUint16(\n    dataView,\n    byteOffset,\n    roundToFloat16Bits(value),\n    ...safeIfNeeded(opts)\n  );\n}\n","(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,\"undefined\"!=typeof module&&(module.exports=g)});\n\n//# sourceMappingURL=FileSaver.min.js.map","import {\n\tisArray,\n\tisFiniteNumber,\n\tisInteger,\n\tisNonNegativeInteger,\n} from '@amandaghassaei/type-checks';\nimport {\n\tvalidDataTypes,\n\tvalidFilters,\n\tvalidWraps,\n\tGPULayerType,\n\tHALF_FLOAT,\n\tFLOAT,\n\tBYTE,\n\tSHORT,\n\tINT,\n\tUNSIGNED_BYTE,\n\tUNSIGNED_SHORT,\n\tUNSIGNED_INT,\n\tvalidImageFormats,\n\tvalidImageTypes,\n} from './constants';\n\n/**\n * Checks if type is valid GPULayer data type.\n * @private\n */\nexport function isValidDataType(type: string) {\n\treturn validDataTypes.indexOf(type) > -1;\n}\n\n/**\n * Checks if filter is valid GPULayer filter type.\n * @private\n */\nexport function isValidFilter(type: string) {\n\treturn validFilters.indexOf(type) > -1;\n}\n\n/**\n * Checks if wrap is valid GPULayer wrap type.\n * @private\n */\nexport function isValidWrap(type: string) {\n\treturn validWraps.indexOf(type) > -1;\n}\n\n/**\n * For image urls that are passed in and inited as GPULayers.\n * @private\n */\nexport function isValidImageFormat(type: string) {\n\treturn validImageFormats.indexOf(type) > -1;\n}\n/**\n * For image urls that are passed in and inited as GPULayers.\n * @private\n */\nexport function isValidImageType(type: string) {\n\treturn validImageTypes.indexOf(type) > -1;\n}\n\n/**\n * Checks if value is valid GPULayer clear value for numComponents and type.\n * @private\n */\nexport function isValidClearValue(clearValue: number | number[], numComponents: number, type: GPULayerType) {\n\tif (isArray(clearValue)) {\n\t\t// Length of clearValue must match numComponents.\n\t\tif ((clearValue as number[]).length !== numComponents) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < (clearValue as number[]).length; i++) {\n\t\t\tif (!isNumberOfType((clearValue as number[])[i], type)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (!isNumberOfType(clearValue, type)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * Checks if value is valid number for a given GPULayer type.\n * Checks extrema values.\n * @private\n */\nexport function isNumberOfType(value: any, type: GPULayerType) {\n\tswitch (type) {\n\t\tcase HALF_FLOAT:\n\t\tcase FLOAT:\n\t\t\treturn isFiniteNumber(value);\n\t\tcase BYTE:\n\t\t\t// -(2 ** 7)\n\t\t\tif (value < -128) return false;\n\t\t\t// 2 ** 7 - 1\n\t\t\tif (value > 127) return false;\n\t\t\treturn isInteger(value);\n\t\tcase SHORT:\n\t\t\t// -(2 ** 15)\n\t\t\tif (value < -32768) return false;\n\t\t\t// 2 ** 15 - 1\n\t\t\tif (value > 32767) return false;\n\t\t\treturn isInteger(value);\n\t\tcase INT:\n\t\t\t// -(2 ** 31)\n\t\t\tif (value < -2147483648) return false;\n\t\t\t// 2 ** 31 - 1\n\t\t\tif (value > 2147483647) return false;\n\t\t\treturn isInteger(value);\n\t\tcase UNSIGNED_BYTE:\n\t\t\t// 2 ** 8 - 1\n\t\t\tif (value > 255) return false;\n\t\t\treturn isNonNegativeInteger(value);\n\t\tcase UNSIGNED_SHORT:\n\t\t\t// 2 ** 16 - 1\n\t\t\tif (value > 65535) return false;\n\t\t\treturn isNonNegativeInteger(value);\n\t\tcase UNSIGNED_INT:\n\t\t\t// 2 ** 32 - 1\n\t\t\tif (value > 4294967295) return false;\n\t\t\treturn isNonNegativeInteger(value);\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown type ${type}`);\n\t}\n}\n\nexport function checkValidKeys(keys: string[], validKeys: string[], methodName: string, name?: string) {\n\tkeys.forEach(key => {\n\t\tif (validKeys.indexOf(key) < 0) {\n\t\t\tconsole.warn(`Invalid params key \"${key}\" passed to ${methodName}${name ? ` with name \"${name}\"` : ''}.  Valid keys are ${JSON.stringify(validKeys)}.`);\n\t\t}\n\t});\n}\n\nexport function checkRequiredKeys(keys: string[], requiredKeys: string[], methodName: string, name?: string) {\n\trequiredKeys.forEach(key => {\n\t\tif (keys.indexOf(key) < 0) {\n\t\t\tthrow new Error(`Required params key \"${key}\" was not passed to ${methodName}${name ? ` with name \"${name}\"` : ''}.`);\n\t\t}\n\t});\n}","import type { GPUComposer } from './GPUComposer';\nimport type { GPULayer } from './GPULayer';\n\n// Cache framebuffers to minimize invalidating FBO attachment bindings:\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#avoid_invalidating_fbo_attachment_bindings\nconst framebufferMap: WeakMap<WebGLTexture | WebGLTexture[], WebGLFramebuffer> = new WeakMap();\nconst allTextureFramebuffersMap: WeakMap<WebGLTexture, WebGLFramebuffer[]> = new WeakMap();\n\nfunction initFrameBuffer(\n\tcomposer: GPUComposer,\n\tlayer0: GPULayer,\n\ttexture0: WebGLTexture,\n\tadditionalTextures?: WebGLTexture[],\n) {\n\tconst { gl, _errorCallback, isWebGL2 } = composer;\n\t// Init a framebuffer for this texture so we can write to it.\n\tconst framebuffer = gl.createFramebuffer();\n\tif (!framebuffer) {\n\t\t_errorCallback(`Could not init framebuffer for GPULayer \"${layer0.name}\": ${gl.getError()}.`);\n\t\treturn;\n\t}\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D\n\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture0, 0);\n\tif (additionalTextures) {\n\t\t// Check if length additional textures exceeds a max.\n\t\tif (!isWebGL2) {\n\t\t\tthrow new Error('WebGL1 does not support drawing to multiple outputs.');\n\t\t}\n\t\tif (additionalTextures.length > 15) {\n\t\t\tthrow new Error(`Can't draw to more than 16 outputs.`);\n\t\t}\n\t\tfor (let i = 0, numTextures = additionalTextures.length; i < numTextures; i++) {\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, additionalTextures[i], 0);\n\t\t}\n\t}\n\n\tconst status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\tif(status !== gl.FRAMEBUFFER_COMPLETE){\n\t\t_errorCallback(`Invalid status for framebuffer for GPULayer \"${layer0.name}\": ${status}.`);\n\t}\n\n\treturn framebuffer;\n}\n\n/**\n * Bind framebuffer for write operation.\n * @private\n */\nexport function bindFrameBuffer(\n\tcomposer: GPUComposer,\n\tlayer0: GPULayer,\n\ttexture0: WebGLTexture,\n\tadditionalTextures?: WebGLTexture[],\n) {\n\tconst { gl } = composer;\n\tconst key = additionalTextures ? [texture0, ...additionalTextures] : texture0;\n\tlet framebuffer = framebufferMap.get(key);\n\tif (!framebuffer) {\n\t\tframebuffer = initFrameBuffer(composer, layer0, texture0, additionalTextures);\n\t\tif (!framebuffer) return;\n\t\tframebufferMap.set(key, framebuffer);\n\t\tconst allFramebuffers = allTextureFramebuffersMap.get(texture0) || [];\n\t\tallFramebuffers.push(framebuffer);\n\t\tallTextureFramebuffersMap.set(texture0, allFramebuffers);\n\t\tif (additionalTextures) {\n\t\t\tfor (let i = 0, numTextures = additionalTextures.length; i < numTextures; i++) {\n\t\t\t\tconst texture = additionalTextures[i];\n\t\t\t\tconst allFramebuffers = allTextureFramebuffersMap.get(texture) || [];\n\t\t\t\tallFramebuffers.push(framebuffer);\n\t\t\t\tallTextureFramebuffersMap.set(texture, allFramebuffers);\n\t\t\t}\n\t\t}\n\t}\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n}\n\n/**\n * Delete framebuffers when no longer needed.\n * @private\n */\nexport function disposeFramebuffers(gl: WebGLRenderingContext | WebGL2RenderingContext, texture: WebGLTexture) {\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t// Delete all framebuffers associated with this texture.\n\tconst allFramebuffers = allTextureFramebuffersMap.get(texture);\n\tif (allFramebuffers) {\n\t\tfor (let i = 0, numFramebuffers = allFramebuffers.length; i < numFramebuffers; i++) {\n\t\t\tgl.deleteFramebuffer(allFramebuffers[i]);\n\t\t}\n\t}\n\tallTextureFramebuffersMap.delete(texture);\n}","import { getFloat16 } from '@petamoriken/float16';\nimport type { Texture } from 'three';\nimport {\n\tisArray,\n\tisFiniteNumber,\n\tisObject,\n\tisPositiveInteger,\n\tisString,\n} from '@amandaghassaei/type-checks';\n// @ts-ignore\nimport { changeDpiBlob } from 'changedpi';\nimport { saveAs } from 'file-saver';\nimport type { GPUComposer } from './GPUComposer';\nimport {\n\tcheckRequiredKeys,\n\tcheckValidKeys,\n\tisValidClearValue,\n\tisValidDataType,\n\tisValidFilter,\n\tisValidImageFormat,\n\tisValidImageType,\n\tisValidWrap,\n} from './checks';\nimport {\n\tHALF_FLOAT,\n\tFLOAT,\n\tUNSIGNED_BYTE,\n\tBYTE,\n\tUNSIGNED_SHORT,\n\tSHORT,\n\tUNSIGNED_INT,\n\tINT,\n\tNEAREST,\n\tLINEAR,\n\tCLAMP_TO_EDGE,\n\tGPULayerArray,\n\tGPULayerFilter,\n\tGPULayerNumComponents,\n\tGPULayerType,\n\tGPULayerWrap,\n\tvalidFilters,\n\tvalidWraps,\n\tvalidDataTypes,\n\tGPULayerState,\n\tImageFormat,\n\tImageType,\n\tvalidImageFormats,\n\tvalidImageTypes,\n } from './constants';\nimport {\n\treadPixelsAsync,\n\treadyToRead,\n} from './utils';\nimport { disposeFramebuffers, bindFrameBuffer } from './framebuffers';\nimport { arrayConstructorForType } from './conversions';\n\nexport class GPULayer {\n\t// Keep a reference to GPUComposer.\n\tprivate readonly _composer: GPUComposer;\n\n\t/**\n\t * Name of GPULayer, used for error logging.\n\t */\n\treadonly name: string;\n\t/**\n\t * Data type represented by GPULayer.\n\t */\n\treadonly type: GPULayerType; // Input type passed in during setup.\n\t/**\n\t * Number of RGBA elements represented by each pixel in the GPULayer (1-4).\n\t */\n\treadonly numComponents: GPULayerNumComponents;\n\t/**\n\t * Interpolation filter for GPULayer, defaults to LINEAR for 2D FLOAT/HALF_FLOAT GPULayers, otherwise defaults to NEAREST.\n\t */\n\treadonly filter: GPULayerFilter;\n\t/**\n\t * Horizontal wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t */\n\treadonly wrapX: GPULayerWrap;\n\t/**\n\t * Vertical wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t */\n\treadonly wrapY: GPULayerWrap;\n\n\t// Value to set when clear() is called, defaults to zero.\n\t// Access with GPULayer.clearValue.\n\tprivate _clearValue: number | number[] = 0;\n\tprivate _clearValueVec4? : number[];\n\n\t// Each GPULayer may contain a number of buffers to store different instances of the state.\n\t// e.g [currentState, previousState]\n\tprivate _bufferIndex = 0;\n\treadonly numBuffers;\n\tprivate readonly _buffers: WebGLTexture[] = [];\n\n\t// Texture sizes.\n\tprivate _length?: number; // This is only used for 1D data layers, access with GPULayer.length.\n\tprivate _width: number; // Access with GPULayer.width.\n\tprivate _height: number; // Access with GPULayer.height.\n\n\t// GPULayer settings.\n\t// Due to variable browser support of WebGL features, \"internal\" variables may be different\n\t// from the parameter originally passed in.  These variables are set so that they match the original\n\t// parameter as best as possible, but fragment shader polyfills may be required.\n\t// All \"gl\" variables are used to initialize internal WebGLTexture.\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter\n\t/**\n\t * @private\n\t */\n\treadonly _glInternalFormat: number;\n\t/**\n\t * @private\n\t */\n\treadonly _glFormat: number;\n\n\t/**\n\t * GPULayer._internalType corresponds to GPULayer.glType, but may be different from GPULayer.type.\n\t * @private\n\t */\n\treadonly _internalType: GPULayerType;\n\t/**\n\t * @private\n\t */\n\treadonly _glType: number;\n\n\t/**\n\t * Internally, GPULayer._glNumChannels may represent a larger number of channels than GPULayer.numComponents.\n\t * For example, writable RGB textures are not supported in WebGL2, must use RGBA instead.\n\t * @private\n\t */\n\treadonly _glNumChannels: number;\n\n\t/**\n\t * GPULayer._internalFilter corresponds to GPULayer.glFilter, may be different from GPULayer.filter.\n\t * @private\n\t */\n\treadonly _internalFilter: GPULayerFilter;\n\t/**\n\t * @private\n\t */\n\treadonly _glFilter: number;\n\n\t/**\n\t * GPULayer._internalWrapX corresponds to GPULayer.glWrapX, but may be different from GPULayer.wrapX.\n\t * @private\n\t */\n\treadonly _internalWrapX: GPULayerWrap;\n\t/**\n\t * @private\n\t */\n\treadonly _glWrapS: number;\n\n\t/**\n\t * GPULayer._internalWrapY corresponds to GPULayer.glWrapY, but may be different from GPULayer.wrapY.\n\t * @private\n\t */\n\treadonly _internalWrapY: GPULayerWrap;\n\t/**\n\t * @private\n\t */\n\treadonly _glWrapT: number;\n\t\n\t// Optimization so that \"copying\" can happen without draw calls by simply swapping WebGL textures between GPULayers.\n\t// This functionality is not currently active right now, but will be added back in later.\n\tprivate _textureOverrides?: (WebGLTexture | undefined)[];\n\n\t// Optimizations so we don't allocate many large arrays if getValues()is called multiple times.\n\tprivate _values?: GPULayerArray;\n\tprivate _valuesRaw?: Float32Array | Uint16Array | Uint32Array | Int32Array;\n\tprivate _valuesBufferView?: DataView;\n\n\t/**\n\t * Create a GPULayer from an image url.\n\t * @param composer - The current GPUComposer instance.\n\t * @param params  - GPULayer parameters.\n\t * @param params.name - Name of GPULayer, used for error logging.\n\t * @param params.url - URL of the image source.\n\t * @param params.type - Data type represented by GPULayer.\n\t * @param params.format - Image format, either RGB or RGBA.\n\t * @param params.filter - Interpolation filter for GPULayer, defaults to LINEAR for FLOAT/HALF_FLOAT Images, otherwise defaults to NEAREST.\n\t * @param params.wrapX - Horizontal wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t * @param params.wrapY - Vertical wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t * @param params.clearValue - Value to write to GPULayer when GPULayer.clear() is called.\n\t */\n\tstatic async initFromImageURL(composer: GPUComposer,\n\t\tparams: {\n\t\t\tname: string,\n\t\t\turl: string,\n\t\t\ttype?: ImageType,\n\t\t\tformat?: ImageFormat,\n\t\t\tfilter?: GPULayerFilter,\n\t\t\twrapX?: GPULayerWrap,\n\t\t\twrapY?: GPULayerWrap,\n\t\t\tclearValue?: number | number[],\n\t\t},\n\t) {\n\t\treturn new Promise<GPULayer>((resolve, reject) => {\n\t\t\tif (!params) {\n\t\t\t\tthrow new Error('Error initing GPULayer: must pass params to GPULayer.initFromImageURL(composer, params).');\n\t\t\t}\n\t\t\tif (!isObject(params)) {\n\t\t\t\tthrow new Error(`Error initing GPULayer: must pass valid params object to GPULayer.initFromImageURL(composer, params), got ${JSON.stringify(params)}.`);\n\t\t\t}\n\t\t\t// Check params.\n\t\t\tconst validKeys = ['name', 'url', 'filter', 'wrapX', 'wrapY', 'format', 'type', 'clearValue'];\n\t\t\tconst requiredKeys = ['name', 'url'];\n\t\t\tconst keys = Object.keys(params);\n\t\t\tcheckValidKeys(keys, validKeys, 'GPULayer.initFromImageURL(composer, params)', params.name);\n\t\t\tcheckRequiredKeys(keys, requiredKeys, 'GPULayer.initFromImageURL(composer, params)', params.name);\n\n\t\t\tconst { url, name, filter, wrapX, wrapY, type, format } = params;\n\t\t\tif (!isString(url)) {\n\t\t\t\tthrow new Error(`Expected GPULayer.initFromImageURL params to have url of type string, got ${url} of type ${typeof url}.`)\n\t\t\t}\n\t\t\tif (type && !isValidImageType(type)) {\n\t\t\t\tthrow new Error(`Invalid type: \"${type}\" for GPULayer.initFromImageURL \"${name}\", must be one of ${JSON.stringify(validImageTypes)}.`)\n\t\t\t}\n\t\t\tif (format && !isValidImageFormat(format)) {\n\t\t\t\tthrow new Error(`Invalid format: \"${format}\" for GPULayer.initFromImageURL \"${name}\", must be one of ${JSON.stringify(validImageFormats)}.`)\n\t\t\t}\n\n\t\t\t// Init a layer to return, we will fill it when image has loaded.\n\t\t\tconst layer = new GPULayer(composer, {\n\t\t\t\tname,\n\t\t\t\ttype: type || FLOAT,\n\t\t\t\tnumComponents: format ? format.length as GPULayerNumComponents : 4,\n\t\t\t\tdimensions: [1, 1], // Init as 1 px to start.\n\t\t\t\tfilter,\n\t\t\t\twrapX,\n\t\t\t\twrapY,\n\t\t\t\tnumBuffers: 1,\n\t\t\t\tclearValue: params.clearValue,\n\t\t\t});\n\n\t\t\t// Load image.\n\t\t\tconst image = new Image();\n\t\t\timage.onload = () => {\n\t\t\t\tlayer.resize([image.width, image.height], image);\n\t\t\t\t// Callback when texture has loaded.\n\t\t\t\tresolve(layer);\n\t\t\t};\n\t\t\timage.onerror = (e) => {\n\t\t\t\treject(new Error(`Error loading image \"${name}\": ${e}`));\n\t\t\t}\n\t\t\timage.src = url;\n\t\t});\n\t}\n\n\t/**\n\t * Create a GPULayer.\n\t * @param composer - The current GPUComposer instance.\n\t * @param params - GPULayer parameters.\n\t * @param params.name - Name of GPULayer, used for error logging.\n\t * @param params.type - Data type represented by GPULayer.\n\t * @param params.numComponents - Number of RGBA elements represented by each pixel in the GPULayer (1-4).\n\t * @param params.dimensions - Dimensions of 1D or 2D GPULayer.\n\t * @param params.filter - Interpolation filter for GPULayer, defaults to LINEAR for 2D FLOAT/HALF_FLOAT GPULayers, otherwise defaults to NEAREST.\n\t * @param params.wrapX - Horizontal wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t * @param params.wrapY - Vertical wrapping style for GPULayer, defaults to CLAMP_TO_EDGE.\n\t * @param params.numBuffers - How may buffers to allocate, defaults to 1.  If you intend to use the current state of this GPULayer as an input to generate a new state, you will need at least 2 buffers.\n\t * @param params.clearValue - Value to write to GPULayer when GPULayer.clear() is called.\n\t * @param params.array - Array to initialize GPULayer.\n\t */\n\tconstructor(\n\t\tcomposer: GPUComposer,\n\t\tparams: {\n\t\t\tname: string,\n\t\t\ttype: GPULayerType,\n\t\t\tnumComponents: GPULayerNumComponents,\n\t\t\tdimensions: number | number[],\n\t\t\tarray?: GPULayerArray | number[],\n\t\t\tfilter?: GPULayerFilter,\n\t\t\twrapX?: GPULayerWrap,\n\t\t\twrapY?: GPULayerWrap,\n\t\t\tnumBuffers?: number,\n\t\t\tclearValue?: number | number[],\n\t\t},\n\t) {\n\t\t// Check constructor parameters.\n\t\tconst { name } = (params || {});\n\t\tif (!composer) {\n\t\t\tthrow new Error(`Error initing GPULayer \"${name}\": must pass GPUComposer instance to GPULayer(composer, params).`);\n\t\t}\n\t\tif (!params) {\n\t\t\tthrow new Error('Error initing GPULayer: must pass params to GPULayer(composer, params).');\n\t\t}\n\t\tif (!isObject(params)) {\n\t\t\tthrow new Error(`Error initing GPULayer: must pass valid params object to GPULayer(composer, params), got ${JSON.stringify(params)}.`);\n\t\t}\n\t\t// Check params keys.\n\t\tconst validKeys = ['name', 'type', 'numComponents', 'dimensions', 'filter', 'wrapX', 'wrapY', 'numBuffers', 'clearValue', 'array'];\n\t\tconst requiredKeys = ['name', 'type', 'numComponents', 'dimensions'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPULayer(composer, params)', params.name);\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPULayer(composer, params)', params.name);\n\n\t\tconst { dimensions, type, numComponents } = params;\n\t\tconst { gl } = composer;\n\n\t\t// Save params.\n\t\tthis._composer = composer;\n\t\tthis.name = name;\n\n\t\t// numComponents must be between 1 and 4.\n\t\tif (!isPositiveInteger(numComponents) || numComponents > 4) {\n\t\t\tthrow new Error(`Invalid numComponents: ${JSON.stringify(numComponents)} for GPULayer \"${name}\", must be number in range [1-4].`);\n\t\t}\n\t\tthis.numComponents = numComponents;\n\n\t\t// Set dimensions, may be 1D or 2D.\n\t\tconst { length, width, height } = GPULayer.calcGPULayerSize(dimensions, name, composer.verboseLogging);\n\t\t// We already type checked length, width, and height in calcGPULayerSize.\n\t\tthis._length = length;\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\t// Set filtering - if we are processing a 1D array, default to NEAREST filtering.\n\t\t// Else default to LINEAR (interpolation) filtering for float types and NEAREST for integer types.\n\t\tconst defaultFilter = (length === undefined && (type === FLOAT || type == HALF_FLOAT)) ? LINEAR : NEAREST;\n\t\tconst filter = params.filter !== undefined ? params.filter : defaultFilter;\n\t\tif (!isValidFilter(filter)) {\n\t\t\tthrow new Error(`Invalid filter: ${JSON.stringify(filter)} for GPULayer \"${name}\", must be one of ${JSON.stringify(validFilters)}.`);\n\t\t}\n\t\t// Don't allow LINEAR filtering on integer types, it is not supported.\n\t\tif (filter === LINEAR && !(type === FLOAT || type == HALF_FLOAT)) {\n\t\t\tthrow new Error(`LINEAR filtering is not supported on integer types, please use NEAREST filtering for GPULayer \"${name}\" with type: ${type}.`);\n\t\t}\n\t\tthis.filter = filter;\n\n\t\t// Get wrap types, default to clamp to edge.\n\t\tconst wrapX = params.wrapX !== undefined ? params.wrapX : CLAMP_TO_EDGE;\n\t\tif (!isValidWrap(wrapX)) {\n\t\t\tthrow new Error(`Invalid wrapX: ${JSON.stringify(wrapX)} for GPULayer \"${name}\", must be one of ${JSON.stringify(validWraps)}.`);\n\t\t}\n\t\tthis.wrapX = wrapX;\n\t\tconst wrapY = params.wrapY !== undefined ? params.wrapY : CLAMP_TO_EDGE;\n\t\tif (!isValidWrap(wrapY)) {\n\t\t\tthrow new Error(`Invalid wrapY: ${JSON.stringify(wrapY)} for GPULayer \"${name}\", must be one of ${JSON.stringify(validWraps)}.`);\n\t\t}\n\t\tthis.wrapY = wrapY;\n\n\t\t// Set data type.\n\t\tif (!isValidDataType(type)) {\n\t\t\tthrow new Error(`Invalid type: ${JSON.stringify(type)} for GPULayer \"${name}\", must be one of ${JSON.stringify(validDataTypes)}.`);\n\t\t}\n\t\tthis.type = type;\n\t\tconst internalType = GPULayer.getGPULayerInternalType({\n\t\t\tcomposer,\n\t\t\ttype,\n\t\t\tname,\n\t\t});\n\t\tthis._internalType = internalType;\n\t\t// Set gl texture parameters.\n\t\tconst {\n\t\t\tglFormat,\n\t\t\tglInternalFormat,\n\t\t\tglType,\n\t\t\tglNumChannels,\n\t\t} = GPULayer.getGLTextureParameters({\n\t\t\tcomposer,\n\t\t\tname,\n\t\t\tnumComponents,\n\t\t\tinternalType,\n\t\t});\n\t\tthis._glInternalFormat = glInternalFormat;\n\t\tthis._glFormat = glFormat;\n\t\tthis._glType = glType;\n\t\tthis._glNumChannels = glNumChannels;\n\n\t\t// Set internal filtering/wrap types.\n\t\t// Make sure that we set filter BEFORE setting wrap.\n\t\tconst internalFilter = GPULayer.getGPULayerInternalFilter({ composer, filter, wrapX, wrapY, internalType, name });\n\t\tthis._internalFilter = internalFilter;\n\t\tthis._glFilter = gl[internalFilter];\n\t\tthis._internalWrapX = GPULayer.getGPULayerInternalWrap({ composer, wrap: wrapX, internalFilter, internalType, name });\n\t\tthis._glWrapS = gl[this._internalWrapX];\n\t\tthis._internalWrapY = GPULayer.getGPULayerInternalWrap({ composer, wrap: wrapY, internalFilter, internalType, name });\n\t\tthis._glWrapT = gl[this._internalWrapY];\n\n\t\t// Num buffers is the number of states to store for this data.\n\t\tconst numBuffers = params.numBuffers !== undefined ? params.numBuffers : 1;\n\t\tif (!isPositiveInteger(numBuffers)) {\n\t\t\tthrow new Error(`Invalid numBuffers: ${JSON.stringify(numBuffers)} for GPULayer \"${name}\", must be positive integer.`);\n\t\t}\n\t\tthis.numBuffers = numBuffers;\n\n\t\t// Wait until after type and numComponents has been set to set clearValue.\n\t\tif (params.clearValue !== undefined) {\n\t\t\tthis.clearValue = params.clearValue; // Setter can only be called after this.numComponents has been set.\n\t\t}\n\n\t\tthis._initBuffers(params.array);\n\t}\n\n\t/**\n\t * The width of the GPULayer array.\n\t */\n\t get width() {\n\t\treturn this._width;\n\t}\n\n\t/**\n\t * The height of the GPULayer array.\n\t */\n\tget height() {\n\t\treturn this._height;\n\t}\n\n\t/**\n\t * The length of the GPULayer array (only available to 1D GPULayers).\n\t */\n\tget length() {\n\t\tif (!this._length) {\n\t\t\tthrow new Error(`Cannot access length on 2D GPULayer \"${this.name}\".`);\n\t\t}\n\t\treturn this._length;\n\t}\n\n\t/**\n\t * Returns whether the GPULayer was inited as a 1D array (rather than 2D).\n\t * @returns - true if GPULayer is 1D, else false.\n\t */\n\tis1D() {\n\t\treturn this._length !== undefined;\n\t}\n\n\t/**\n\t * Returns whether the GPULayer was inited as a 2D array (rather than 1D).\n\t * @returns - true if GPULayer is 2D, else false.\n\t */\n\tis2D() {\n\t\treturn !this.is1D();\n\t}\n\n\t/**\n\t * Test whether the current buffer index has override enabled.\n\t * @private\n\t */\n\t_usingTextureOverrideForCurrentBuffer() {\n\t\treturn !!(this._textureOverrides && this._textureOverrides[this.bufferIndex]);\n\t}\n\n\t/**\n\t * Copy contents of current state to another GPULayer.\n\t * TODO: Still testing this.\n\t * @private\n\t */\n\tcopyCurrentStateToGPULayer(layer: GPULayer) {\n\t\tconst { _composer } = this;\n\t\tif (this === layer) throw new Error(`Can't call GPULayer.copyCurrentStateToGPULayer() on self.`);\n\t\tconst copyProgram = _composer._copyProgramForType(this._internalType);\n\t\t_composer.step({\n\t\t\tprogram: copyProgram,\n\t\t\tinput: this,\n\t\t\toutput: layer,\n\t\t});\n\t}\n\t// saveCurrentStateToGPULayer(layer: GPULayer) {\n\t// \t// A method for saving a copy of the current state without a draw call.\n\t// \t// Draw calls are expensive, this optimization helps.\n\t// \tif (this.numBuffers < 2) {\n\t// \t\tthrow new Error(`Can't call GPULayer.saveCurrentStateToGPULayer on GPULayer \"${this.name}\" with less than 2 buffers.`);\n\t// \t}\n\t// \t// Check that texture params are the same.\n\t// \tif (layer.glWrapS !== this.glWrapS || layer.glWrapT !== this.glWrapT ||\n\t// \t\tlayer.wrapS !== this.wrapS || layer.wrapT !== this.wrapT ||\n\t// \t\tlayer.width !== this.width || layer.height !== this.height ||\n\t// \t\tlayer.glFilter !== this.glFilter || layer.filter !== this.filter ||\n\t// \t\tlayer.glNumChannels !== this.glNumChannels || layer.numComponents !== this.numComponents ||\n\t// \t\tlayer.glType !== this.glType || layer.type !== this.type ||\n\t// \t\tlayer.glFormat !== this.glFormat || layer.glInternalFormat !== this.glInternalFormat) {\n\t// \t\t\tthrow new Error(`Incompatible texture params between GPULayers \"${layer.name}\" and \"${this.name}\".`);\n\t// \t}\n\n\t// \t// If we have not already inited overrides array, do so now.\n\t// \tif (!this.textureOverrides) {\n\t// \t\tthis.textureOverrides = [];\n\t// \t\tfor (let i = 0; i < this.numBuffers; i++) {\n\t// \t\t\tthis.textureOverrides.push(undefined);\n\t// \t\t}\n\t// \t}\n\n\t// \t// Check if we already have an override in place.\n\t// \tif (this.textureOverrides[this.bufferIndex]) {\n\t// \t\tthrow new Error(`Can't call GPULayer.saveCurrentStateToGPULayer on GPULayer \"${this.name}\", this GPULayer has not written new state since last call to GPULayer.saveCurrentStateToGPULayer.`);\n\t// \t}\n\t// \tconst { currentState } = this;\n\t// \tthis.textureOverrides[this.bufferIndex] = currentState;\n\t// \t// Swap textures.\n\t// \tthis.buffers[this.bufferIndex].texture = layer.currentState;\n\t// \tlayer._setCurrentStateTexture(currentState);\n\n\t// \t// Bind swapped texture to framebuffer.\n\t// \tconst { gl } = this.composer;\n\t// \tconst { framebuffer, texture } = this.buffers[this.bufferIndex];\n\t// \tif (!framebuffer) throw new Error(`No framebuffer for writable GPULayer \"${this.name}\".`);\n\t// \tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t// \t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D\n\t// \tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\t// \t// Unbind.\n\t// \tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t// }\n\n\t// // This is used internally.\n\t// _setCurrentStateTexture(texture: WebGLTexture) {\n\t// \tthis.buffers[this.bufferIndex].texture = texture;\n\t// }\n\n\t/**\t\n\t * Init GLTexture/GLFramebuffer pairs for reading/writing GPULayer data.\n\t * @private\n\t */\n\tprivate _initBuffers(\n\t\tarrayOrImage?: GPULayerArray | number[] | HTMLImageElement,\n\t) {\n\t\tconst {\n\t\t\tname,\n\t\t\tnumBuffers,\n\t\t\t_composer,\n\t\t\t_glInternalFormat,\n\t\t\t_glFormat,\n\t\t\t_glType,\n\t\t\t_glFilter,\n\t\t\t_glWrapS,\n\t\t\t_glWrapT,\n\t\t\twidth,\n\t\t\theight,\n\t\t} = this;\n\t\tconst { gl, _errorCallback } = _composer;\n\n\t\tlet validatedArrayOrImage: GPULayerArray | HTMLImageElement | null = null;\n\t\tif (isArray(arrayOrImage)) validatedArrayOrImage = GPULayer.validateGPULayerArray(arrayOrImage as GPULayerArray | number[], this);\n\t\telse if (arrayOrImage?.constructor === HTMLImageElement) validatedArrayOrImage = arrayOrImage;\n\t\t// Init a texture for each buffer.\n\t\tfor (let i = 0; i < numBuffers; i++) {\n\t\t\tconst texture = gl.createTexture();\n\t\t\tif (!texture) {\n\t\t\t\t_errorCallback(`Could not init texture for GPULayer \"${name}\": ${gl.getError()}.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, _glWrapS);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, _glWrapT);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, _glFilter);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, _glFilter);\n\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, _glInternalFormat, width, height, 0, _glFormat, _glType, validatedArrayOrImage as any as ArrayBufferView | null);\n\t\t\t\n\t\t\t// Save this buffer to the list.\n\t\t\tthis._buffers.push(texture);\n\t\t}\n\t\t// Unbind.\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t}\n\t\n\t/**\n\t * Get buffer index of the current state.\n\t */\n\tget bufferIndex() {\n\t\treturn this._bufferIndex;\n\t}\n\n\t/**\n\t * Increment buffer index by 1.\n\t */\n\tincrementBufferIndex() {\n\t\tconst { numBuffers } = this;\n\t\tif (numBuffers === 1) return;\n\t\t// Increment bufferIndex.\n\t\tthis._bufferIndex = (this.bufferIndex + 1) % numBuffers;\n\t}\n\n\t/**\n\t * Decrement buffer index by 1.\n\t */\n\t decrementBufferIndex() {\n\t\tconst { numBuffers } = this;\n\t\tif (numBuffers === 1) return;\n\t\t// Decrement bufferIndex.\n\t\tthis._bufferIndex = (this.bufferIndex - 1 + numBuffers) % numBuffers;\n\t}\n\n\t/**\n\t * Get the current state as a GPULayerState object.\n\t */\n\tget currentState() {\n\t\treturn this.getStateAtIndex(this.bufferIndex);\n\t}\n\n\t/**\n\t * Get the current state as a WebGLTexture.\n\t * Used internally.\n\t * @private\n\t */\n\tget _currentTexture() {\n\t\tconst { _buffers, _bufferIndex, _textureOverrides } = this;\n\t\tif (_textureOverrides && _textureOverrides[_bufferIndex]) return _textureOverrides[_bufferIndex]!;\n\t\treturn _buffers[_bufferIndex];\n\t}\n\n\t/**\n\t * Get the previous state as a GPULayerState object (only available for GPULayers with numBuffers > 1).\n\t */\n\tget lastState() {\n\t\tif (this.numBuffers === 1) {\n\t\t\tthrow new Error(`Cannot access lastState on GPULayer \"${this.name}\" with only one buffer.`);\n\t\t}\n\t\treturn this.getStateAtIndex((this.bufferIndex - 1 + this.numBuffers) % this.numBuffers);\n\t}\n\n\t/**\n\t * Get the state at a specified index as a GPULayerState object.\n\t */\n\tgetStateAtIndex(index: number): GPULayerState {\n\t\tconst { numBuffers, _textureOverrides, _buffers } = this;\n\t\tif (index < 0 && index > -numBuffers) {\n\t\t\tindex += numBuffers; // Slightly negative numbers are ok.\n\t\t}\n\t\tif (index < 0 || index >= numBuffers) {\n\t\t\t// We will allow this number to overflow with warning - likely user error.\n\t\t\tconsole.warn(`Out of range buffer index: ${index} for GPULayer \"${this.name}\" with $.numBuffers} buffer${numBuffers > 1 ? 's' : ''}.  Was this intentional?`);\n\t\t\tif (index < 0) {\n\t\t\t\tindex += numBuffers * Math.ceil(Math.abs(index) / numBuffers);\n\t\t\t} else {\n\t\t\t\tindex = index % numBuffers;\n\t\t\t}\n\t\t}\n\t\tlet texture = _buffers[index];\n\t\tif (_textureOverrides && _textureOverrides[index]) texture = _textureOverrides[index]!;\n\t\treturn {\n\t\t\ttexture,\n\t\t\tlayer: this,\n\t\t};\n\t}\n\n\t/**\n\t * Increments the buffer index (if needed).\n\t * @private\n\t */\n\t_prepareForWrite(\n\t\tincrementBufferIndex: boolean,\n\t) {\n\t\tif (incrementBufferIndex) {\n\t\t\tthis.incrementBufferIndex();\n\t\t}\n\n\t\t// We are going to do a data write, if we have overrides enabled, we can remove them.\n\t\tif (this._textureOverrides) {\n\t\t\tthis._textureOverrides[this.bufferIndex] = undefined;\n\t\t}\n\t}\n\n\tsetFromArray(array: GPULayerArray | number[]) {\n\t\tconst {\n\t\t\t_composer,\n\t\t\t_glInternalFormat,\n\t\t\t_glFormat,\n\t\t\t_glType,\n\t\t\twidth,\n\t\t\theight,\n\t\t\t_currentTexture,\n\t\t} = this;\n\t\tconst { gl } = _composer;\n\t\tconst validatedArray = GPULayer.validateGPULayerArray(array, this);\n\t\tgl.bindTexture(gl.TEXTURE_2D, _currentTexture);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, _glInternalFormat, width, height, 0, _glFormat, _glType, validatedArray);\n\t\t// Unbind texture.\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t}\n\n\t// setFromImage(image: HTMLImageElement) {\n\t// \tconst { name, _composer, width, height, _currentTexture, _glInternalFormat, _glFormat, _glType, numComponents, type } = this;\n\t// \tconst { gl } = _composer;\n\t// \t// Check compatibility.\n\t// \tif (!isValidImageType(type)) {\n\t// \t\tthrow new Error(`GPULayer has invalid type ${type} for setFromImage(), valid types are: ${JSON.stringify(validImageTypes)}.`);\n\t// \t}\n\t// \tif (numComponents < 3) {\n\t// \t\tthrow new Error(`GPULayer has invalid numComponents ${numComponents} for setFromImage(), must have either 3 (RGB) or 4 (RGBA) components.`);\n\t// \t}\n\t// \tif (image.width !== width || image.height !== height) {\n\t// \t\tthrow new Error(`Invalid image dimensions [${image.width}, ${image.height}] for GPULayer \"${name}\" with dimensions [${width}, ${height}].  Call GPULayer.resize(width, height, image) instead.`);\n\t// \t}\n\t// \tgl.bindTexture(gl.TEXTURE_2D, _currentTexture);\n\t// \tgl.texImage2D(gl.TEXTURE_2D, 0, _glInternalFormat, width, height, 0, _glFormat, _glType, image as any);\n\t// \t// Unbind texture.\n\t// \tgl.bindTexture(gl.TEXTURE_2D, null);\n\t// }\n\n\tresize(\n\t\tdimensions: number | number[],\n\t\tarrayOrImage?: HTMLImageElement | GPULayerArray | number[],\n\t) {\n\t\tconst { name, _composer } = this;\n\t\tconst { verboseLogging } = _composer;\n\t\tif (verboseLogging) console.log(`Resizing GPULayer \"${name}\" to ${JSON.stringify(dimensions)}.`);\n\t\tconst { length, width, height } = GPULayer.calcGPULayerSize(dimensions, name, verboseLogging);\n\t\tthis._length = length;\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._destroyBuffers();\n\t\tthis._initBuffers(arrayOrImage);\n\t}\n\n\t/**\n\t * Set the clearValue of the GPULayer, which is applied during GPULayer.clear().\n\t */\n\tset clearValue(clearValue: number | number[]) {\n\t\tconst { numComponents, type } = this;\n\t\tif (!isValidClearValue(clearValue, numComponents, type)) {\n\t\t\tthrow new Error(`Invalid clearValue: ${JSON.stringify(clearValue)} for GPULayer \"${this.name}\", expected ${type} or array of ${type} of length ${numComponents}.`);\n\t\t}\n\t\t// Make deep copy if needed.\n\t\tthis._clearValue = isArray(clearValue) ? (clearValue as number[]).slice() : clearValue;\n\t\tthis._clearValueVec4 = undefined;\n\t}\n\n\t/**\n\t * Get the clearValue of the GPULayer.\n\t */\n\tget clearValue() {\n\t\treturn this._clearValue;\n\t}\n\n\t/**\n\t * Get the clearValue of the GPULayer as a vec4, pad with zeros as needed.\n\t */\n\tprivate get clearValueVec4() {\n\t\tlet { _clearValueVec4 } = this;\n\t\tif (!_clearValueVec4) {\n\t\t\tconst { clearValue } = this;\n\t\t\t_clearValueVec4 = [];\n\t\t\tif (isFiniteNumber(clearValue)) {\n\t\t\t\t_clearValueVec4.push(clearValue as number, clearValue as number, clearValue as number, clearValue as number);\n\t\t\t} else {\n\t\t\t\t_clearValueVec4.push(...clearValue as number[]);\n\t\t\t\tfor (let j = _clearValueVec4.length; j < 4; j++) {\n\t\t\t\t\t_clearValueVec4.push(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._clearValueVec4 = _clearValueVec4;\n\t\t}\n\t\treturn _clearValueVec4;\n\t}\n\n\t/**\n\t * Clear all data in GPULayer to GPULayer.clearValue.\n\t * @param applyToAllBuffers - Flag to apply to all buffers of GPULayer, or just the current output buffer.\n\t */\n\tclear(applyToAllBuffers = false) {\n\t\tconst { name, _composer, clearValueVec4, numBuffers, type } = this;\n\t\tconst { verboseLogging } = _composer;\n\t\tif (verboseLogging) console.log(`Clearing GPULayer \"${name}\".`);\n\n\t\tconst program = _composer._setValueProgramForType(type);\n\t\tprogram.setUniform('u_value', clearValueVec4);\n\t\tthis.decrementBufferIndex(); // step() wil increment buffer index before draw, this way we clear in place.\n\t\tconst endIndex = applyToAllBuffers ? numBuffers : 1;\n\t\tfor (let i = 0; i < endIndex; i++) {\n\t\t\t// Write clear value to buffers.\n\t\t\t_composer.step({\n\t\t\t\tprogram,\n\t\t\t\toutput: this,\n\t\t\t});\n\t\t}\n\t\tif (applyToAllBuffers) this.incrementBufferIndex(); // Get us back to the starting index.\n\t}\n\n\tprivate _getValuesSetup() {\n\t\tconst { width, height, _composer, _currentTexture } = this;\n\t\tlet { _valuesRaw } = this;\n\t\tconst { gl } = _composer;\n\n\t\t// In case GPULayer was not the last output written to.\n\t\tbindFrameBuffer(_composer, this, _currentTexture);\n\n\t\tlet { _glNumChannels, _glType, _glFormat, _internalType } = this;\n\t\tswitch (_internalType) {\n\t\t\tcase HALF_FLOAT:\n\t\t\t\tif (gl.FLOAT !== undefined) {\n\t\t\t\t\t// Firefox requires that RGBA/FLOAT is used for readPixels of float16 types.\n\t\t\t\t\t_glNumChannels = 4;\n\t\t\t\t\t_glFormat = gl.RGBA;\n\t\t\t\t\t_glType = gl.FLOAT;\n\t\t\t\t\t_valuesRaw = _valuesRaw || new Float32Array(width * height * _glNumChannels);\n\t\t\t\t} else {\n\t\t\t\t\t_valuesRaw = _valuesRaw || new Uint16Array(width * height * _glNumChannels);\n\t\t\t\t}\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Uint16Array(width * height * glNumChannels);\n\t\t\t\tbreak\n\t\t\tcase FLOAT:\n\t\t\t\t// Chrome and Firefox require that RGBA/FLOAT is used for readPixels of float32 types.\n\t\t\t\t// https://github.com/KhronosGroup/WebGL/issues/2747\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = gl.RGBA;\n\t\t\t\t_valuesRaw = _valuesRaw || new Float32Array(width * height * _glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_BYTE:\n\t\t\t\t// We never hit glslVersion === GLSL1 anymore, see GPULayerHelpers.shouldCastIntTypeAsFloat for more info.\n\t\t\t\t// if (glslVersion === GLSL1) {\n\t\t\t\t// \t// Firefox requires that RGBA/UNSIGNED_BYTE is used for readPixels of unsigned byte types.\n\t\t\t\t// \t_glNumChannels = 4;\n\t\t\t\t// \t_glFormat = gl.RGBA;\n\t\t\t\t// \t_valuesRaw = _valuesRaw || new Uint8Array(width * height * _glNumChannels);\n\t\t\t\t// \tbreak;\n\t\t\t\t// }\n\t\t\t\t// Firefox requires that RGBA_INTEGER/UNSIGNED_INT is used for readPixels of unsigned int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_glType = gl.UNSIGNED_INT;\n\t\t\t\t_valuesRaw = _valuesRaw || new Uint32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Uint8Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_SHORT:\n\t\t\t\t// Firefox requires that RGBA_INTEGER/UNSIGNED_INT is used for readPixels of unsigned int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_glType = gl.UNSIGNED_INT;\n\t\t\t\t_valuesRaw = _valuesRaw || new Uint32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Uint16Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_INT:\n\t\t\t\t// Firefox requires that RGBA_INTEGER/UNSIGNED_INT is used for readPixels of unsigned int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_valuesRaw = _valuesRaw || new Uint32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Uint32Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase BYTE:\n\t\t\t\t// Firefox requires that RGBA_INTEGER/INT is used for readPixels of int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_glType = gl.INT;\n\t\t\t\t_valuesRaw = _valuesRaw || new Int32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Int8Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase SHORT:\n\t\t\t\t// Firefox requires that RGBA_INTEGER/INT is used for readPixels of int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_glType = gl.INT;\n\t\t\t\t_valuesRaw = _valuesRaw || new Int32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Int16Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tcase INT:\n\t\t\t\t// Firefox requires that RGBA_INTEGER/INT is used for readPixels of int types.\n\t\t\t\t_glNumChannels = 4;\n\t\t\t\t_glFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t_valuesRaw = _valuesRaw || new Int32Array(width * height * _glNumChannels);\n\t\t\t\t// // The following works in Chrome.\n\t\t\t\t// _valuesRaw = _valuesRaw || new Int32Array(width * height * glNumChannels);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unsupported internalType ${_internalType} for getValues().`);\n\t\t}\n\t\tthis._valuesRaw = _valuesRaw;\n\t\tif (readyToRead(gl)) {\n\t\t\treturn { _glFormat, _glType, _valuesRaw, _glNumChannels, _internalType };\n\t\t} else {\n\t\t\tthrow new Error(`Unable to read values from Buffer with status: ${gl.checkFramebufferStatus(gl.FRAMEBUFFER)}.`);\n\t\t}\n\t}\n\n\tprivate _getValuesPost(\n\t\t_valuesRaw: Float32Array | Uint16Array | Uint32Array | Int32Array,\n\t\t_glNumChannels: number,\n\t\t_internalType: GPULayerType,\n\t) {\n\t\tconst { width, height, numComponents, type } = this;\n\t\t\n\t\tconst OUTPUT_LENGTH = (this._length ? this._length : width * height) * numComponents;\n\n\t\t// Convert uint16 to float32 if needed.\n\t\tconst handleFloat16Conversion = _internalType === HALF_FLOAT && _valuesRaw.constructor === Uint16Array;\n\t\tlet { _valuesBufferView } = this;\n\t\tif (handleFloat16Conversion && !_valuesBufferView) {\n\t\t\t_valuesBufferView = new DataView((_valuesRaw as Uint16Array).buffer);\n\t\t\tthis._valuesBufferView = _valuesBufferView;\n\t\t}\n\t\t\n\n\t\t// We may use a different internal type than the assigned type of the GPULayer.\n\t\tif (_valuesRaw.length === OUTPUT_LENGTH && arrayConstructorForType(type, true) === _valuesRaw.constructor) {\n\t\t\tthis._values = _valuesRaw;\n\t\t} else if (!this._values) this._values = GPULayer.initArrayForType(type, OUTPUT_LENGTH, true);\n\t\tconst { _values } = this;\n\n\t\t// In some cases glNumChannels may be > numComponents.\n\t\tif (_valuesBufferView || _values !== _valuesRaw || numComponents !== _glNumChannels) {\n\t\t\tfor (let i = 0, length = width * height; i < length; i++) {\n\t\t\t\tconst index1 = i * _glNumChannels;\n\t\t\t\tconst index2 = i * numComponents;\n\t\t\t\tif (index2 >= OUTPUT_LENGTH) break;\n\t\t\t\tfor (let j = 0; j < numComponents; j++) {\n\t\t\t\t\tif (_valuesBufferView) {\n\t\t\t\t\t\t_values[index2 + j] = getFloat16(_valuesBufferView, 2 * (index1 + j), true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_values[index2 + j] = _valuesRaw[index1 + j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn _values;\n\t}\n\n\t/**\n\t * Returns the current values of the GPULayer as a TypedArray.\n\t * @returns - A TypedArray containing current state of GPULayer.\n\t */\n\tgetValues() {\n\t\tconst { width, height, _composer } = this;\n\t\tconst { gl } = _composer;\n\t\tconst { _glFormat, _glType, _valuesRaw, _glNumChannels, _internalType } = this._getValuesSetup();\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels\n\t\tgl.readPixels(0, 0, width, height, _glFormat, _glType, _valuesRaw);\n\t\treturn this._getValuesPost(_valuesRaw, _glNumChannels, _internalType);\n\t}\n\n\t/**\n\t * Non-blocking function to return the current values of the GPULayer as a TypedArray.\n\t * This only works for WebGL2 contexts, will fall back to getValues() if WebGL1 context.\n\t * @returns - A TypedArray containing current state of GPULayer.\n\t */\n\tasync getValuesAsync() {\n\t\tconst { width, height, _composer } = this;\n\t\tconst { gl, isWebGL2 } = _composer;\n\t\tif (!isWebGL2) {\n\t\t\t// Async method is not supported for WebGL1.\n\t\t\treturn this.getValues();\n\t\t}\n\t\tconst { _glFormat, _glType, _valuesRaw, _glNumChannels, _internalType } = this._getValuesSetup();\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels\n\t\tawait readPixelsAsync(gl as WebGL2RenderingContext, 0, 0, width, height, _glFormat, _glType, _valuesRaw);\n\t\treturn this._getValuesPost(_valuesRaw, _glNumChannels, _internalType);\n\t}\n\n\tprivate _getCanvasWithImageData(multiplier?: number) {\n\t\tconst values = this.getValues();\n\t\tconst { width, height, numComponents, type } = this;\n\n\t\tmultiplier = multiplier ||\n\t\t\t((type === FLOAT || type === HALF_FLOAT) ? 255 : 1);\n\t\t\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tconst context = canvas.getContext('2d')!;\n\t\tconst imageData = context.getImageData(0, 0, width, height);\n\t\tconst buffer = imageData.data;\n\t\t// Have to flip the y axis since PNGs are written top to bottom.\n\t\tfor (let y = 0; y < height; y++) {\n\t\t\tfor (let x = 0; x < width; x++) {\n\t\t\t\tconst index = y * width + x;\n\t\t\t\tconst indexFlipped = (height - 1 - y) * width + x;\n\t\t\t\tfor (let i = 0; i < numComponents; i++) {\n\t\t\t\t\tbuffer[4 * indexFlipped + i] = values[numComponents * index + i] * multiplier;\n\t\t\t\t}\n\t\t\t\tif (numComponents === 1) {\n\t\t\t\t\t// Make monochrome.\n\t\t\t\t\tbuffer[4 * indexFlipped + 1] = buffer[4 * indexFlipped];\n\t\t\t\t\tbuffer[4 * indexFlipped + 2] = buffer[4 * indexFlipped];\n\t\t\t\t}\n\t\t\t\tif (numComponents < 4) {\n\t\t\t\t\tbuffer[4 * indexFlipped + 3] = 255; // Set alpha channel to 255.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcontext.putImageData(imageData, 0, 0);\n\t\treturn canvas;\n\t}\n\n\t/**\n\t * Get the current state of this GPULayer as an Image.\n\t * @param params - Image parameters.\n\t * @param params.multiplier - Multiplier to apply to data (defaults to 255 for FLOAT and HALF_FLOAT types, else 1).\n\t*/\n\tgetImage(params?: {\n\t\tmultiplier?: number,\n\t}) {\n\t\tif (params) {\n\t\t\tconst validKeys = ['multiplier'];\n\t\t\tconst keys = Object.keys(params);\n\t\t\tcheckValidKeys(keys, validKeys, 'GPULayer.getImage(params)');\n\t\t}\n\t\tconst canvas = this._getCanvasWithImageData(params && params.multiplier);\n\t\tconst image = new Image();\n\t\timage.src = canvas.toDataURL();\n\t\treturn image;\n\t}\n\n\t/**\n\t * Save the current state of this GPULayer to png.\n\t * @param params - PNG parameters.\n\t * @param params.filename - PNG filename (no extension, defaults to the name of the GPULayer).\n\t * @param params.dpi - PNG dpi (defaults to 72dpi).\n\t * @param params.multiplier - Multiplier to apply to data before saving PNG (defaults to 255 for FLOAT and HALF_FLOAT types, else 1).\n\t * @param params.callback - Optional callback when Blob is ready, default behavior saves the PNG using file-saver.\n\t*/\n\tsavePNG(params: {\n\t\tfilename?: string,\n\t\tdpi?: number,\n\t\tmultiplier?: number,\n\t\tcallback?: (blob: Blob, filename: string) => void,\n\t} = {}) {\n\t\tconst validKeys = ['filename', 'dpi', 'multiplier', 'callback'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPULayer.savePNG(params)');\n\t\t\n\t\tconst { name } = this;\n\t\tconst callback = params.callback || saveAs; // Default to saving the image with file-saver.\n\t\tconst filename = params.filename || name; // Default to the name of this layer.\n\n\t\tconst canvas = this._getCanvasWithImageData(params.multiplier);\n\t\tcanvas.toBlob((blob) => {\n\t\t\tif (!blob) {\n\t\t\t\tconsole.warn(`Problem saving PNG from GPULayer \"${name}\", unable to init blob.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (params.dpi) {\n\t\t\t\tchangeDpiBlob(blob, params.dpi).then((blob: Blob) =>{\n\t\t\t\t\tcallback(blob, `${filename}.png`);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcallback(blob, `${filename}.png`);\n\t\t\t}\n\t\t}, 'image/png');\n\t}\n\n\t/**\n\t * Attach the output buffer of this GPULayer to a Threejs Texture object.\n\t * @param {Texture} texture - Threejs texture object.\n\t */\n\tattachToThreeTexture(texture: Texture) {\n\t\tconst { _composer, numBuffers, currentState, name } = this;\n\t\tconst { _threeRenderer, gl } = _composer;\n\t\tif (!_threeRenderer) {\n\t\t\tthrow new Error('GPUComposer was not inited with a renderer.');\n\t\t}\n\t\t// Link webgl texture to threejs object.\n\t\t// This is not officially supported by threejs.\n\t\tif (numBuffers > 1) {\n\t\t\tthrow new Error(`GPULayer \"${name}\" contains multiple WebGL textures (one for each buffer) that are flip-flopped during compute cycles, please choose a GPULayer with one buffer.  You can copy the current state of this GPULayer to a single buffer GPULayer during your render loop.`);\n\t\t}\n\t\tconst offsetTextureProperties = _threeRenderer.properties.get(texture);\n\t\tgl.deleteTexture(offsetTextureProperties.__webglTexture);\n\t\toffsetTextureProperties.__webglTexture = currentState.texture;\n\t\toffsetTextureProperties.__webglInit = true;\n\t}\n\n\t/**\n\t * Delete this GPULayer's framebuffers and textures.\n\t * @private\n\t */\n\tprivate _destroyBuffers() {\n\t\tconst { _composer, _buffers } = this;\n\t\tconst { gl } = _composer;\n\t\t_buffers.forEach(texture => {\n\t\t\tgl.deleteTexture(texture);\n\t\t\tdisposeFramebuffers(gl, texture);\n\t\t});\n\t\t_buffers.length = 0;\n\n\t\t// These are technically owned by another GPULayer,\n\t\t// so we are not responsible for deleting them from gl context.\n\t\tdelete this._textureOverrides;\n\t}\n\n\t/**\n\t * Create a deep copy of GPULayer with current state copied over.\n\t * @param name - Name of new GPULayer as string.\n\t * @returns - Deep copy of GPULayer.\n\t */\n\tclone(name?: string) {\n\t\t// Make a deep copy.\n\t\treturn this._composer._cloneGPULayer(this, name);\n\t}\n\n\t/**\n\t * Deallocate GPULayer instance and associated WebGL properties.\n\t */\n\tdispose() {\n\t\tconst { name, _composer } = this;\n\t\tconst { gl, verboseLogging } = _composer;\n\n\t\tif (verboseLogging) console.log(`Deallocating GPULayer \"${name}\".`);\n\n\t\tif (!gl) throw new Error(`Must call dispose() on all GPULayers before calling dispose() on GPUComposer.`);\n\t\n\t\tthis._destroyBuffers();\n\t\t// @ts-ignore\n\t\tdelete this._buffers;\n\t\t// @ts-ignore\n\t\tdelete this._composer;\n\n\t\tif (this._values) delete this._values;\n\t\tif (this._valuesRaw) delete this._valuesRaw;\n\t}\n\n\t/** \n\t * These methods are defined in GPULayerHelpers.ts\n\t */\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic initArrayForType(\n\t\ttype: GPULayerType,\n\t\tlength: number,\n\t\thalfFloatsAsFloats?: boolean,\n\t): GPULayerArray;\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic calcGPULayerSize(\n\t\tsize: number | number[],\n\t\tname: string,\n\t\tverboseLogging: boolean,\n\t): { width: number, height: number, length?: number };\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic getGPULayerInternalWrap(\n\t\tparams: {\n\t\t\tcomposer: GPUComposer,\n\t\t\twrap: GPULayerWrap,\n\t\t\tinternalFilter: GPULayerFilter,\n\t\t\tinternalType: GPULayerType,\n\t\t\tname: string,\n\t\t},\n\t): GPULayerWrap;\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic getGPULayerInternalFilter(\n\t\tparams: {\n\t\t\tcomposer: GPUComposer,\n\t\t\tfilter: GPULayerFilter,\n\t\t\twrapX: GPULayerWrap,\n\t\t\twrapY: GPULayerWrap,\n\t\t\tinternalType: GPULayerType,\n\t\t\tname: string,\n\t\t},\n\t): GPULayerFilter;\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic getGLTextureParameters(\n\t\tparams: {\n\t\t\tcomposer: GPUComposer,\n\t\t\tname: string,\n\t\t\tnumComponents: GPULayerNumComponents,\n\t\t\tinternalType: GPULayerType,\n\t\t}\n\t): {\n\t\tglFormat: number,\n\t\tglInternalFormat: number,\n\t\tglType: number,\n\t\tglNumChannels: number,\n\t};\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\n\tstatic getGPULayerInternalType(\n\t\tparams: {\n\t\t\tcomposer: GPUComposer,\n\t\t\ttype: GPULayerType,\n\t\t\tname: string,\n\t\t},\n\t): GPULayerType;\n\t/**\n\t * @private\n\t */\n\t// @ts-ignore\t\n\tstatic validateGPULayerArray(\n\t\tarray: GPULayerArray | number[],\n\t\tlayer: GPULayer,\n\t): GPULayerArray;\n}","import type { GPUComposer } from './GPUComposer';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float\n// Float is provided by default in WebGL2 contexts.\n// This extension implicitly enables the WEBGL_color_buffer_float extension (if supported), which allows rendering to 32-bit floating-point color buffers.\nexport const OES_TEXTURE_FLOAT = 'OES_texture_float';\n// https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_half_float\n// Half float is supported by modern mobile browsers, float not yet supported.\n// Half float is provided by default for Webgl2 contexts.\n// This extension implicitly enables the EXT_color_buffer_half_float extension (if supported), which allows rendering to 16-bit floating point formats.\nexport const OES_TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n// https://www.khronos.org/registry/OpenGL/extensions/OES/OES_texture_float_linear.txt\nexport const OES_TEXTURE_FLOAT_LINEAR = 'OES_texture_float_linear';\nexport const OES_TEXTURE_HAlF_FLOAT_LINEAR = 'OES_texture_half_float_linear';\n// https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture\n// Adds gl.UNSIGNED_SHORT, gl.UNSIGNED_INT types to textImage2D in WebGL1.0\nexport const WEBGL_DEPTH_TEXTURE = 'WEBGL_depth_texture';\n// EXT_COLOR_BUFFER_FLOAT adds ability to render to a variety of floating pt textures.\n// This is needed for the WebGL2 contexts that do not support OES_TEXTURE_FLOAT / OES_TEXTURE_HALF_FLOAT extensions.\n// https://developer.mozilla.org/en-US/docs/Web/API/EXT_color_buffer_float\n// https://stackoverflow.com/questions/34262493/framebuffer-incomplete-attachment-for-texture-with-internal-format\n// https://stackoverflow.com/questions/36109347/framebuffer-incomplete-attachment-only-happens-on-android-w-firefox\nexport const EXT_COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n// On WebGL 2, EXT_COLOR_BUFFER_HALF_FLOAT is an alternative to using the EXT_color_buffer_float extension on platforms\n// that support 16-bit floating point render targets but not 32-bit floating point render targets.\nexport const EXT_COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n// Vertex array extension is used by threejs.\nexport const OES_VERTEX_ARRAY_OBJECT = 'OES_vertex_array_object';\n// Extension to use int32 for indexed geometry for WebGL1.\n// According to WebGLStats nearly all devices support this extension.\n// Fallback to gl.UNSIGNED_SHORT if not available.\nexport const OES_ELEMENT_INDEX_UINT = 'OES_element_index_uint';\n// Derivatives extensions.\nexport const OES_STANDARD_DERIVATIVES = 'OES_standard_derivatives';\n\nexport function getExtension(\n\tcomposer: GPUComposer,\n\textensionName: string,\n\toptional = false,\n) {\n\t// Check if we've already loaded the extension.\n\tif (composer._extensions[extensionName] !== undefined) return composer._extensions[extensionName];\n\n\tconst { gl, _errorCallback, _extensions, verboseLogging } = composer;\n\tlet extension;\n\ttry {\n\t\textension = gl.getExtension(extensionName);\n\t} catch (e) {}\n\tif (extension) {\n\t\t// Cache this extension.\n\t\t_extensions[extensionName] = extension;\n\t\tif (composer.verboseLogging) console.log(`Loaded extension: ${extensionName}.`);\n\t} else {\n\t\t_extensions[extensionName] = false; // Cache the bad extension lookup.\n\t\tif (composer.verboseLogging) console.log(`Unsupported ${optional ? 'optional ' : ''}extension: ${extensionName}.`);\n\t}\n\t// If the extension is not optional, throw error.\n\tif (!extension && !optional) {\n\t\t_errorCallback(`Required extension unsupported by this device / browser: ${extensionName}.`);\n\t}\n\treturn extension;\n}","import { isNumber, isPositiveInteger } from '@amandaghassaei/type-checks';\nimport { setFloat16 } from '@petamoriken/float16';\nimport {\n\tBYTE,\n\tCLAMP_TO_EDGE,\n\tFLOAT,\n\tGPULayerFilter,\n\tGPULayerType,\n\tGPULayerWrap,\n\tHALF_FLOAT,\n\tINT,\n\tNEAREST,\n\tSHORT,\n\tUNSIGNED_BYTE,\n\tUNSIGNED_INT,\n\tUNSIGNED_SHORT,\n\tGLSL3,\n\tGPULayerNumComponents,\n\tGLSL1,\n\tGPULayerArray,\n\tvalidArrayTypes,\n\tMIN_UNSIGNED_BYTE,\n\tMAX_UNSIGNED_BYTE,\n\tMIN_BYTE,\n\tMAX_BYTE,\n\tMIN_UNSIGNED_SHORT,\n\tMAX_UNSIGNED_SHORT,\n\tMIN_SHORT,\n\tMAX_SHORT,\n\tMIN_UNSIGNED_INT,\n\tMAX_UNSIGNED_INT,\n\tMIN_INT,\n\tMAX_INT,\n\tLINEAR,\n\tDEFAULT_PROGRAM_NAME,\n} from './constants';\nimport { arrayConstructorForType } from './conversions';\nimport {\n\tEXT_COLOR_BUFFER_FLOAT,\n\tEXT_COLOR_BUFFER_HALF_FLOAT,\n\tgetExtension,\n\tOES_TEXTURE_FLOAT,\n\tOES_TEXTURE_FLOAT_LINEAR,\n\tOES_TEXTURE_HALF_FLOAT,\n\tOES_TEXTURE_HAlF_FLOAT_LINEAR,\n} from './extensions';\nimport { bindFrameBuffer } from './framebuffers';\nimport type { GPUComposer } from './GPUComposer';\nimport { GPULayer } from './GPULayer';\nimport {\n\tcompileShader,\n\tconvertFragmentShaderToGLSL1,\n\tinitGLProgram,\n\tisIntType,\n\tisUnsignedIntType,\n} from './utils';\n\n// Memoize results.\nconst results = {\n\twriteSupport: {} as { [key: string]: boolean },\n\tfilterWrapSupport: {} as { [key: string]: boolean },\n}\n\n/**\n * Init empty typed array for type, optionally use Float32Array for HALF_FLOAT.\n * @private\n */\nGPULayer.initArrayForType = (\n\ttype: GPULayerType,\n\tlength: number,\n\thalfFloatsAsFloats = false,\n) => {\n\treturn new (arrayConstructorForType(type, halfFloatsAsFloats))(length);\n}\n\n/**\n * Calc 2D size [width, height] for GPU layer given a 1D or 2D size parameter.\n * If 1D size supplied, nearest power of 2 width/height is generated.\n * Also checks that size elements are valid.\n * @private\n */\n\nGPULayer.calcGPULayerSize = (\n\tsize: number | number[],\n\tname: string,\n\tverboseLogging: boolean,\n) => {\n\tif (isNumber(size as number)) {\n\t\tif (!isPositiveInteger(size)) {\n\t\t\tthrow new Error(`Invalid length: ${JSON.stringify(size)} for GPULayer \"${name}\", must be positive integer.`);\n\t\t}\n\t\tconst length = size as number;\n\t\t// Relaxing adherence to power of 2.\n\t\t// // Calc power of two width and height for length.\n\t\t// let exp = 1;\n\t\t// let remainder = length;\n\t\t// while (remainder > 2) {\n\t\t// \texp++;\n\t\t// \tremainder /= 2;\n\t\t// }\n\t\t// const width = Math.pow(2, Math.floor(exp / 2) + exp % 2);\n\t\t// const height = Math.pow(2, Math.floor(exp/2));\n\t\tconst width = Math.ceil(Math.sqrt(length));\n\t\tconst height = Math.ceil(length / width);\n\t\tif (verboseLogging) console.log(`Using [${width}, ${height}] for 1D array of length ${size} in GPULayer \"${name}\".`);\n\t\treturn { width, height, length };\n\t}\n\tconst width = (size as number[])[0];\n\tif (!isPositiveInteger(width)) {\n\t\tthrow new Error(`Invalid width: ${JSON.stringify(width)} for GPULayer \"${name}\", must be positive integer.`);\n\t}\n\tconst height = (size as number[])[1];\n\tif (!isPositiveInteger(height)) {\n\t\tthrow new Error(`Invalid height: ${JSON.stringify(height)} for GPULayer \"${name}\", must be positive integer.`);\n\t}\n\treturn { width, height };\n}\n\n/**\n * Get the GL wrap type to use internally in GPULayer, based on browser support.\n * @private\n */\nGPULayer.getGPULayerInternalWrap = (\n\tparams: {\n\t\tcomposer: GPUComposer,\n\t\twrap: GPULayerWrap,\n\t\tinternalFilter: GPULayerFilter,\n\t\tinternalType: GPULayerType,\n\t\tname: string,\n\t},\n) => {\n\tconst { composer, wrap, internalFilter, internalType } = params;\n\n\t// CLAMP_TO_EDGE is always supported.\n\tif (wrap === CLAMP_TO_EDGE) {\n\t\treturn wrap;\n\t}\n\n\t// Test if wrap/filter combo is actually supported by running some numbers through.\n\tif (testFilterWrap(composer, internalType, internalFilter, wrap)) {\n\t\treturn wrap;\n\t}\n\t// If not, convert to CLAMP_TO_EDGE and polyfill in fragment shader.\n\treturn CLAMP_TO_EDGE;\n\t// REPEAT and MIRROR_REPEAT wrap not supported for non-power of 2 textures in safari.\n\t// I've tested this and it seems that some power of 2 textures will work (512 x 512),\n\t// but not others (1024x1024), so let's just change all WebGL 1.0 to CLAMP.\n\t// Without this, we currently get an error at drawArrays():\n\t// \"WebGL: drawArrays: texture bound to texture unit 0 is not renderable.\n\t// It maybe non-power-of-2 and have incompatible texture filtering or is not\n\t// 'texture complete', or it is a float/half-float type with linear filtering and\n\t// without the relevant float/half-float linear extension enabled.\"\n}\n\n/**\n * Get the GL filter type to use internally in GPULayer, based on browser support.\n * @private\n */\n GPULayer.getGPULayerInternalFilter = (\n\tparams: {\n\t\tcomposer: GPUComposer,\n\t\tfilter: GPULayerFilter,\n\t\twrapX: GPULayerWrap,\n\t\twrapY: GPULayerWrap,\n\t\tinternalType: GPULayerType,\n\t\tname: string,\n\t},\n) => {\n\tlet { filter } = params;\n\tif (filter === NEAREST) {\n\t\t// NEAREST filtering is always supported.\n\t\treturn filter;\n\t}\n\n\tconst { composer, internalType, wrapX, wrapY, name } = params;\n\n\tif (internalType === HALF_FLOAT) {\n\t\tconst extension = getExtension(composer, OES_TEXTURE_HAlF_FLOAT_LINEAR, true)\n\t\t\t|| getExtension(composer, OES_TEXTURE_FLOAT_LINEAR, true);\n\t\tif (!extension || !testFilterWrap(composer, internalType, filter, wrapX) || !testFilterWrap(composer, internalType, filter, wrapY)) {\n\t\t\tconsole.warn(`This browser does not support ${filter} filtering for type ${internalType} and wrap [${wrapX}, ${wrapY}].  Falling back to NEAREST filter for GPULayer \"${name}\" with ${filter} polyfill in fragment shader.`);\n\t\t\tfilter = NEAREST; // Polyfill in fragment shader.\n\t\t}\n\t} if (internalType === FLOAT) {\n\t\tconst extension = getExtension(composer, OES_TEXTURE_FLOAT_LINEAR, true);\n\t\tif (!extension || !testFilterWrap(composer, internalType, filter, wrapX) || !testFilterWrap(composer, internalType, filter, wrapY)) {\n\t\t\tconsole.warn(`This browser does not support ${filter} filtering for type ${internalType} and wrap [${wrapX}, ${wrapY}].  Falling back to NEAREST filter for GPULayer \"${name}\" with ${filter} polyfill in fragment shader.`);\n\t\t\tfilter = NEAREST; // Polyfill in fragment shader.\n\t\t}\n\t}\n\treturn filter;\n}\n\n/**\n * Returns whether to cast int type as floats, as needed by browser.\n * @private\n */\nexport function shouldCastIntTypeAsFloat(\n\tcomposer: GPUComposer,\n\ttype: GPULayerType,\n) {\n\tconst { glslVersion, isWebGL2 } = composer;\n\t// All types are supported by WebGL2 + glsl3.\n\tif (glslVersion === GLSL3 && isWebGL2) return false;\n\t// Int textures (other than UNSIGNED_BYTE) are not supported by WebGL1.0 or glsl1.x.\n\t// https://stackoverflow.com/questions/55803017/how-to-select-webgl-glsl-sampler-type-from-texture-format-properties\n\t// Use HALF_FLOAT/FLOAT instead.\n\t// Some large values of INT and UNSIGNED_INT are not supported unfortunately.\n\t// See tests for more information.\n\t// Update: Even UNSIGNED_BYTE should be cast as float in GLSL1.  I noticed some strange behavior in test:\n\t// setUniform>'should cast/handle uint uniforms for UNSIGNED_BYTE GPULayers' in tests/mocha/GPUProgram and \n\t// getValues>'should return correct values for UNSIGNED_BYTE GPULayer' in tests/mocha/GPULayer\n\treturn type === UNSIGNED_BYTE || type === BYTE || type === SHORT || type === INT || type === UNSIGNED_SHORT || type === UNSIGNED_INT;\n}\n\n/**\n * Returns GLTexture parameters for GPULayer, based on browser support.\n * @private\n */\nGPULayer.getGLTextureParameters = (\n\tparams: {\n\t\tcomposer: GPUComposer,\n\t\tname: string,\n\t\tnumComponents: GPULayerNumComponents,\n\t\tinternalType: GPULayerType,\n\t}\n) => {\n\tconst { composer, name, numComponents, internalType } = params;\n\tconst { gl, glslVersion, isWebGL2 } = composer;\n\t// https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\n\tlet glType: number | undefined,\n\t\tglFormat: number | undefined,\n\t\tglInternalFormat: number | undefined,\n\t\tglNumChannels: number | undefined;\n\n\tif (isWebGL2) {\n\t\tglNumChannels = numComponents;\n\t\t// https://www.khronos.org/registry/webgl/extensions/EXT_color_buffer_float/\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n\t\t// The sized internal format RGBxxx are not color-renderable.\n\t\t// If numComponents == 3 for a writable texture, use RGBA instead.\n\t\t// Page 5 of https://www.khronos.org/files/webgl20-reference-guide.pdf\n\t\t// Update: Some formats (e.g. RGB) may be emulated, causing a performance hit:\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#some_formats_e.g._rgb_may_be_emulated\n\t\t// Prefer to use rgba instead of rgb for all cases (WebGL1 and WebGL2).\n\t\tif (numComponents === 3) {\n\t\t\tglNumChannels = 4;\n\t\t}\n\t\tif (internalType === FLOAT || internalType === HALF_FLOAT) {\n\t\t\t// This will be hit in all cases for GLSL1, now that we have cast UNSIGNED_BYTE types to HALF_FLOAT for GLSL1.\n\t\t\t// See comments in shouldCastIntTypeAsFloat for more information.\n\t\t\tswitch (glNumChannels) {\n\t\t\t\tcase 1:\n\t\t\t\t\tglFormat = (gl as WebGL2RenderingContext).RED;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tglFormat = (gl as WebGL2RenderingContext).RG;\n\t\t\t\t\tbreak;\n\t\t\t\t// case 3:\n\t\t\t\t// \tglFormat = gl.RGB; // We never hit this.\n\t\t\t\t// \tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tglFormat = gl.RGBA;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t}\n\t\t} else {\n\t\t\t// This case will only be hit by GLSL 3.\n\t\t\t// Int textures are not supported in GLSL1.\n\t\t\tswitch (glNumChannels) {\n\t\t\t\tcase 1:\n\t\t\t\t\tglFormat = (gl as WebGL2RenderingContext).RED_INTEGER;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tglFormat = (gl as WebGL2RenderingContext).RG_INTEGER;\n\t\t\t\t\tbreak;\n\t\t\t\t// case 3:\n\t\t\t\t// \tglFormat = (gl as WebGL2RenderingContext).RGB_INTEGER; // We never hit this.\n\t\t\t\t// \tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tglFormat = (gl as WebGL2RenderingContext).RGBA_INTEGER;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t}\n\t\t}\n\t\tswitch (internalType) {\n\t\t\tcase HALF_FLOAT:\n\t\t\t\tglType = (gl as WebGL2RenderingContext).HALF_FLOAT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R16F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG16F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB16F; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA16F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase FLOAT:\n\t\t\t\tglType = (gl as WebGL2RenderingContext).FLOAT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R32F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG32F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB32F; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA32F;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_BYTE:\n\t\t\t\tglType = gl.UNSIGNED_BYTE;\n\t\t\t\tif (glslVersion === GLSL1 && internalType === UNSIGNED_BYTE) {\n\t\t\t\t\tglInternalFormat = glFormat;\n\t\t\t\t} else {\n\t\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R8UI;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG8UI;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t// case 3:\n\t\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB8UI; // We never hit this.\n\t\t\t\t\t\t// \tbreak;\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA8UI;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase BYTE:\n\t\t\t\tglType = gl.BYTE;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R8I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG8I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB8I; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA8I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SHORT:\n\t\t\t\tglType = gl.SHORT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R16I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG16I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB16I; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA16I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_SHORT:\n\t\t\t\tglType = gl.UNSIGNED_SHORT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R16UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG16UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB16UI; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA16UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase INT:\n\t\t\t\tglType = gl.INT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R32I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG32I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB32I; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA32I;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase UNSIGNED_INT:\n\t\t\t\tglType = gl.UNSIGNED_INT;\n\t\t\t\tswitch (glNumChannels) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).R32UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RG32UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// case 3:\n\t\t\t\t\t// \tglInternalFormat = (gl as WebGL2RenderingContext).RGB32UI; // We never hit this.\n\t\t\t\t\t// \tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tglInternalFormat = (gl as WebGL2RenderingContext).RGBA32UI;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported glNumChannels: ${glNumChannels} for GPULayer \"${name}\".`);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unsupported type: \"${internalType}\" for GPULayer \"${name}\".`);\n\t\t}\n\t} else {\n\t\t// WebGL1 case.\n\t\tif (numComponents < 1 || numComponents > 4) {\n\t\t\tthrow new Error(`Unsupported numComponents: ${numComponents} for GPULayer \"${name}\".`);\n\t\t}\n\t\t// Always use 4 channel textures for WebGL1.\n\t\t// Some formats (e.g. RGB) may be emulated, causing a performance hit:\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#some_formats_e.g._rgb_may_be_emulated\n\t\tglNumChannels = 4;\n\t\tglFormat = gl.RGBA;\n\t\tglInternalFormat = gl.RGBA;\n\t\tswitch (internalType) {\n\t\t\tcase FLOAT:\n\t\t\t\tglType = gl.FLOAT;\n\t\t\t\tbreak;\n\t\t\tcase HALF_FLOAT:\n\t\t\t\tglType = (gl as WebGL2RenderingContext).HALF_FLOAT || getExtension(composer, OES_TEXTURE_HALF_FLOAT).HALF_FLOAT_OES as number;\n\t\t\t\tbreak;\n\t\t\t// case UNSIGNED_BYTE:\n\t\t\t// \t// This will never be hit, now that we have cast UNSIGNED_BYTE types to HALF_FLOAT for GLSL1.\n\t\t\t// \t// See comments in shouldCastIntTypeAsFloat for more information.\n\t\t\t// \tglType = gl.UNSIGNED_BYTE;\n\t\t\t// \tbreak;\n\t\t\t// No other types are supported in WebGL1.\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unsupported type: \"${internalType}\" in WebGL 1.0 for GPULayer \"${name}\".`);\n\t\t}\n\t}\n\n\t// Check for missing params.\n\tif (glType === undefined || glFormat === undefined || glInternalFormat === undefined) {\n\t\tconst missingParams = [];\n\t\tif (glType === undefined) missingParams.push('glType');\n\t\tif (glFormat === undefined) missingParams.push('glFormat');\n\t\tif (glInternalFormat === undefined) missingParams.push('glInternalFormat');\n\t\tthrow new Error(`Invalid type: ${internalType} for numComponents: ${numComponents}, unable to init parameter${missingParams.length > 1 ? 's' : ''} ${missingParams.join(', ')} for GPULayer \"${name}\".`);\n\t}\n\tif (glNumChannels === undefined || numComponents < 1 || numComponents > 4 || glNumChannels < numComponents) {\n\t\tthrow new Error(`Invalid numChannels: ${glNumChannels} for numComponents: ${numComponents} for GPULayer \"${name}\".`);\n\t}\n\n\treturn {\n\t\tglFormat,\n\t\tglInternalFormat,\n\t\tglType,\n\t\tglNumChannels,\n\t};\n}\n\n/**\n * Rigorous method for testing FLOAT and HALF_FLOAT write support by attaching texture to framebuffer.\n * @private\n */\nexport function testWriteSupport(\n\tcomposer: GPUComposer,\n\tinternalType: GPULayerType,\n) {\n\tconst { gl, glslVersion, isWebGL2 } = composer;\n\n\t// Memoize results for a given set of inputs.\n\tconst key = `${isWebGL2},${internalType},${glslVersion === GLSL3 ? '3' : '1'}`;\n\tif (results.writeSupport[key] !== undefined) {\n\t\treturn results.writeSupport[key];\n\t}\n\n\tconst texture = gl.createTexture();\n\tif (!texture) {\n\t\tresults.writeSupport[key] = false;\n\t\treturn results.writeSupport[key];\n\t}\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\n\t// Default to most widely supported settings.\n\tconst wrap = gl[CLAMP_TO_EDGE];\n\tconst filter = gl[NEAREST];\n\t// Use non-power of two dimensions to check for more universal support.\n\t// (In case size of GPULayer is changed at a later point).\n\tconst width = 10;\n\tconst height = 10;\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n\n\tconst { glInternalFormat, glFormat, glType } = GPULayer.getGLTextureParameters({\n\t\tcomposer,\n\t\tname: 'testWriteSupport',\n\t\tnumComponents: 1,\n\t\tinternalType,\n\t});\n\tgl.texImage2D(gl.TEXTURE_2D, 0, glInternalFormat, width, height, 0, glFormat, glType, null);\n\n\t// Init a framebuffer for this texture so we can write to it.\n\tconst framebuffer = gl.createFramebuffer();\n\tif (!framebuffer) {\n\t\t// Clear out allocated memory.\n\t\tgl.deleteTexture(texture);\n\t\tresults.writeSupport[key] = false;\n\t\treturn results.writeSupport[key];\n\t}\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D\n\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n\tconst validStatus = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n\t// Clear out allocated memory.\n\tgl.deleteTexture(texture);\n\tgl.deleteFramebuffer(framebuffer);\n\n\tresults.writeSupport[key] = validStatus;\n\treturn results.writeSupport[key];\n}\n\n/**\n * Rigorous method for testing whether a filter/wrap combination is supported\n * by the current browser.  I found that some versions of WebGL2 mobile safari\n * may support the OES_texture_float_linear and EXT_color_buffer_float, but still\n * do not linearly interpolate float textures or wrap only for power-of-two textures.\n * @private\n */\nexport function testFilterWrap(\n\tcomposer: GPUComposer,\n\tinternalType: GPULayerType,\n\tfilter: GPULayerFilter,\n\twrap: GPULayerWrap,\n) {\n\tconst { gl, glslVersion, intPrecision, floatPrecision, _errorCallback, isWebGL2 } = composer;\n\n\t// Memoize results for a given set of inputs.\n\tconst key = `${isWebGL2},${internalType},${filter},${wrap},${glslVersion === GLSL3 ? '3' : '1'}`;\n\tif (results.filterWrapSupport[key] !== undefined) {\n\t\treturn results.filterWrapSupport[key];\n\t}\n\n\tconst texture = gl.createTexture();\n\tif (!texture) {\n\t\tresults.filterWrapSupport[key] = false;\n\t\treturn results.filterWrapSupport[key];\n\t}\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\n\tconst glWrap = gl[wrap];\n\tconst glFilter = gl[filter];\n\t// Use non power of two dimensions to check for more universal support.\n\tconst width = 3;\n\tconst height = 3;\n\tconst numComponents = 1;\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, glWrap);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, glWrap);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, glFilter);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, glFilter);\n\n\tconst { glInternalFormat, glFormat, glType, glNumChannels } = GPULayer.getGLTextureParameters({\n\t\tcomposer,\n\t\tname: 'testFilterWrap',\n\t\tnumComponents,\n\t\tinternalType,\n\t});\n\t// Init texture with values.\n\tconst values = [3, 56.5, 834, -53.6, 0.003, 96.2, 23, 90.2, 32];\n\tlet valuesTyped = GPULayer.initArrayForType(internalType, values.length * glNumChannels, true);\n\tfor (let i = 0; i < values.length; i++) {\n\t\tvaluesTyped[i * glNumChannels] = values[i];\n\t\tvalues[i] = valuesTyped[i * glNumChannels]; // Cast as int/uint if needed.\n\t}\n\tif (internalType === HALF_FLOAT) {\n\t\t// Cast values as Uint16Array for HALF_FLOAT.\n\t\tconst valuesTyped16 = new Uint16Array(valuesTyped.length);\n\t\tconst float16View =  new DataView(valuesTyped16.buffer);\n\t\tfor (let i = 0; i < valuesTyped.length; i++) {\n\t\t\tsetFloat16(float16View, 2 * i, valuesTyped[i], true);\n\t\t}\n\t\tvaluesTyped = valuesTyped16;\n\t}\n\tgl.texImage2D(gl.TEXTURE_2D, 0, glInternalFormat, width, height, 0, glFormat, glType, valuesTyped);\n\n\t// Init a GPULayer to write to.\n\t// Must use CLAMP_TO_EDGE/NEAREST on this GPULayer to avoid infinite loop.\n\tconst output = new GPULayer(composer, {\n\t\tname: 'testFloatLinearFiltering-output',\n\t\ttype: internalType,\n\t\tnumComponents,\n\t\tdimensions: [width, height],\n\t\twrapX: CLAMP_TO_EDGE,\n\t\twrapY: CLAMP_TO_EDGE,\n\t\tfilter: NEAREST,\n\t});\n\n\tconst offset = filter === LINEAR ? 0.5 : 1;\n\t// Run program to perform linear filter.\n\tconst programName = 'testFilterWrap-program';\n\tlet fragmentShaderSource = `\nin vec2 v_uv;\nuniform vec2 u_offset;\n#ifdef GPUIO_INT\n\tuniform isampler2D u_input;\n\tout int out_result;\n#endif\n#ifdef GPUIO_UINT\n\tuniform usampler2D u_input;\n\tout uint out_result;\n#endif\n#ifdef GPUIO_FLOAT\n\tuniform sampler2D u_input;\n\tout float out_result;\n#endif\nvoid main() {\n\tout_result = texture(u_input, v_uv + offset).x;\n}`;\n\tif (glslVersion !== GLSL3) {\n\t\tfragmentShaderSource = convertFragmentShaderToGLSL1(fragmentShaderSource, programName)[0];\n\t}\n\tconst fragmentShader = compileShader(\n\t\tgl,\n\t\tglslVersion,\n\t\tintPrecision,\n\t\tfloatPrecision,\n\t\tfragmentShaderSource,\n\t\tgl.FRAGMENT_SHADER,\n\t\tprogramName,\n\t\t_errorCallback,\n\t\t{\n\t\t\toffset: `vec2(${offset / width}, ${offset / height})`,\n\t\t\t[isUnsignedIntType(internalType) ? 'GPUIO_UINT' : (isIntType(internalType) ? 'GPUIO_INT': 'GPUIO_FLOAT')]: '1',\n\t\t},\n\t\tundefined,\n\t\ttrue,\n\t);\n\n\tfunction wrapValue(val: number, max: number) {\n\t\tif (wrap === CLAMP_TO_EDGE) return Math.max(0, Math.min(max - 1, val));\n\t\treturn (val + max) % max;\n\t}\n\n\tconst vertexShader = composer._getVertexShader(DEFAULT_PROGRAM_NAME, '', {}, programName);\n\tif (vertexShader && fragmentShader) {\n\t\tconst program = initGLProgram(gl, vertexShader, fragmentShader, programName, _errorCallback);\n\t\tif (program) {\n\t\t\t// Draw setup.\n\t\t\toutput._prepareForWrite(false);\n\t\t\tbindFrameBuffer(composer, output, output._currentTexture);\n\t\t\tgl.viewport(0, 0, width, height);\n\t\t\tgl.useProgram(program);\n\t\t\t// Bind texture.\n\t\t\tgl.activeTexture(gl.TEXTURE0 );\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\t// Set uniforms.\n\t\t\tgl.uniform2fv(gl.getUniformLocation(program, 'u_gpuio_scale'), [1, 1]);\n\t\t\tgl.uniform2fv(gl.getUniformLocation(program, 'u_gpuio_translation'), [0, 0]);\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, composer._getQuadPositionsBuffer());\n\t\t\tcomposer._setPositionAttribute(program, programName);\n\n\t\t\t// Draw.\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t\tgl.disable(gl.BLEND);\n\n\t\t\tconst filtered = output.getValues();\n\t\t\tlet supported = true;\n\t\t\tconst tol = isIntType(internalType) ? 0 : (internalType === HALF_FLOAT ? 1e-2 : 1e-4);\n\t\t\tfor (let x = 0; x < width; x++) {\n\t\t\t\tfor (let y = 0; y < height; y++) {\n\t\t\t\t\tlet expected;\n\t\t\t\t\tif (filter === LINEAR) {\n\t\t\t\t\t\texpected = (values[y * width + x] +\n\t\t\t\t\t\t\tvalues[y * width + wrapValue(x + 1, width)] +\n\t\t\t\t\t\t\tvalues[wrapValue(y + 1, height) * width + x] +\n\t\t\t\t\t\t\tvalues[wrapValue(y + 1, height) * width + wrapValue(x + 1, width)]) / 4;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst _x = wrapValue(x + offset, width);\n\t\t\t\t\t\tconst _y = wrapValue(y + offset, height);\n\t\t\t\t\t\texpected = values[_y * width + _x];\n\t\t\t\t\t}\n\t\t\t\t\tconst i = y * width + x;\n\t\t\t\t\tif (Math.abs((expected - filtered[i]) / expected) > tol) {\n\t\t\t\t\t\tsupported = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tresults.filterWrapSupport[key] = supported;\n\t\t\t// Clear out allocated memory.\n\t\t\tgl.deleteProgram(program);\n\t\t} else {\n\t\t\tresults.filterWrapSupport[key] = false;\n\t\t}\n\t\t// Clear out allocated memory.\n\t\t// vertexShader belongs to composer, don't delete it.\n\t\tgl.deleteShader(fragmentShader);\n\t} else {\n\t\tresults.filterWrapSupport[key] = false;\n\t}\n\t// Clear out allocated memory.\n\toutput.dispose();\n\tgl.deleteTexture(texture);\n\treturn results.filterWrapSupport[key];\n}\n\n/**\n * Get the GL type to use internally in GPULayer, based on browser support.\n * @private\n * Exported here for testing purposes.\n */\nGPULayer.getGPULayerInternalType = (\n\tparams: {\n\t\tcomposer: GPUComposer,\n\t\ttype: GPULayerType,\n\t\tname: string,\n\t},\n) => {\n\tconst { composer, name } = params;\n\tconst { _errorCallback, isWebGL2 } = composer;\n\tconst { type } = params;\n\tlet internalType = type;\n\t// Check if int types are supported.\n\tconst intCast = shouldCastIntTypeAsFloat(composer, type);\n\tif (intCast) {\n\t\tif (internalType === UNSIGNED_BYTE || internalType === BYTE) {\n\t\t\t// Integers between -2048 and +2048 can be exactly represented by half float.\n\t\t\tinternalType = HALF_FLOAT;\n\t\t} else {\n\t\t\t// Integers between 0 and 16777216 can be exactly represented by float32 (also applies for negative integers between −16777216 and 0)\n\t\t\t// This is sufficient for UNSIGNED_SHORT and SHORT types.\n\t\t\t// Large UNSIGNED_INT and INT cannot be represented by FLOAT type.\n\t\t\tconsole.warn(`Falling back ${internalType} type to FLOAT type for glsl1.x support for GPULayer \"${name}\".\nLarge UNSIGNED_INT or INT with absolute value > 16,777,216 are not supported, on mobile UNSIGNED_INT, INT, UNSIGNED_SHORT, and SHORT with absolute value > 2,048 may not be supported.`);\n\t\t\tinternalType = FLOAT;\n\t\t}\n\t}\n\n\t// Check if float textures supported.\n\tif (!isWebGL2) {\n\t\tif (internalType === FLOAT) {\n\t\t\t// The OES_texture_float extension implicitly enables WEBGL_color_buffer_float extension (for writing).\n\t\t\tconst extension = getExtension(composer, OES_TEXTURE_FLOAT, true);\n\t\t\tif (extension) {\n\t\t\t\t// https://stackoverflow.com/questions/17476632/webgl-extension-support-across-browsers\n\t\t\t\t// Rendering to a floating-point texture may not be supported, even if the OES_texture_float extension\n\t\t\t\t// is supported. Typically, this fails on mobile hardware. To check if this is supported, you have to\n\t\t\t\t// call the WebGL checkFramebufferStatus() function after attempting to attach texture to framebuffer.\n\t\t\t\tconst valid = testWriteSupport(composer, internalType);\n\t\t\t\tif (!valid) {\n\t\t\t\t\tconsole.warn(`FLOAT not supported for writing operations in this browser, falling back to HALF_FLOAT type for GPULayer \"${name}\".`);\n\t\t\t\t\tinternalType = HALF_FLOAT;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(`FLOAT not supported in this browser, falling back to HALF_FLOAT type for GPULayer \"${name}\".`);\n\t\t\t\tinternalType = HALF_FLOAT;\n\t\t\t}\n\t\t}\n\t\t// Must support at least half float if using a float type.\n\t\tif (internalType === HALF_FLOAT) {\n\t\t\t// The OES_texture_half_float extension implicitly enables EXT_color_buffer_half_float extension (for writing).\n\t\t\tgetExtension(composer, OES_TEXTURE_HALF_FLOAT, true);\n\t\t\t// FYI, very old safari issues: https://stackoverflow.com/questions/54248633/cannot-create-half-float-oes-texture-from-uint16array-on-ipad\n\t\t\tconst valid = testWriteSupport(composer, internalType);\n\t\t\t// May still be ok for read-only, but this will affect the ability to call getValues() and savePNG().\n\t\t\t// We'll let it pass for now.\n\t\t\tif (!valid) {\n\t\t\t\tconsole.warn(`This browser does not support writing to HALF_FLOAT textures.`);\n\t\t\t\t// _errorCallback(`This browser does not support writing to HALF_FLOAT textures.`);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// For writable webGL2 contexts, load EXT_color_buffer_float/EXT_color_buffer_half_float extension.\n\t\tif (internalType === FLOAT) {\n\t\t\tconst extension = getExtension(composer, EXT_COLOR_BUFFER_FLOAT, true);\n\t\t\tif (!extension) {\n\t\t\t\tconsole.warn(`FLOAT not supported in this browser, falling back to HALF_FLOAT type for GPULayer \"${name}\".`);\n\t\t\t\tinternalType = HALF_FLOAT;\n\t\t\t} else {\n\t\t\t\t// Test attaching texture to framebuffer to be sure float writing is supported.\n\t\t\t\tconst valid = testWriteSupport(composer, internalType);\n\t\t\t\tif (!valid) {\n\t\t\t\t\tconsole.warn(`FLOAT not supported for writing operations in this browser, falling back to HALF_FLOAT type for GPULayer \"${name}\".`);\n\t\t\t\t\tinternalType = HALF_FLOAT;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (internalType === HALF_FLOAT) {\n\t\t\t// On WebGL 2, EXT_color_buffer_half_float is an alternative to using the EXT_color_buffer_float extension\n\t\t\t// on platforms that support 16-bit floating point render targets but not 32-bit floating point render targets.\n\t\t\tconst halfFloatExt = getExtension(composer, EXT_COLOR_BUFFER_HALF_FLOAT, true);\n\t\t\tif (!halfFloatExt) {\n\t\t\t\t// Some versions of Firefox (e.g. Firefox v104 on Mac) do not support EXT_COLOR_BUFFER_HALF_FLOAT,\n\t\t\t\t// but EXT_COLOR_BUFFER_FLOAT will work instead.\n\t\t\t\tgetExtension(composer, EXT_COLOR_BUFFER_FLOAT, true);\n\t\t\t}\n\t\t\t// Test attaching texture to framebuffer to be sure half float writing is supported.\n\t\t\tconst valid = testWriteSupport(composer, internalType);\n\t\t\t// May still be ok for read-only, but this will affect the ability to call getValues() and savePNG().\n\t\t\t// We'll let it pass for now.\n\t\t\tif (!valid) {\n\t\t\t\tconsole.warn(`This browser does not support writing to HALF_FLOAT textures.`);\n\t\t\t\t_errorCallback(`This browser does not support writing to HALF_FLOAT textures.`);\n\t\t\t}\n\t\t}\n\t}\n\treturn internalType;\n}\n\n/**\n * Min and max values for types.\n * @private\n */\nexport function minMaxValuesForType(type: GPULayerType) {\n\t// Get min and max values for int types.\n\tlet min = -Infinity;\n\tlet max = Infinity;\n\tswitch(type) {\n\t\tcase UNSIGNED_BYTE:\n\t\t\tmin = MIN_UNSIGNED_BYTE;\n\t\t\tmax = MAX_UNSIGNED_BYTE;\n\t\t\tbreak;\n\t\tcase BYTE:\n\t\t\tmin = MIN_BYTE;\n\t\t\tmax = MAX_BYTE;\n\t\t\tbreak;\n\t\tcase UNSIGNED_SHORT:\n\t\t\tmin = MIN_UNSIGNED_SHORT;\n\t\t\tmax = MAX_UNSIGNED_SHORT;\n\t\t\tbreak;\n\t\tcase SHORT:\n\t\t\tmin = MIN_SHORT;\n\t\t\tmax = MAX_SHORT;\n\t\t\tbreak;\n\t\tcase UNSIGNED_INT:\n\t\t\tmin = MIN_UNSIGNED_INT;\n\t\t\tmax = MAX_UNSIGNED_INT;\n\t\t\tbreak;\n\t\tcase INT:\n\t\t\tmin = MIN_INT;\n\t\t\tmax = MAX_INT;\n\t\t\tbreak;\n\t}\n\treturn {\n\t\tmin, max,\n\t};\n}\n\n/**\n * Recasts typed array to match GPULayer.internalType.\n * @private\n */\nGPULayer.validateGPULayerArray = (array: GPULayerArray | number[], layer: GPULayer) => {\n\tconst { numComponents, width, height, name } = layer;\n\tconst glNumChannels = layer._glNumChannels;\n\tconst internalType = layer._internalType;\n\tconst length = layer.is1D() ? layer.length : null;\n\n\t// Check that data is correct length (user error).\n\tif (array.length !== width * height * numComponents) { // Either the correct length for WebGLTexture size\n\t\tif (!length || (length &&  array.length !== length * numComponents)) { // Of the correct length for 1D array.\n\t\t\tthrow new Error(`Invalid data length: ${array.length} for GPULayer \"${name}\" of ${length ? `length ${length} and ` : ''}dimensions: [${width}, ${height}] and numComponents: ${numComponents}.`);\n\t\t}\n\t}\n\n\t// Get array type to figure out if we need to type cast.\n\t// For webgl1.0 we may need to cast an int type to a FLOAT or HALF_FLOAT.\n\tlet shouldTypeCast = false;\n\tswitch(array.constructor) {\n\t\tcase Array:\n\t\t\tshouldTypeCast = true;\n\t\t\tbreak;\n\t\tcase Float32Array:\n\t\t\tshouldTypeCast = internalType !== FLOAT;\n\t\t\tbreak;\n\t\tcase Uint8Array:\n\t\t\tshouldTypeCast = internalType !== UNSIGNED_BYTE;\n\t\t\tbreak;\n\t\tcase Int8Array:\n\t\t\tshouldTypeCast = internalType !== BYTE;\n\t\t\tbreak;\n\t\tcase Uint16Array:\n\t\t\t// User may have converted to HALF_FLOAT already.\n\t\t\t// We need to add this check in case type is UNSIGNED_SHORT and internal type is HALF_FLOAT.\n\t\t\t// (This can happen for some WebGL1 contexts.)\n\t\t\t// if (type === HALF_FLOAT) {\n\t\t\t// \tshouldTypeCast = internalType !== HALF_FLOAT;\n\t\t\t// \t// In order to complete this, we will also need to handle converting from Uint16Array to some other type.\n\t\t\t// \t// Are there cases where HALF_FLOAT is not supported?\n\t\t\t// } else {\n\t\t\t\tshouldTypeCast = internalType !== UNSIGNED_SHORT\n\t\t\t// }\n\t\t\tbreak;\n\t\tcase Int16Array:\n\t\t\tshouldTypeCast = internalType !== SHORT;\n\t\t\tbreak;\n\t\tcase Uint32Array:\n\t\t\tshouldTypeCast = internalType !== UNSIGNED_INT;\n\t\t\tbreak;\n\t\tcase Int32Array:\n\t\t\tshouldTypeCast = internalType !== INT;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid array type: ${array.constructor.name} for GPULayer \"${name}\", please use one of [${validArrayTypes.map(constructor => constructor.name).join(', ')}].`);\n\t}\n\n\t// Get min and max values for internalType.\n\tconst { min, max } = minMaxValuesForType(internalType);\n\n\t// Then check if array needs to be lengthened.\n\t// This could be because glNumChannels !== numComponents or because length !== width * height.\n\tconst arrayLength = width * height * glNumChannels;\n\tconst shouldResize = array.length !== arrayLength;\n\t\t\n\tlet validatedArray = array as GPULayerArray;\n\tif (shouldTypeCast || shouldResize) {\n\t\tvalidatedArray = GPULayer.initArrayForType(internalType, arrayLength);\n\t\t// Fill new data array with old data.\n\t\t// We have to handle the case of Float16 specially by converting data to Uint16Array.\n\t\tconst view = (internalType === HALF_FLOAT && shouldTypeCast) ? new DataView(validatedArray.buffer) : null;\n\t\tfor (let i = 0, _len = array.length / numComponents; i < _len; i++) {\n\t\t\tfor (let j = 0; j < numComponents; j++) {\n\t\t\t\tconst origValue = array[i * numComponents + j];\n\t\t\t\tlet value = origValue;\n\t\t\t\tlet clipped = false;\n\t\t\t\tif (value < min) {\n\t\t\t\t\tvalue = min;\n\t\t\t\t\tclipped = true;\n\t\t\t\t} else if (value > max) {\n\t\t\t\t\tvalue = max;\n\t\t\t\t\tclipped = true;\n\t\t\t\t}\n\t\t\t\tif (clipped) {\n\t\t\t\t\tconsole.warn(`Clipping out of range value ${origValue} to ${value} for GPULayer \"${name}\" with internal type ${internalType}.`);\n\t\t\t\t}\n\t\t\t\tconst index = i * glNumChannels + j;\n\t\t\t\tif (view) {\n\t\t\t\t\tsetFloat16(view, 2 * index, value, true);\n\t\t\t\t} else {\n\t\t\t\t\tvalidatedArray[index] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn validatedArray;\n}","/**\n * These are the parts of threejs Vector4 that we need.\n * Used internally.\n * @private\n */\nexport class Vector4 {\n\tx: number;\n\ty: number;\n\tz: number;\n\tw: number;\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\t}\n\tget width() {\n\t\treturn this.z;\n\t}\n\tget height() {\n\t\treturn this.w;\n\t}\n\tcopy(v: Vector4) {\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = v.w;\n\t\treturn this;\n\t}\n}","import {\n\tGPUIO_VS_UV_ATTRIBUTE,\n\tGPUIO_VS_NORMAL_ATTRIBUTE,\n} from '../../constants';\n\nexport const DEFAULT_VERT_SHADER_SOURCE = `\nin vec2 a_gpuio_position;\n#ifdef ${GPUIO_VS_UV_ATTRIBUTE}\n\tin vec2 a_gpuio_uv;\n#endif\n#ifdef ${GPUIO_VS_NORMAL_ATTRIBUTE}\n\tin vec2 a_gpuio_normal;\n#endif\n\nuniform vec2 u_gpuio_scale;\nuniform vec2 u_gpuio_translation;\n\nout vec2 v_uv;\nout vec2 v_uv_local;\n#ifdef ${GPUIO_VS_NORMAL_ATTRIBUTE}\n\tout vec2 v_normal;\n#endif\n\nvoid main() {\n\t// Optional varyings.\n\t#ifdef ${GPUIO_VS_UV_ATTRIBUTE}\n\t\tv_uv_local = a_gpuio_uv;\n\t#else\n\t\tv_uv_local = 0.5 * (a_gpuio_position + 1.0);\n\t#endif\n\t#ifdef ${GPUIO_VS_NORMAL_ATTRIBUTE}\n\t\tv_normal = a_gpuio_normal;\n\t#endif\n\n\t// Apply transformations.\n\tvec2 position = u_gpuio_scale * a_gpuio_position + u_gpuio_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_uv = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}`;","export const VERTEX_SHADER_HELPERS_SOURCE = `\n/**\n * Create UV coordinates from a 1D index for data stored in a texture of size \"dimensions\".\n */\nvec2 uvFromIndex(const float index, const vec2 dimensions) {\n\tfloat y = floor((index + 0.5) / dimensions.x);\n\tfloat x = floor(index - y * dimensions.x + 0.5);\n\treturn vec2(x + 0.5, y + 0.5) / dimensions;\n}\nvec2 uvFromIndex(const int index, const vec2 dimensions) {\n\tint width = int(dimensions.x);\n\tint y = index / width;\n\tint x = index - y * width;\n\treturn vec2(float(x) + 0.5, float(y) + 0.5) / dimensions;\n}\nvec2 uvFromIndex(const float index, const ivec2 dimensions) {\n\tfloat width = float(dimensions.x);\n\tfloat y = floor((index + 0.5) / width);\n\tfloat x = floor(index - y * width + 0.5);\n\treturn vec2(x + 0.5, y + 0.5) / vec2(dimensions);\n}\nvec2 uvFromIndex(const int index, const ivec2 dimensions) {\n\tint y = index / dimensions.x;\n\tint x = index - y * dimensions.x;\n\treturn vec2(float(x) + 0.5, float(y) + 0.5) / vec2(dimensions);\n}`\n","import {\n\tGPUIO_VS_INDEXED_POSITIONS, GPUIO_VS_POSITION_W_ACCUM, GPUIO_VS_WRAP_X, GPUIO_VS_WRAP_Y,\n} from '../../constants';\nimport { VERTEX_SHADER_HELPERS_SOURCE } from './VertexShaderHelpers';\n\nexport const LAYER_LINES_VERTEX_SHADER_SOURCE = `\n${VERTEX_SHADER_HELPERS_SOURCE}\n\n#if (__VERSION__ != 300 || ${GPUIO_VS_INDEXED_POSITIONS} == 1)\n\t// Cannot use int vertex attributes.\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n\tin float a_gpuio_index;\n#endif\n\nuniform sampler2D u_gpuio_positions; // Texture lookup with position data.\nuniform vec2 u_gpuio_positionsDimensions;\nuniform vec2 u_gpuio_scale;\n\nout vec2 v_uv;\nout vec2 v_lineWrapping; // Use this to test if line is only half wrapped and should not be rendered.\nflat out int v_index;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\t#if (__VERSION__ != 300 || ${GPUIO_VS_INDEXED_POSITIONS} == 1)\n\t\tvec2 positionUV = uvFromIndex(a_gpuio_index, u_gpuio_positionsDimensions);\n\t\tv_index = int(a_gpuio_index);\n\t#else\n\t\tvec2 positionUV = uvFromIndex(gl_VertexID, u_gpuio_positionsDimensions);\n\t\tv_index = gl_VertexID;\n\t#endif\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t#ifdef ${GPUIO_VS_POSITION_W_ACCUM}\n\t\t// We have packed a 2D displacement with the position.\n\t\tvec4 positionData = texture(u_gpuio_positions, positionUV);\n\t\t// position = first two components plus last two components (optional accumulation buffer).\n\t\tv_uv = (positionData.rg + positionData.ba) * u_gpuio_scale;\n\t#else\n\t\tv_uv = texture(u_gpuio_positions, positionUV).rg  * u_gpuio_scale;\n\t#endif\n\n\t// Wrap if needed.\n\tv_lineWrapping = vec2(0.0);\n\t#ifdef ${GPUIO_VS_WRAP_X}\n\t\tv_lineWrapping.x = max(step(1.0, v_uv.x), step(v_uv.x, 0.0));\n\t\tv_ux.x = fract(v_uv.x + 1.0);\n\t#endif\n\t#ifdef ${GPUIO_VS_WRAP_Y}\n\t\tv_lineWrapping.y = max(step(1.0, v_uv.y), step(v_uv.y, 0.0));\n\t\tv_ux.y = fract(v_uv.y + 1.0);\n\t#endif\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_uv * 2.0 - 1.0;\n\n\tgl_Position = vec4(position, 0, 1);\n}`;","import {\n\tGPUIO_VS_POSITION_W_ACCUM, GPUIO_VS_WRAP_X, GPUIO_VS_WRAP_Y,\n} from '../../constants';\nimport { VERTEX_SHADER_HELPERS_SOURCE } from './VertexShaderHelpers';\n\nexport const LAYER_POINTS_VERTEX_SHADER_SOURCE = `\n${VERTEX_SHADER_HELPERS_SOURCE}\n\n#if (__VERSION__ != 300)\n\t// Cannot use int vertex attributes.\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n\tin float a_gpuio_index;\n#endif\n\nuniform sampler2D u_gpuio_positions; // Texture lookup with position data.\nuniform vec2 u_gpuio_positionsDimensions;\nuniform vec2 u_gpuio_scale;\nuniform float u_gpuio_pointSize;\n\nout vec2 v_uv;\nout vec2 v_uv_position;\nout vec2 v_position;\nflat out int v_index;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\t#if (__VERSION__ == 300)\n\t\tv_uv_position = uvFromIndex(gl_VertexID, u_gpuio_positionsDimensions);\n\t\tv_index = gl_VertexID;\n\t#else\n\t\tv_uv_position = uvFromIndex(a_gpuio_index, u_gpuio_positionsDimensions);\n\t\tv_index = int(a_gpuio_index);\n\t#endif\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t#ifdef ${GPUIO_VS_POSITION_W_ACCUM}\n\t\t// We have packed a 2D displacement with the position.\n\t\tvec4 positionData = texture(u_gpuio_positions, v_uv_position);\n\t\t// position = first two components plus last two components (optional accumulation buffer).\n\t\tv_position = positionData.rg + positionData.ba;\n\t\tv_uv = v_position * u_gpuio_scale;\n\t#else\n\t\tv_position = texture(u_gpuio_positions, v_uv_position).rg;\n\t\tv_uv = v_position * u_gpuio_scale;\n\t#endif\n\n\t// Wrap if needed.\n\t#ifdef ${GPUIO_VS_WRAP_X}\n\t\tv_uv.x = fract(v_uv.x + ceil(abs(v_uv.x)));\n\t#endif\n\t#ifdef ${GPUIO_VS_WRAP_Y}\n\t\tv_uv.y = fract(v_uv.y + ceil(abs(v_uv.y)));\n\t#endif\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_uv * 2.0 - 1.0;\n\n\tgl_PointSize = u_gpuio_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}`;","import { VERTEX_SHADER_HELPERS_SOURCE } from './VertexShaderHelpers';\n\nexport const LAYER_VECTOR_FIELD_VERTEX_SHADER_SOURCE = `\n${VERTEX_SHADER_HELPERS_SOURCE}\n\n#if (__VERSION__ != 300)\n\t// Cannot use int vertex attributes.\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n\tin float a_gpuio_index;\n#endif\n\nuniform sampler2D u_gpuio_vectors; // Texture lookup with vector data.\nuniform vec2 u_gpuio_dimensions;\nuniform vec2 u_gpuio_scale;\n\nout vec2 v_uv;\nflat out int v_index;\n\nvoid main() {\n\t#if (__VERSION__ == 300)\n\t\t// Divide index by 2.\n\t\tint index = gl_VertexID / 2;\n\t\tv_index = index;\n\t#else\n\t\t// Divide index by 2.\n\t\tfloat index = floor((a_gpuio_index + 0.5) / 2.0);\n\t\tv_index = int(index);\n\t#endif\n\n\t// Calculate a uv based on the vertex index attribute.\n\tv_uv = uvFromIndex(index, u_gpuio_dimensions);\n\t#if (__VERSION__ == 300)\n\t\t// Add vector displacement if needed.\n\t\tv_uv += float(gl_VertexID - 2 * index) * texture(u_gpuio_vectors, v_uv).xy * u_gpuio_scale;\n\t#else\n\t\t// Add vector displacement if needed.\n\t\tv_uv += (a_gpuio_index - 2.0 * index) * texture(u_gpuio_vectors, v_uv).xy * u_gpuio_scale;\n\t#endif\n\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_uv * 2.0 - 1.0;\n\n\tgl_Position = vec4(position, 0, 1);\n}`;","import {\n\tGPUIO_VS_POSITION_W_ACCUM,\n} from '../../constants';\nimport { VERTEX_SHADER_HELPERS_SOURCE } from './VertexShaderHelpers';\n\nexport const LAYER_MESH_VERTEX_SHADER_SOURCE = `\n${VERTEX_SHADER_HELPERS_SOURCE}\n\n#if (__VERSION__ != 300)\n\t// Cannot use int vertex attributes.\n\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n\tin float a_gpuio_index;\n#endif\n\nuniform sampler2D u_gpuio_positions; // Texture lookup with position data.\nuniform vec2 u_gpuio_positionsDimensions;\nuniform vec2 u_gpuio_scale;\n\nout vec2 v_uv;\nout vec2 v_uv_position;\nout vec2 v_position;\nflat out int v_index;\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\t#if (__VERSION__ == 300)\n\t\tv_uv_position = uvFromIndex(gl_VertexID, u_gpuio_positionsDimensions);\n\t\tv_index = gl_VertexID;\n\t#else\n\t\tv_uv_position = uvFromIndex(a_gpuio_index, u_gpuio_positionsDimensions);\n\t\tv_index = int(a_gpuio_index);\n\t#endif\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\t#ifdef ${GPUIO_VS_POSITION_W_ACCUM}\n\t\t// We have packed a 2D displacement with the position.\n\t\tvec4 positionData = texture(u_gpuio_positions, v_uv_position);\n\t\t// position = first two components plus last two components (optional accumulation buffer).\n\t\tv_position = positionData.rg + positionData.ba;\n\t\tv_uv = v_position * u_gpuio_scale;\n\t#else\n\t\tv_position = texture(u_gpuio_positions, v_uv_position).rg;\n\t\tv_uv = v_position * u_gpuio_scale;\n\t#endif\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = v_uv * 2.0 - 1.0;\n\n\tgl_Position = vec4(position, 0, 1);\n}`;","import type { GPUComposer } from './GPUComposer';\nimport {\n\tFLOAT_1D_UNIFORM,\n\tFLOAT_2D_UNIFORM,\n\tFLOAT_3D_UNIFORM,\n\tFLOAT_4D_UNIFORM,\n\tINT_1D_UNIFORM,\n\tINT_2D_UNIFORM,\n\tINT_3D_UNIFORM,\n\tINT_4D_UNIFORM,\n\tUniform,\n\tUniformType,\n\tUniformInternalType,\n\tUniformValue,\n\tCompileTimeConstants,\n\tPROGRAM_NAME_INTERNAL,\n\tUINT_1D_UNIFORM,\n\tUINT_2D_UNIFORM,\n\tUINT_3D_UNIFORM,\n\tUINT_4D_UNIFORM,\n\tUniformParams,\n\tBOOL_1D_UNIFORM,\n\tBOOL_2D_UNIFORM,\n\tBOOL_3D_UNIFORM,\n\tBOOL_4D_UNIFORM,\n\tGLSL3,\n\tGPULayerState,\n\tREPEAT,\n\tLINEAR,\n\tGLSL1,\n} from './constants';\nimport {\n\tcompileShader,\n\tpreprocessFragmentShader,\n\tinitGLProgram,\n\tuniformInternalTypeForValue,\n\tisIntType,\n} from './utils';\nimport {\n\tSAMPLER2D_CAST_INT,\n\tSAMPLER2D_DIMENSIONS_UNIFORM,\n\tSAMPLER2D_FILTER,\n\tSAMPLER2D_HALF_PX_UNIFORM,\n\tSAMPLER2D_WRAP_X,\n\tSAMPLER2D_WRAP_Y,\n} from './polyfills';\nimport {\n\tisArray,\n\tisBoolean,\n\tisFiniteNumber,\n\tisInteger,\n\tisNonNegativeInteger,\n\tisObject,\n\tisString,\n} from '@amandaghassaei/type-checks';\nimport { checkRequiredKeys, checkValidKeys } from './checks';\nimport { getExtension, OES_STANDARD_DERIVATIVES } from './extensions';\n\nexport class GPUProgram {\n\t// Keep a reference to GPUComposer.\n\tprivate readonly _composer: GPUComposer;\n\n\t/**\n\t * Name of GPUProgram, used for error logging.\n\t */\n\treadonly name: string;\n\n\t// Compiled fragment shaders (we hang onto different versions depending on compile time constants).\n\tprivate _fragmentShaders: {[key: string]: WebGLShader} = {};\n\t// Source code for fragment shader.\n\t// Hold onto this in case we need to recompile with different #defines.\n\tprotected _fragmentShaderSource!: string;\n\t// #define variables for fragment shader program.\n\tprivate readonly _compileTimeConstants: CompileTimeConstants = {};\n\t// #extension declarations for fragment shader program.\n\tprivate readonly _extensions?: string;\n\t// Uniform locations, values, and types.\n\tprivate readonly _uniforms: { [ key: string]: Uniform } = {};\n\n\t// Store WebGLProgram's - we need to compile several WebGLPrograms of GPUProgram.fragmentShader + various vertex shaders.\n\t// Each combination of vertex + fragment shader requires a separate WebGLProgram.\n\t// These programs are compiled on the fly as needed.\n\tprivate readonly _programs: {[key: string]: WebGLProgram } = {};\n\t// Reverse lookup for above.\n\tprivate readonly _programsKeyLookup = new WeakMap<WebGLProgram, string>();\n\n\t// Store the index of input sampler2D in input array.\n\tprotected readonly _samplerUniformsIndices: { name: string, inputIndex: number, shaderIndex: number }[] = [];\n\n\t/**\n\t * This is only used in cases where GLSL1 program has multiple outputs.\n\t * @private\n\t */\n\t_childPrograms?: GPUProgramChild[];\n\n\t/**\n\t * Create a GPUProgram.\n\t * @param composer - The current GPUComposer instance.\n\t * @param params - GPUProgram parameters.\n\t * @param params.name - Name of GPUProgram, used for error logging.\n\t * @param params.fragmentShader - Fragment shader source or array of sources to be joined.\n\t * @param params.uniforms - Array of uniforms to initialize with GPUProgram.  More uniforms can be added later with GPUProgram.setUniform().\n\t * @param params.compileTimeConstants - Compile time #define constants to include with fragment shader.\n\t */\n\tconstructor(\n\t\tcomposer: GPUComposer,\n\t\tparams: {\n\t\t\tname: string,\n\t\t\t// We may want to pass in an array of shader string sources, if split across several files.\n\t\t\tfragmentShader: string | string[],\n\t\t\tuniforms?: UniformParams[],\n\t\t\t// We'll allow some compile time constants to be passed in as #define to the preprocessor for the fragment shader.\n\t\t\tcompileTimeConstants?: CompileTimeConstants,\n\t\t},\n\t) {\n\t\t// Check constructor parameters.\n\t\tconst { name } = (params || {});\n\t\tif (!composer) {\n\t\t\tthrow new Error(`Error initing GPUProgram \"${name}\": must pass GPUComposer instance to GPUProgram(composer, params).`);\n\t\t}\n\t\tif (!params) {\n\t\t\tthrow new Error(`Error initing GPUProgram: must pass params to GPUProgram(composer, params).`);\n\t\t}\n\t\tif (!isObject(params)) {\n\t\t\tthrow new Error(`Error initing GPUProgram: must pass valid params object to GPUProgram(composer, params), got ${JSON.stringify(params)}.`);\n\t\t}\n\t\t// Check params keys.\n\t\tconst validKeys = ['name', 'fragmentShader', 'uniforms', 'compileTimeConstants'];\n\t\tconst requiredKeys = ['name', 'fragmentShader'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUProgram(composer, params)', params.name);\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUProgram(composer, params)', params.name);\n\n\t\tconst { fragmentShader, uniforms, compileTimeConstants } = params;\n\n\t\t// Save arguments.\n\t\tthis._composer = composer;\n\t\tthis.name = name;\n\n\t\t// Preprocess fragment shader source.\n\t\tconst fragmentShaderSource = isString(fragmentShader) ?\n\t\t\t\tfragmentShader as string :\n\t\t\t\t(fragmentShader as string[]).join('\\n');\n\t\tconst { shaderSource, samplerUniforms, additionalSources } = preprocessFragmentShader(\n\t\t\tfragmentShaderSource, composer.glslVersion, name,\n\t\t);\n\t\tthis._fragmentShaderSource = shaderSource;\n\n\t\tsamplerUniforms.forEach((name, i) => {\n\t\t\tthis._samplerUniformsIndices.push({\n\t\t\t\tname,\n\t\t\t\tinputIndex: 0, // All uniforms default to 0.\n\t\t\t\tshaderIndex: i,\n\t\t\t});\n\t\t});\n\t\tif (this.constructor === GPUProgram) { // This is not a child program.\n\t\t\tif (additionalSources) {\n\t\t\t\tthis._childPrograms = [];\n\t\t\t\tfor (let i = 0, numChildren = additionalSources.length; i < numChildren; i++) {\n\t\t\t\t\tthis._childPrograms.push(new GPUProgramChild(composer, params, { fragmentShaderSource: additionalSources[i] }));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Save compile time constants.\n\t\tif (compileTimeConstants) {\n\t\t\tthis._compileTimeConstants = { ...compileTimeConstants };\n\t\t}\n\t\t// Save extension declarations.\n\t\tif (composer.glslVersion === GLSL1 && (shaderSource.includes('dFdx') ||shaderSource.includes('dFdy') || shaderSource.includes('fwidth'))) {\n\t\t\tconst ext = getExtension(composer, OES_STANDARD_DERIVATIVES, true);\n\t\t\tif (ext) this._extensions = '#extension GL_OES_standard_derivatives : enable\\n';\n\t\t}\n\n\t\t// Set program uniforms.\n\t\tif (uniforms) {\n\t\t\tfor (let i = 0; i < uniforms.length; i++) {\n\t\t\t\tconst { name, value, type } = uniforms[i];\n\t\t\t\tthis.setUniform(name, value, type);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Force compilation of GPUProgram with new compileTimeConstants.\n\t * @param compileTimeConstants - Compile time #define constants to include with fragment shader.\n\t */\n\trecompile(compileTimeConstants: CompileTimeConstants) {\n\t\tconst { _compileTimeConstants } = this;\n\t\t// Check if we have changed the compile-time constants.\n\t\t// compileTimeConstants may be a partial list.\n\t\tlet needsRecompile = false;\n\t\tObject.keys(compileTimeConstants).forEach(key => {\n\t\t\tif (_compileTimeConstants[key] !== compileTimeConstants[key]) {\n\t\t\t\tneedsRecompile = true;\n\t\t\t\t_compileTimeConstants[key] = compileTimeConstants[key];\n\t\t\t}\n\t\t});\n\t\tif (!needsRecompile) return;\n\t\tconst { \n\t\t\t_fragmentShaders,\n\t\t\t_programs,\n\t\t\t_programsKeyLookup,\n\t\t\t_composer,\n\t\t\t_uniforms,\n\t\t} = this;\n\t\tconst { gl } = _composer;\n\t\t// Delete cached compiled shaders and programs.\n\t\tconst programKeys = Object.keys(_programs);\n\t\tfor (let i = 0, numPrograms = programKeys.length; i < numPrograms; i++) {\n\t\t\tconst key = programKeys[i];\n\t\t\tconst program = _programs[key];\n\t\t\tgl.deleteProgram(program);\n\t\t\t_programsKeyLookup.delete(program);\n\t\t\tdelete _programs[key];\n\t\t}\n\t\tconst fragmentShaderKeys = Object.keys(_fragmentShaders);\n\t\tfor (let i = 0, numFragmentShaders = fragmentShaderKeys.length; i < numFragmentShaders; i++) {\n\t\t\tconst key = fragmentShaderKeys[i];\n\t\t\tgl.deleteShader(_fragmentShaders[key]);\n\t\t\tdelete _fragmentShaders[key];\n\t\t}\n\t\t// Delete all cached uniform locations.\n\t\tconst uniforms = Object.values(_uniforms);\n\t\tfor (let i = 0, numUniforms = uniforms.length; i < numUniforms; i++) {\n\t\t\tuniforms[i].location = new WeakMap();\n\t\t}\n\n\t\tif (this._childPrograms) {\n\t\t\tfor (let i = 0, numChildren = this._childPrograms.length; i < numChildren; i++) {\n\t\t\t\tthis._childPrograms[i].recompile(compileTimeConstants);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get fragment shader for GPUProgram, compile new one if needed.\n\t * Used internally.\n\t * @private\n\t */\n\tprivate _getFragmentShader(fragmentId: string, internalCompileTimeConstants: CompileTimeConstants, ) {\n\t\tconst { _fragmentShaders } = this;\n\t\tif (_fragmentShaders[fragmentId]) {\n\t\t\t// No need to recompile.\n\t\t\treturn _fragmentShaders[fragmentId];\n\t\t}\n\n\t\tconst { _composer, name, _fragmentShaderSource, _compileTimeConstants, _extensions } = this;\n\t\tconst {\n\t\t\tgl,\n\t\t\t_errorCallback,\n\t\t\tverboseLogging,\n\t\t\tglslVersion,\n\t\t\tfloatPrecision,\n\t\t\tintPrecision,\n\t\t} = _composer;\n\t\t\n\t\t// Update compile time constants.\n\t\tconst keys = Object.keys(internalCompileTimeConstants);\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key = keys[i];\n\t\t\t_compileTimeConstants[key] = internalCompileTimeConstants[key];\n\t\t}\n\n\t\tif (verboseLogging) console.log(`Compiling fragment shader for GPUProgram \"${name}\" with compile time constants: ${JSON.stringify(_compileTimeConstants)}`);\n\t\tconst shader = compileShader(\n\t\t\tgl,\n\t\t\tglslVersion,\n\t\t\tintPrecision,\n\t\t\tfloatPrecision,\n\t\t\t_fragmentShaderSource,\n\t\t\tgl.FRAGMENT_SHADER,\n\t\t\tname,\n\t\t\t_errorCallback,\n\t\t\t_compileTimeConstants,\n\t\t\t_extensions,\n\t\t\tObject.keys(_fragmentShaders).length === 0,\n\t\t);\n\t\tif (!shader) {\n\t\t\t_errorCallback(`Unable to compile fragment shader for GPUProgram \"${name}\".`);\n\t\t\treturn;\n\t\t}\n\t\t_fragmentShaders[fragmentId] = shader;\n\t\treturn _fragmentShaders[fragmentId];\n\t}\n\n\t/**\n\t * Get GLProgram associated with a specific vertex shader.\n\t * @private\n\t */\n\t_getProgramWithName(name: PROGRAM_NAME_INTERNAL, vertexCompileConstants: CompileTimeConstants, input: GPULayerState[]) {\n\t\tconst { _samplerUniformsIndices, _composer } = this;\n\n\t\tlet fragmentID = '';\n\t\tconst fragmentCompileConstants: CompileTimeConstants = {};\n\t\tfor (let i = 0, length = _samplerUniformsIndices.length; i < length; i++) {\n\t\t\tconst { inputIndex } = _samplerUniformsIndices[i];\n\t\t\tconst { layer } = input[inputIndex];\n\t\t\tconst {\n\t\t\t\tfilter, wrapX, wrapY, type,\n\t\t\t\t_internalFilter, _internalWrapX, _internalWrapY,\n\t\t\t} = layer;\n\t\t\tconst wrapXVal = wrapX === _internalWrapX ? 0 : (wrapX === REPEAT ? 1 : 0);\n\t\t\tconst wrapYVal = wrapY === _internalWrapY ? 0 : (wrapY === REPEAT ? 1 : 0);\n\t\t\tconst filterVal = filter === _internalFilter ? 0 : (filter === LINEAR ? 1 : 0);\n\t\t\tfragmentID += `_IN${i}_${wrapXVal}_${wrapYVal}_${filterVal}`;\n\t\t\tfragmentCompileConstants[`${SAMPLER2D_WRAP_X}${i}`] = `${wrapXVal}`;\n\t\t\tfragmentCompileConstants[`${SAMPLER2D_WRAP_Y}${i}`] = `${wrapYVal}`;\n\t\t\tfragmentCompileConstants[`${SAMPLER2D_FILTER}${i}`] = `${filterVal}`;\n\t\t\tif (_composer.glslVersion === GLSL1 && isIntType(type)) {\n\t\t\t\tfragmentCompileConstants[`${SAMPLER2D_CAST_INT}${i}`] = '1';\n\t\t\t}\n\t\t}\n\t\tconst vertexID = Object.keys(vertexCompileConstants).map(key => `_${key}_${vertexCompileConstants[key]}`).join();\n\t\tconst key = `${name}${vertexID}${fragmentID}`;\n\n\t\t// Check if we've already compiled program.\n\t\tif (this._programs[key]) return this._programs[key];\n\n\t\t// Otherwise, we need to compile a new program on the fly.\n\t\tconst { _uniforms, _programs, _programsKeyLookup } = this;\n\t\tconst { gl, _errorCallback } = _composer;\n\n\t\tconst vertexShader = _composer._getVertexShader(name, vertexID, vertexCompileConstants, this.name);\n\t\tif (vertexShader === undefined) {\n\t\t\t_errorCallback(`Unable to init vertex shader \"${name}${vertexID}\" for GPUProgram \"${this.name}\".`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst fragmentShader = this._getFragmentShader(fragmentID, fragmentCompileConstants);\n\t\tif (fragmentShader === undefined) {\n\t\t\t_errorCallback(`Unable to init fragment shader \"${fragmentID}\" for GPUProgram \"${this.name}\".`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst program = initGLProgram(gl, vertexShader, fragmentShader, this.name, _errorCallback);\n\t\tif (program === undefined) {\n\t\t\tgl.deleteShader(fragmentShader);\n\t\t\t_errorCallback(`Unable to init program \"${key}\" for GPUProgram \"${this.name}\".`);\n\t\t\treturn;\n\t\t}\n\n\t\t// If we have any uniforms set for this GPUProgram, add those to WebGLProgram we just inited.\n\t\t// Set active program.\n\t\tgl.useProgram(program);\n\t\tconst uniformNames = Object.keys(_uniforms);\n\t\tfor (let i = 0, numUniforms = uniformNames.length; i < numUniforms; i++) {\n\t\t\tconst uniformName = uniformNames[i];\n\t\t\tconst uniform = _uniforms[uniformName];\n\t\t\tconst { value, type } = uniform;\n\t\t\tthis._setProgramUniform(program, uniformName, value, type);\n\t\t}\n\n\t\t_programs[key] = program;\n\t\t_programsKeyLookup.set(program, key);\n\t\treturn program;\n\t}\n\n\t/**\n\t * Set uniform for GLProgram.\n\t * @private\n\t */\n\tprivate _setProgramUniform(\n\t\tprogram: WebGLProgram,\n\t\tuniformName: string,\n\t\tvalue: UniformValue,\n\t\ttype: UniformInternalType,\n\t) {\n\t\tconst { _composer, _uniforms } = this;\n\t\tconst { gl, _errorCallback, glslVersion } = _composer;\n\n\t\t// We have already set gl.useProgram(program) outside this function.\n\n\t\tconst isGLSL3 = glslVersion === GLSL3;\n\n\t\tlet location = _uniforms[uniformName]?.location.get(program);\n\t\t// Init a location for WebGLProgram if needed (only do this once).\n\t\tif (location === undefined) {\n\t\t\tconst _location = gl.getUniformLocation(program, uniformName);\n\t\t\tif (_location === null) {\n\t\t\t\tconsole.warn(`Could not init uniform \"${uniformName}\" for program \"${this.name}\". Check that uniform is present in shader code, unused uniforms may be removed by compiler. Also check that uniform type in shader code matches type ${type}. Error code: ${gl.getError()}.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlocation = _location;\n\n\t\t\t// Save location for future use.\n\t\t\tif (_uniforms[uniformName]) {\n\t\t\t\t_uniforms[uniformName].location.set(program, location);\n\t\t\t}\n\n\t\t\t// Since this is the first time we are initing the uniform, check that type is correct.\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniform\n\t\t\tconst uniform = gl.getUniform(program, location);\n\t\t\tlet badType = false;\n\t\t\tif (type === BOOL_1D_UNIFORM || type === BOOL_2D_UNIFORM || type === BOOL_3D_UNIFORM || type === BOOL_4D_UNIFORM) {\n\t\t\t\tif (!isBoolean(uniform) && uniform.constructor !== Array) {\n\t\t\t\t\tbadType = true;\n\t\t\t\t}\n\t\t\t} else if (type === FLOAT_1D_UNIFORM || type === FLOAT_2D_UNIFORM || type === FLOAT_3D_UNIFORM || type === FLOAT_4D_UNIFORM) {\n\t\t\t\tif (!isFiniteNumber(uniform) && uniform.constructor !== Float32Array) {\n\t\t\t\t\tbadType = true;\n\t\t\t\t}\n\t\t\t} else if (type === INT_1D_UNIFORM || type === INT_2D_UNIFORM || type === INT_3D_UNIFORM || type === INT_4D_UNIFORM) {\n\t\t\t\tif (!isInteger(uniform) && uniform.constructor !== Int32Array) {\n\t\t\t\t\tbadType = true;\n\t\t\t\t}\n\t\t\t} else if (type === UINT_1D_UNIFORM || type === UINT_2D_UNIFORM || type === UINT_3D_UNIFORM || type === UINT_4D_UNIFORM) {\n\t\t\t\tif (!isGLSL3) {\n\t\t\t\t\t// GLSL1 does not have uint type, expect int instead.\n\t\t\t\t\tif (!isNonNegativeInteger(uniform) && uniform.constructor !== Int32Array) {\n\t\t\t\t\t\tbadType = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (!isNonNegativeInteger(uniform) && uniform.constructor !== Uint32Array) {\n\t\t\t\t\tbadType = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (badType) {\n\t\t\t\t_errorCallback(`Invalid uniform \"${uniformName}\" for program \"${this.name}\". Check that uniform type in shader code matches type ${type}, gl.getUniform(program, location) returned type: ${uniform.constructor.name}.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Set uniform.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform\n\t\tswitch (type) {\n\t\t\t// We are setting boolean uniforms with uniform[1234]i.\n\t\t\t// This suggest floats work as well, but ints seem more natural:\n\t\t\t// https://github.com/KhronosGroup/WebGL/blob/main/sdk/tests/conformance/uniforms/gl-uniform-bool.html\n\t\t\tcase BOOL_1D_UNIFORM:\n\t\t\t\tgl.uniform1i(location, value ? 1 : 0);\n\t\t\t\tbreak;\n\t\t\tcase BOOL_2D_UNIFORM:\n\t\t\t\tgl.uniform2i(location, (value as number[])[0] ? 1 : 0, (value as number[])[1] ? 1 : 0);\n\t\t\t\tbreak;\n\t\t\tcase BOOL_3D_UNIFORM:\n\t\t\t\tgl.uniform3i(location, (value as number[])[0] ? 1 : 0, (value as number[])[1] ? 1 : 0, (value as number[])[2] ? 1 : 0);\n\t\t\t\tbreak;\n\t\t\tcase BOOL_4D_UNIFORM:\n\t\t\t\tgl.uniform4i(location, (value as number[])[0] ? 1 : 0, (value as number[])[1] ? 1 : 0, (value as number[])[2] ? 1 : 0, (value as number[])[3] ? 1 : 0);\n\t\t\t\tbreak;\n\t\t\tcase FLOAT_1D_UNIFORM:\n\t\t\t\tgl.uniform1f(location, value as number);\n\t\t\t\tbreak;\n\t\t\tcase FLOAT_2D_UNIFORM:\n\t\t\t\tgl.uniform2fv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase FLOAT_3D_UNIFORM:\n\t\t\t\tgl.uniform3fv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase FLOAT_4D_UNIFORM:\n\t\t\t\tgl.uniform4fv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase INT_1D_UNIFORM:\n\t\t\t\tgl.uniform1i(location, value as number);\n\t\t\t\tbreak;\n\t\t\tcase INT_2D_UNIFORM:\n\t\t\t\tgl.uniform2iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase INT_3D_UNIFORM:\n\t\t\t\tgl.uniform3iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase INT_4D_UNIFORM:\n\t\t\t\tgl.uniform4iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\t// Uint not supported in GLSL1, use int instead.\n\t\t\tcase UINT_1D_UNIFORM:\n\t\t\t\tif (isGLSL3) (gl as WebGL2RenderingContext).uniform1ui(location, value as number);\n\t\t\t\telse gl.uniform1i(location, value as number);\n\t\t\t\tbreak;\n\t\t\tcase UINT_2D_UNIFORM:\n\t\t\t\tif (isGLSL3) (gl as WebGL2RenderingContext).uniform2uiv(location, value as number[]);\n\t\t\t\telse gl.uniform2iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase UINT_3D_UNIFORM:\n\t\t\t\tif (isGLSL3) (gl as WebGL2RenderingContext).uniform3uiv(location, value as number[]);\n\t\t\t\telse gl.uniform3iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tcase UINT_4D_UNIFORM:\n\t\t\t\tif (isGLSL3) (gl as WebGL2RenderingContext).uniform4uiv(location, value as number[]);\n\t\t\t\telse gl.uniform4iv(location, value as number[]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown uniform type ${type} for GPUProgram \"${this.name}\".`);\n\t\t}\n\t}\n\n\t/**\n\t * Cache uniform value and return whether the value has changed.\n\t * @private\n\t */\n\tprivate _cacheUniformValue(name: string, value: UniformValue, type: UniformInternalType) {\n\t\tconst { _uniforms } = this;\n\t\t// Cache uniform values.\n\t\tconst uniform = _uniforms[name];\n\t\tif (!uniform) {\n\t\t\t// Init uniform if needed.\n\t\t\t_uniforms[name] = { location: new WeakMap(), value: isArray(value) ? (value as number[]).slice() : value, type };\n\t\t\treturn true;\n\t\t}\n\t\tconst oldValue = uniform.value;\n\t\t// Update value with a deep copy of input.\n\t\tuniform.value = isArray(value) ? (value as number[]).slice() : value;\n\t\t// Deep check if value has changed.\n\t\tif (isArray(value)) {\n\t\t\tfor (let i = 0, length = (value as number[]).length; i < length; i++) {\n\t\t\t\tif ((value as number[])[i] !== (oldValue as number[])[i]) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false; // No change.\n\t\t}\n\t\treturn value !== oldValue;\n\t}\n\n\t/**\n\t * Set fragment shader uniform for GPUProgram.\n\t * @param name - Uniform name as it appears in fragment shader.\n\t * @param value - Uniform value.\n\t * @param type - Uniform type.\n\t */\n\tsetUniform(\n\t\tname: string,\n\t\tvalue: UniformValue,\n\t\ttype?: UniformType,\n\t) {\n\t\tconst { _programs, _uniforms, _composer, _samplerUniformsIndices } = this;\n\t\tconst { verboseLogging, gl } = _composer;\n\n\t\t// Check that length of value is correct.\n\t\tif (isArray(value)) {\n\t\t\tconst length = (value as number[]).length;\n\t\t\tif (length > 4) throw new Error(`Invalid uniform value: [${(value as number[]).join(', ')}] passed to GPUProgram \"${this.name}, uniforms must be of type number[] with length <= 4, number, or boolean.\"`)\n\t\t}\n\n\t\t// Get uniform internal type.\n\t\tlet currentType = _uniforms[name]?.type;\n\t\tif (type) {\n\t\t\tconst internalType = uniformInternalTypeForValue(value, type, name, this.name);\n\t\t\tif (currentType === undefined) currentType = internalType;\n\t\t\telse {\n\t\t\t\t// console.warn(`Don't need to pass in type to GPUProgram.setUniform for previously inited uniform \"${uniformName}\"`);\n\t\t\t\t// Check that types match previously set uniform.\n\t\t\t\tif (currentType !== internalType) {\n\t\t\t\t\tthrow new Error(`Uniform \"${name}\" for GPUProgram \"${this.name}\" cannot change from type ${currentType} to type ${internalType}.`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (currentType === undefined) {\n\t\t\tthrow new Error(`Unknown type for uniform \"${name}\", please pass in type to GPUProgram.setUniform(name, value, type) when initing a new uniform.`);\n\t\t}\n\n\t\tconst changed = this._cacheUniformValue(name, value, currentType);\n\t\tif (!changed) return;\n\n\t\t// Cache user-defined sampler uniform values.\n\t\tconst samplerUniform = _samplerUniformsIndices.find((uniform) => uniform.name === name);\n\t\tif (samplerUniform && isInteger(value)) {\n\t\t\tsamplerUniform.inputIndex = value as number;\n\t\t}\n\n\t\tif (verboseLogging) console.log(`Setting uniform \"${name}\" for program \"${this.name}\" to value ${JSON.stringify(value)}.`)\n\n\t\t// Update any active programs.\n\t\tconst programNames = Object.keys(_programs);\n\t\tfor (let i = 0, numPrograms = programNames.length; i < numPrograms; i++) {\n\t\t\tconst programName = programNames[i];\n\t\t\t// Set active program.\n\t\t\tconst program = _programs[programName]!;\n\t\t\tgl.useProgram(program);\n\t\t\tthis._setProgramUniform(program, name, value, currentType);\n\t\t}\n\n\t\t// this code is only executed in cases where we have a shader program with multiple outputs in a WebGL1 context.\n\t\t// Notify all child programs of the setUniform.\n\t\tif (this._childPrograms) {\n\t\t\tfor (let i = 0, numChildren = this._childPrograms.length; i < numChildren; i++) {\n\t\t\t\tthis._childPrograms[i].setUniform(name, value, type);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Set internal fragment shader uniforms for GPUProgram.\n\t * @private\n\t */\n\t_setInternalFragmentUniforms(\n\t\tprogram: WebGLProgram,\n\t\tinput: GPULayerState[],\n\t) {\n\t\tif (input.length === 0) return;\n\t\tif (!program) {\n\t\t\tthrow new Error('Must pass in valid WebGLProgram to GPUProgram._setInternalFragmentUniforms, got undefined.');\n\t\t}\n\t\tconst { _programsKeyLookup, _samplerUniformsIndices } = this;\n\t\tconst programName = _programsKeyLookup.get(program);\n\t\tif (!programName) {\n\t\t\tthrow new Error(`Could not find valid programName for WebGLProgram in GPUProgram \"${this.name}\".`);\n\t\t}\n\n\t\tconst indexLookup = new Array(Math.max(input.length, _samplerUniformsIndices.length)).fill(-1);\n\t\tfor (let i = 0, length = _samplerUniformsIndices.length; i < length; i++) {\n\t\t\tconst { inputIndex, shaderIndex } = _samplerUniformsIndices[i];\n\t\t\tif (indexLookup[inputIndex] >= 0) {\n\t\t\t\t// There is an index collision, this should not happen.\n\t\t\t\tconsole.warn(`Found > 1 sampler2D uniforms at texture index ${inputIndex} for GPUProgram \"${this.name}\".`);\n\t\t\t} else {\n\t\t\t\tindexLookup[inputIndex] = shaderIndex;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0, length = input.length; i < length; i++) {\n\t\t\tconst { layer } = input[i];\n\t\t\tconst { width, height } = layer;\n\t\t\tconst index = indexLookup[i];\n\t\t\tif (index < 0) continue;\n\t\t\tconst { filter, wrapX, wrapY, _internalFilter, _internalWrapX, _internalWrapY } = layer;\n\t\t\tconst filterMismatch = filter !== _internalFilter;\n\t\t\tif (filterMismatch || wrapX !== _internalWrapX || wrapY !== _internalWrapY) {\n\t\t\t\tconst halfPxSize = [0.5 / width, 0.5 / height];\n\t\t\t\tconst halfPxUniform = `${SAMPLER2D_HALF_PX_UNIFORM}${index}`;\n\t\t\t\tconst halfPxUniformChanged = this._cacheUniformValue(halfPxUniform, halfPxSize, FLOAT_2D_UNIFORM);\n\t\t\t\tif (halfPxUniformChanged) {\n\t\t\t\t\tthis._setProgramUniform(\n\t\t\t\t\t\tprogram,\n\t\t\t\t\t\thalfPxUniform,\n\t\t\t\t\t\thalfPxSize,\n\t\t\t\t\t\tFLOAT_2D_UNIFORM,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (filterMismatch) {\n\t\t\t\t\tconst dimensions = [width, height];\n\t\t\t\t\tconst dimensionsUniform = `${SAMPLER2D_DIMENSIONS_UNIFORM}${index}`;\n\t\t\t\t\tconst dimensionsUniformChanged = this._cacheUniformValue(dimensionsUniform, dimensions, FLOAT_2D_UNIFORM);\n\t\t\t\t\tif (dimensionsUniformChanged) {\n\t\t\t\t\t\tthis._setProgramUniform(\n\t\t\t\t\t\t\tprogram,\n\t\t\t\t\t\t\tdimensionsUniform,\n\t\t\t\t\t\t\tdimensions,\n\t\t\t\t\t\t\tFLOAT_2D_UNIFORM,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set vertex shader uniform for GPUProgram.\n\t * @private\n\t */\n\t_setVertexUniform(\n\t\tprogram: WebGLProgram,\n\t\tuniformName: string,\n\t\tvalue: UniformValue,\n\t\ttype: UniformType,\n\t) {\n\t\tif (!program) {\n\t\t\tthrow new Error('Must pass in valid WebGLProgram to GPUProgram._setVertexUniform, got undefined.');\n\t\t}\n\t\tconst { _programsKeyLookup } = this;\n\t\tconst programName = _programsKeyLookup.get(program);\n\t\tif (!programName) {\n\t\t\tthrow new Error(`Could not find valid programName for WebGLProgram in GPUProgram \"${this.name}\".`);\n\t\t}\n\t\tconst internalType = uniformInternalTypeForValue(value, type, uniformName, this.name);\n\t\t// const changed = this._cacheUniformValue(uniformName, value, internalType);\n\t\t// Don't cache vertex uniforms for now.\n\t\t// TODO: cached vertex uniforms need to be stored per WebGLProgram.\n\t\tthis._setProgramUniform(program, uniformName, value, internalType);\n\t}\n\n\t/**\n\t * Deallocate GPUProgram instance and associated WebGL properties.\n\t */\n\tdispose() {\n\t\tconst { _composer, _fragmentShaders, _programs, _programsKeyLookup } = this;\n\t\tconst { gl, verboseLogging } = _composer;\n\n\t\tif (verboseLogging) console.log(`Deallocating GPUProgram \"${this.name}\".`);\n\t\tif (!gl) throw new Error(`Must call dispose() on all GPUPrograms before calling dispose() on GPUComposer.`);\n\n\t\t// Unbind all gl data before deleting.\n\t\tObject.values(_programs).forEach(program => {\n\t\t\tif (program) {\n\t\t\t\tgl.deleteProgram(program);\n\t\t\t\t_programsKeyLookup.delete(program);\n\t\t\t}\n\t\t});\n\t\tObject.keys(_programs).forEach(key => {\n\t\t\tdelete _programs[key as PROGRAM_NAME_INTERNAL];\n\t\t});\n\n\t\t// Delete fragment shaders.\n\t\tObject.values(_fragmentShaders).forEach(shader => {\n\t\t\tgl.deleteShader(shader);\n\t\t});\n\t\tObject.keys(_fragmentShaders).forEach(key => {\n\t\t\tdelete _fragmentShaders[key];\n\t\t});\n\n\t\tif (this._childPrograms) {\n\t\t\tfor (let i = 0, numChildren = this._childPrograms.length; i < numChildren; i++) {\n\t\t\t\tthis._childPrograms[i].dispose();\n\t\t\t}\n\t\t\tthis._childPrograms.length;\n\t\t}\n\t\tdelete this._childPrograms;\n\t\t\n\t\t// Vertex shaders are owned by GPUComposer and shared across many GPUPrograms.\n\n\t\t// Delete all references.\n\t\t// @ts-ignore\n\t\tdelete this._composer;\n\t\t// @ts-ignore\n\t\tdelete this.name;\n\t\t// @ts-ignore\n\t\tdelete this._fragmentShaderSource;\n\t\t// @ts-ignore\n\t\tdelete this._compileTimeConstants;\n\t\t// @ts-ignore\n\t\tdelete this._extensions;\n\t\t// @ts-ignore\n\t\tdelete this._uniforms;\n\t\t// @ts-ignore\n\t\tdelete this._programs;\n\t\t// @ts-ignore\n\t\tdelete this._programsKeyLookup;\n\t\t// @ts-ignore\n\t\tdelete this._fragmentShaders;\n\t\t// @ts-ignore\n\t\tdelete this._samplerUniformsIndices;\n\t}\n}\n\nclass GPUProgramChild extends GPUProgram {\n\tconstructor(\n\t\tcomposer: GPUComposer,\n\t\tparams: {\n\t\t\tname: string,\n\t\t\t// We may want to pass in an array of shader string sources, if split across several files.\n\t\t\tfragmentShader: string | string[],\n\t\t\tuniforms?: UniformParams[],\n\t\t\t// We'll allow some compile time constants to be passed in as #define to the preprocessor for the fragment shader.\n\t\t\tcompileTimeConstants?: CompileTimeConstants,\n\t\t},\n\t\t_gpuio_child_params: {\n\t\t\tfragmentShaderSource: string,\n\t\t},\n\t) {\n\t\tsuper(composer, params);\n\n\t\tconst { fragmentShaderSource } = _gpuio_child_params;\n\t\t// fragmentShader has already been pre-processed.\n\t\tthis._fragmentShaderSource = fragmentShaderSource;\n\t}\n}","import { isArray } from '@amandaghassaei/type-checks';\nimport {\n\tFLOAT,\n\tGLSLPrecision,\n\tGPULayerNumComponents,\n\tGPULayerType,\n\tINT,\n} from './constants';\nimport {\n\tglslComponentSelectionForNumComponents,\n\tglslPrefixForType,\n\tglslTypeForType,\n\tuniformTypeForType,\n} from './conversions';\nimport type { GPUComposer } from './GPUComposer';\nimport { GPUProgram } from './GPUProgram';\n\n/**\n * Init GPUProgram to copy contents of one GPULayer to another GPULayer.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input/output.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.precision - Optionally specify the precision of the input/output.\n * @returns\n */\nexport function copyProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tname?: string,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst precision = params.precision || '';\n\tconst glslType = glslTypeForType(type, 4);\n\tconst name = params.name ||`copy_${uniformTypeForType(type, composer.glslVersion)}_layer`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform ${precision} ${glslPrefixForType(type)}sampler2D u_state;\nout ${precision} ${glslType} out_result;\nvoid main() {\n\tout_result = texture(u_state, v_uv);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to add several GPULayers together.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the inputs/output.\n * @param params.components - Component(s) of inputs to add, defaults to 'xyzw.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.numInputs - The number of inputs to add together, defaults to 2.\n * @param params.precision - Optionally specify the precision of the inputs/output.\n * @returns\n */\n export function addLayersProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tcomponents?: string,\n\tname?: string,\n\tnumInputs?: number,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst numInputs = params.numInputs || 2;\n\tconst precision = params.precision || '';\n\tconst components = params.components || 'xyzw';\n\tconst glslType = glslTypeForType(type, components.length as GPULayerNumComponents);\n\tconst arrayOfLengthNumInputs = new Array(numInputs);\n\tconst name = params.name || `${numInputs}-way_add_${uniformTypeForType(type, composer.glslVersion)}_${components}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\n${ arrayOfLengthNumInputs.map((el, i) => `uniform ${precision} ${glslPrefixForType(type)}sampler2D u_state${i};`).join('\\n') }\nout ${precision} ${glslType} out_result;\nvoid main() {\n\tout_result = ${ arrayOfLengthNumInputs.map((el, i) => `texture(u_state${i}, v_uv).${components}`).join(' + ') };\n}`,\n\t\tuniforms: arrayOfLengthNumInputs.map((el, i) => {\n\t\t\treturn {\n\t\t\t\tname: `u_state${i}`,\n\t\t\t\tvalue: i,\n\t\t\t\ttype: INT,\n\t\t\t};\n\t\t}),\n\t});\n}\n\n/**\n * Init GPUProgram to add uniform \"u_value\" to a GPULayer.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input/output (we assume \"u_value\" has the same type).\n * @param params.value - Initial value to add, if value has length 1 it will be applied to all components of GPULayer.  Change this later using uniform \"u_value\".\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.precision - Optionally specify the precision of the input/output/\"u_value\".\n * @returns\n */\n export function addValueProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tvalue: number | number[],\n\tname?: string,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type, value } = params;\n\tconst precision = params.precision || '';\n\tconst valueLength = isArray(value) ? (value as number[]).length : 1;\n\tconst valueType = glslTypeForType(type, valueLength as GPULayerNumComponents);\n\tconst numComponents = valueLength === 1 ? 4 : valueLength;\n\tconst outputType = glslTypeForType(type, numComponents as GPULayerNumComponents);\n\tconst componentSelection = glslComponentSelectionForNumComponents(numComponents as GPULayerNumComponents);\n\tconst name = params.name || `addValue_${valueType}_w_length_${valueLength}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform ${precision} ${valueType} u_value;\nuniform ${precision} ${glslPrefixForType(type)}sampler2D u_state;\nout ${precision} ${outputType} out_result;\nvoid main() {\n\tout_result = ${valueType !== outputType ? outputType : ''}(u_value) + texture(u_state, v_uv)${componentSelection};\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_value',\n\t\t\t\tvalue,\n\t\t\t\ttype: uniformTypeForType(type, composer.glslVersion),\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to multiply uniform \"u_value\" to a GPULayer.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input/output (we assume \"u_value\" has the same type).\n * @param params.value - Initial value to multiply, if value has length 1 it will be applied to all components of GPULayer.  Change this later using uniform \"u_value\".\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.precision - Optionally specify the precision of the input/output/\"u_value\".\n * @returns\n */\n export function multiplyValueProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tvalue: number | number[],\n\tname?: string,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type, value } = params;\n\tconst precision = params.precision || '';\n\tconst valueLength = isArray(value) ? (value as number[]).length : 1;\n\tconst valueType = glslTypeForType(type, valueLength as GPULayerNumComponents);\n\tconst numComponents = valueLength === 1 ? 4 : valueLength;\n\tconst outputType = glslTypeForType(type, numComponents as GPULayerNumComponents);\n\tconst componentSelection = glslComponentSelectionForNumComponents(numComponents as GPULayerNumComponents);\n\tconst name = params.name || `addValue_${valueType}_w_length_${valueLength}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform ${precision} ${valueType} u_value;\nuniform ${precision} ${glslPrefixForType(type)}sampler2D u_state;\nout ${precision} ${outputType} out_result;\nvoid main() {\n\tout_result = ${valueType !== outputType ? outputType : ''}(u_value) * texture(u_state, v_uv)${componentSelection};\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_value',\n\t\t\t\tvalue,\n\t\t\t\ttype: uniformTypeForType(type, composer.glslVersion),\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to set all elements in a GPULayer to uniform \"u_value\".\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the output (we assume \"u_value\" has same type).\n * @param params.value - Initial value to set, if value has length 1 it will be applied to all components of GPULayer.  Change this later using uniform \"u_value\".\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.precision - Optionally specify the precision of the output/\"u_value\".\n * @returns\n */\nexport function setValueProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tvalue: number | number[],\n\tname?: string,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type, value } = params;\n\tconst precision = params.precision || '';\n\tconst valueLength = isArray(value) ? (value as number[]).length : 1;\n\tconst valueType = glslTypeForType(type, valueLength as GPULayerNumComponents);\n\tconst numComponents = valueLength === 1 ? 4 : valueLength;\n\tconst outputType = glslTypeForType(type, numComponents as GPULayerNumComponents);\n\tconst name = params.name || `setValue_${valueType}_w_length_${valueLength}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nuniform ${precision} ${valueType} u_value;\nout ${precision} ${outputType} out_result;\nvoid main() {\n\tout_result = ${valueType !== outputType ? outputType : ''}(u_value);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_value',\n\t\t\t\tvalue,\n\t\t\t\ttype: uniformTypeForType(type, composer.glslVersion),\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to set all elements in a GPULayer to uniform \"u_value\".\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the output.\n * @param params.color - Initial color as RGB in range [0, 1], defaults to [0, 0, 0].  Change this later using uniform \"u_color\".\n * @param params.opacity - Initial opacity in range [0, 1], defaults to 1.  Change this later using uniform \"u_opacity\".\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.precision - Optionally specify the precision of the output/uniforms.\n * @returns\n */\n export function setColorProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tcolor?: number[],\n\topacity?: number,\n\tname?: string,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst precision = params.precision || '';\n\tconst opacity = params.opacity === undefined ? 1 : params.opacity;\n\tconst color = params.color || [0, 0, 0];\n\tconst name = params.name || `setColor`;\n\tconst glslType = glslTypeForType(type, 4);\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nuniform ${precision} vec3 u_color;\nuniform ${precision} float u_opacity;\nout ${precision} ${glslType} out_result;\nvoid main() {\n\tout_result = ${glslType}(u_color, u_opacity);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_color',\n\t\t\t\tvalue: color,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_opacity',\n\t\t\t\tvalue: opacity,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to zero output GPULayer.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @returns\n */\n export function zeroProgram(composer: GPUComposer, params: {\n\tname?: string,\n}) {\n\treturn setValueProgram(composer, {\n\t\ttype: FLOAT,\n\t\tvalue: 0,\n\t\tname: params.name,\n\t});\n}\n\n\n/**\n * Init GPUProgram to render 3 component GPULayer as RGB.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.scale - Scaling factor, defaults to 1.  Change this later using uniform \"u_scale\".\n * @param params.opacity - Opacity, defaults to 1.  Change this later using uniform \"u_opacity\".\n * @param params.precision - Optionally specify the precision of the input.\n * @returns\n */\n export function renderRGBProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tname?: string,\n\tscale?: number,\n\topacity?: number,\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst precision = params.precision || '';\n\tconst numComponents = 3;\n\tconst glslType = glslTypeForType(type, numComponents);\n\tconst glslFloatType = glslTypeForType(FLOAT, numComponents);\n\tconst glslPrefix = glslPrefixForType(type);\n\tconst shouldCast = glslFloatType === glslType;\n\tconst name = params.name || `renderRGB_${glslType}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform float u_opacity;\nuniform float u_scale;\nuniform ${precision} ${glslPrefix}sampler2D u_state;\nout vec4 out_result;\nvoid main() {\n\tvec3 color = u_scale * (${shouldCast ? '' : glslFloatType}(texture(u_state, v_uv).rgb));\n\tout_result = vec4(color, u_opacity);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_scale',\n\t\t\t\tvalue: params.scale !== undefined ? params.scale : 1,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_opacity',\n\t\t\t\tvalue: params.opacity !== undefined ? params.opacity : 1,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to render RGBA amplitude of an input GPULayer's components, defaults to grayscale rendering and works for scalar and vector fields.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input.\n * @param params.components - Component(s) of input GPULayer to render, defaults to 'xyzw'.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.scale - Scaling factor, defaults to 1.  Change this later using uniform \"u_scale\".\n * @param params.opacity - Opacity, defaults to 1.  Change this later using uniform \"u_opacity\".\n * @param params.colorMax - RGB color for amplitude === scale, scaled to [0,1] range, defaults to white.  Change this later using uniform \"u_colorMax\".\n * @param params.colorMin - RGB color for amplitude === 0, scaled to [0,1] range, defaults to black.  Change this later using uniform \"u_colorMin\".\n * @param params.precision - Optionally specify the precision of the input.\n * @returns\n */\n export function renderAmplitudeProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tcomponents?: string,\n\tname?: string,\n\tscale?: number,\n\topacity?: number,\n\tcolorMax?: number[],\n\tcolorMin?: number[],\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst precision = params.precision || '';\n\tconst components = params.components || 'xyzw';\n\tconst numComponents = components.length as GPULayerNumComponents;\n\tconst glslType = glslTypeForType(type, numComponents);\n\tconst glslFloatType = glslTypeForType(FLOAT, numComponents);\n\tconst glslPrefix = glslPrefixForType(type);\n\tconst shouldCast = glslFloatType === glslType;\n\tconst name = params.name || `renderAmplitude_${glslType}_w_${numComponents}_components`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform float u_opacity;\nuniform float u_scale;\nuniform vec3 u_colorMax;\nuniform vec3 u_colorMin;\nuniform ${precision} ${glslPrefix}sampler2D u_state;\nout vec4 out_result;\nvoid main() {\n\tfloat amplitude = u_scale * ${ numComponents === 1 ? 'abs' : 'length'}(${shouldCast ? '' : glslFloatType}(texture(u_state, v_uv)${components === 'xyzw' || components === 'rgba' || components === 'stpq' ? '' : `.${components}`}));\n\tvec3 color = mix(u_colorMin, u_colorMax, amplitude);\n\tout_result = vec4(color, u_opacity);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_scale',\n\t\t\t\tvalue: params.scale !== undefined ? params.scale : 1,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_opacity',\n\t\t\t\tvalue: params.opacity !== undefined ? params.opacity : 1,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_colorMax',\n\t\t\t\tvalue: params.colorMax || [1, 1, 1],\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_colorMin',\n\t\t\t\tvalue: params.colorMin || [0, 0, 0],\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * Init GPUProgram to render signed amplitude of an input GPULayer to linearly interpolated colors.\n * @category GPUProgram Helper\n * @param composer - The current GPUComposer.\n * @param params - Program parameters.\n * @param params.type - The type of the input.\n * @param params.name - Optionally pass in a GPUProgram name, used for error logging.\n * @param params.scale - Scaling factor, defaults to 1.  Change this later using uniform \"u_scale\".\n * @param params.bias - Bias for center point of color range, defaults to 0.  Change this later using uniform \"u_bias\".\n * @param params.opacity - Opacity, defaults to 1.  Change this later using uniform \"u_opacity\".\n * @param params.colorMax - RGB color for amplitude === bias + scale, scaled to [0,1] range, defaults to red.  Change this later using uniform \"u_colorMax\".\n * @param params.colorMin - RGB color for amplitude === bias + scale, scaled to [0,1] range, defaults to blue.  Change this later using uniform \"u_colorMin\".\n * @param params.colorCenter - RGB color for amplitude === bias, scaled to [0,1] range, defaults to white.  Change this later using uniform \"u_colorCenter\".\n * @param params.component - Component of input GPULayer to render, defaults to \"x\".\n * @param params.precision - Optionally specify the precision of the input.\n * @returns\n */\n export function renderSignedAmplitudeProgram(composer: GPUComposer, params: {\n\ttype: GPULayerType,\n\tcomponent?: 'x' | 'y' | 'z' | 'w',\n\tname?: string,\n\tscale?: number,\n\tbias?: number,\n\topacity?: number,\n\tcolorMax?: number[],\n\tcolorMin?: number[],\n\tcolorCenter?: number[],\n\tprecision?: GLSLPrecision,\n}) {\n\tconst { type } = params;\n\tconst precision = params.precision || '';\n\tconst glslType = glslTypeForType(type, 1);\n\tconst glslPrefix = glslPrefixForType(type);\n\tconst castFloat = glslType === 'float';\n\tconst component = params.component || 'x';\n\tconst name = params.name || `renderAmplitude_${glslType}_${component}`;\n\treturn new GPUProgram(composer, {\n\t\tname,\n\t\tfragmentShader: `\nin vec2 v_uv;\nuniform float u_opacity;\nuniform float u_scale;\nuniform float u_bias;\nuniform vec3 u_colorMin;\nuniform vec3 u_colorMax;\nuniform vec3 u_colorCenter;\nuniform ${precision} ${glslPrefix}sampler2D u_state;\nout vec4 out_result;\nvoid main() {\n\tfloat signedAmplitude = u_scale * (${castFloat ? '' : 'float'}(texture(u_state, v_uv).${component}) - u_bias);\n\tfloat amplitudeSign = sign(signedAmplitude);\n\tvec3 interpColor = mix(u_colorMin, u_colorMax, amplitudeSign / 2.0 + 0.5);\n\tvec3 color = mix(u_colorCenter, interpColor, signedAmplitude * amplitudeSign);\n\tout_result = vec4(color, u_opacity);\n}`,\n\t\tuniforms: [\n\t\t\t{\n\t\t\t\tname: 'u_state',\n\t\t\t\tvalue: 0,\n\t\t\t\ttype: INT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_scale',\n\t\t\t\tvalue: params.scale !== undefined ? params.scale : 1,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_bias',\n\t\t\t\tvalue: params.bias || 0,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_opacity',\n\t\t\t\tvalue: params.opacity !== undefined ? params.opacity : 1,\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_colorMin',\n\t\t\t\tvalue: params.colorMin || [0, 0, 1],\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_colorMax',\n\t\t\t\tvalue: params.colorMax || [1, 0, 0],\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'u_colorCenter',\n\t\t\t\tvalue: params.colorCenter || [1, 1, 1],\n\t\t\t\ttype: FLOAT,\n\t\t\t},\n\t\t],\n\t});\n}\n\n/**\n * @private\n */\nexport function wrappedLineColorProgram(composer: GPUComposer) {\n\treturn new GPUProgram(composer, {\n\t\tname: `wrappedLineColor`,\n\t\tfragmentShader: `\nin vec2 v_lineWrapping;\nuniform vec4 u_value;\nout vec4 out_result;\nvoid main() {\n\t// Check if this line has wrapped.\n\tif ((v_lineWrapping.x != 0.0 && v_lineWrapping.x != 1.0) || (v_lineWrapping.y != 0.0 && v_lineWrapping.y != 1.0)) {\n\t\t// Render nothing.\n\t\tdiscard;\n\t\treturn;\n\t}\n\tout_result = vec4(u_value);\n}`,\n\t});\n}\n","// @ts-ignore\nimport { changeDpiBlob } from 'changedpi';\nimport { isArray, isFiniteNumber, isNonNegativeInteger } from '@amandaghassaei/type-checks';\nimport { GPULayer } from './GPULayer';\nimport './GPULayerHelpers';\nimport {\n\tGPULayerType,\n\tFLOAT,\n\tINT,\n\tGLSLVersion,\n\tGLSL1,\n\tGLSL3,\n\tWEBGL2,\n\tWEBGL1,\n\tEXPERIMENTAL_WEBGL,\n\tPROGRAM_NAME_INTERNAL,\n\tCompileTimeConstants,\n\tDEFAULT_PROGRAM_NAME,\n\tSEGMENT_PROGRAM_NAME,\n\tLAYER_POINTS_PROGRAM_NAME,\n\tLAYER_VECTOR_FIELD_PROGRAM_NAME,\n\tLAYER_LINES_PROGRAM_NAME,\n\tErrorCallback,\n\tDEFAULT_CIRCLE_NUM_SEGMENTS,\n\tUINT,\n\tGLSLPrecision,\n\tPRECISION_HIGH_P,\n\tDEFAULT_ERROR_CALLBACK,\n\tGPULayerState,\n\tGPUIO_VS_POSITION_W_ACCUM,\n\tGPUIO_VS_WRAP_X,\n\tGPUIO_VS_WRAP_Y,\n\tMAX_FLOAT_INT,\n\tEXPERIMENTAL_WEBGL2,\n\tBoundaryEdge,\n\tBOUNDARY_LEFT,\n\tBOUNDARY_RIGHT,\n\tBOUNDARY_TOP,\n\tBOUNDARY_BOTTOM,\n\tLAYER_MESH_PROGRAM_NAME,\n} from './constants';\nimport { GPUProgram } from './GPUProgram';\n// Just importing the types here.\n// This repo does not depend on three, only @types/three is installed as dev dependency.\nimport type {\n\tWebGLRenderer,\n\tVector4,\n\tWebGL1Renderer,\n} from 'three';\nimport * as ThreejsUtils from './Vector4';\nimport {\n\tisWebGL2,\n\tinitSequentialFloatArray,\n\tpreprocessVertexShader,\n\tcompileShader,\n\tindexOfLayerInArray,\n} from './utils';\nimport { DEFAULT_VERT_SHADER_SOURCE } from './glsl/vertex/DefaultVertexShader';\nimport { LAYER_LINES_VERTEX_SHADER_SOURCE } from './glsl/vertex/LayerLinesVertexShader';\nimport { SEGMENT_VERTEX_SHADER_SOURCE } from './glsl/vertex/SegmentVertexShader';\nimport { LAYER_POINTS_VERTEX_SHADER_SOURCE } from './glsl/vertex/LayerPointsVertexShader';\nimport { LAYER_VECTOR_FIELD_VERTEX_SHADER_SOURCE } from './glsl/vertex/LayerVectorFieldVertexShader';\nimport { LAYER_MESH_VERTEX_SHADER_SOURCE } from './glsl/vertex/LayerMeshVertexShader';\nimport { uniformTypeForType } from './conversions';\nimport {\n\tcopyProgram,\n\tsetValueProgram,\n} from './Programs';\nimport { checkRequiredKeys, checkValidKeys, isValidClearValue } from './checks';\nimport { bindFrameBuffer } from './framebuffers';\nimport { getExtension, OES_VERTEX_ARRAY_OBJECT } from './extensions';\nimport { GPUIndexBuffer } from './GPUIndexBuffer';\n\nexport class GPUComposer {\n\t/**\n\t * The WebGL context associated with this GPUComposer.\n\t */\n\treadonly gl!: WebGLRenderingContext | WebGL2RenderingContext;\n\t/**\n\t * The GLSL version being used by the GPUComposer.\n\t */\n\treadonly glslVersion!: GLSLVersion;\n\t/**\n\t * Flag for WebGL version.\n\t */\n\treadonly isWebGL2!: boolean;\n\t/**\n\t * The global integer precision to apply to shader programs.\n\t */\n\treadonly intPrecision!: GLSLPrecision;\n\t/**\n\t * The global float precision to apply to shader programs.\n\t */\n\treadonly floatPrecision!: GLSLPrecision;\n\t/**\n\t * Store the width and height of the current canvas at full res.\n\t */\n\tprivate _width!: number;\n\tprivate _height!: number;\n\n\t/**\n\t * @private\n\t */\n\treadonly _errorCallback: ErrorCallback;\n\tprivate _errorState = false;\n\n\t// Save threejs renderer if passed in.\n\t/**\n\t * @private\n\t */\n\treadonly _threeRenderer?: WebGLRenderer | WebGL1Renderer;\n\t\n\t/**\n\t * Precomputed vertex buffers (inited as needed).\n\t */\n\tprivate _quadPositionsBuffer?: WebGLBuffer;\n\tprivate _boundaryPositionsBuffer?: WebGLBuffer;\n\t// Cache multiple circle positions buffers for various num segments, use numSegments as key.\n\tprivate _circlePositionsBuffer: { [key: number]: WebGLBuffer } = {};\n\tprivate _pointIndexArray?: Float32Array;\n\tprivate _pointIndexBuffer?: WebGLBuffer;\n\tprivate _meshIndexArray?: Float32Array;\n\tprivate _meshIndexBuffer?: WebGLBuffer;\n\tprivate _vectorFieldIndexArray?: Float32Array;\n\tprivate _vectorFieldIndexBuffer?: WebGLBuffer;\n\tprivate _indexedLinesIndexBuffer?: WebGLBuffer;\n\t/**\n\t * Cache vertex shader attribute locations.\n\t */\n\tprivate _vertexAttributeLocations: {[key: string]: WeakMap<WebGLProgram, number>} = {};\n\tprivate _enabledVertexAttributes: {[key: number]: boolean} = {};;\n\n\t// Keep track of all GL extensions that have been loaded.\n\t/**\n\t * @private\n\t */\n\treadonly _extensions: { [key: string]: any } = {};\n\n\t// Value to set when clear() is called, defaults to zero.\n\t// Access with GPUComposer.clearValue.\n\tprivate _clearValue: number | number[] = 0;\n\tprivate _clearValueVec4? : number[];\n\n\t/**\n\t * Cache some generic programs for copying data.\n\t * These are needed for rendering partial screen geometries.\n\t */\n\tprivate readonly _copyPrograms: {\n\t\t[FLOAT]?: GPUProgram,\n\t\t[INT]?: GPUProgram,\n\t\t[UINT]?: GPUProgram,\n\t} = {};\n\n\t// Other util programs.\n\t/**\n\t * Cache some generic programs for setting value from uniform.\n\t * These are used by GOUComposer.clear() and GPULayer.clear(), among other things\n\t */\n\tprivate readonly _setValuePrograms: {\n\t\t[FLOAT]?: GPUProgram,\n\t\t[INT]?: GPUProgram,\n\t\t[UINT]?: GPUProgram,\n\t} = {};\n\tprivate _wrappedLineColorProgram?: GPUProgram; // We only need a FLOAT version of this.\n\n\t/**\n\t * Vertex shaders are shared across all GPUProgram instances.\n\t * @private\n\t */\n\treadonly _vertexShaders: {[key in PROGRAM_NAME_INTERNAL]: {\n\t\tsrc: string,\n\t\tcompiledShaders: { [key: string]: WebGLShader },\n\t}} = {\n\t\t[DEFAULT_PROGRAM_NAME]: {\n\t\t\tsrc: DEFAULT_VERT_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t\t[SEGMENT_PROGRAM_NAME]: {\n\t\t\tsrc: SEGMENT_VERTEX_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t\t[LAYER_POINTS_PROGRAM_NAME]: {\n\t\t\tsrc: LAYER_POINTS_VERTEX_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t\t[LAYER_VECTOR_FIELD_PROGRAM_NAME]: {\n\t\t\tsrc: LAYER_VECTOR_FIELD_VERTEX_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t\t[LAYER_LINES_PROGRAM_NAME]: {\n\t\t\tsrc: LAYER_LINES_VERTEX_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t\t[LAYER_MESH_PROGRAM_NAME]: {\n\t\t\tsrc: LAYER_MESH_VERTEX_SHADER_SOURCE,\n\t\t\tcompiledShaders: {},\n\t\t},\n\t};\n\n\t/**\n\t * Flag to set GPUComposer for verbose logging, defaults to false.\n\t */\n\tverboseLogging = false;\n\n\t/**\n\t * Variables for tracking fps of GPUComposer with tick().\n\t */\n\tprivate _lastTickTime?: number;\n\tprivate _lastTickFPS?: number\n\tprivate _numTicks = 0;\n\n\t/**\n\t * Create a GPUComposer from an existing THREE.WebGLRenderer that shares a single WebGL context.\n\t * @param renderer - Threejs WebGLRenderer.\n\t * @param params - GPUComposer parameters.\n\t * @param params.glslVersion - Set the GLSL version to use, defaults to GLSL3 for WebGL2 contexts.\n\t * @param params.intPrecision - Set the global integer precision in shader programs.\n\t * @param params.floatPrecision - Set the global float precision in shader programs.\n\t * @param params.clearValue - Value to write to canvas when GPUComposer.clear() is called.\n\t * @param params.verboseLogging - Set the verbosity of GPUComposer logging (defaults to false).\n\t * @param params.errorCallback - Custom error handler, defaults to throwing an Error with message.\n\t * @returns \n\t */\n\t static initWithThreeRenderer(\n\t\trenderer: WebGLRenderer| WebGL1Renderer,\n\t\tparams?: {\n\t\t\tglslVersion?: GLSLVersion,\n\t\t\tintPrecision?: GLSLPrecision,\n\t\t\tfloatPrecision?: GLSLPrecision,\n\t\t\tclearValue?: number | number[],\n\t\t\tverboseLogging?: boolean,\n\t\t\terrorCallback?: ErrorCallback,\n\t\t},\n\t) {\n\t\tconst composer = new GPUComposer(\n\t\t\t{\n\t\t\t\tfloatPrecision: renderer.capabilities.precision as GLSLPrecision,\n\t\t\t\tintPrecision: renderer.capabilities.precision as GLSLPrecision,\n\t\t\t\t...params,\n\t\t\t\tcanvas: renderer.domElement,\n\t\t\t\tcontext: renderer.getContext(),\n\t\t\t},\n\t\t);\n\t\t// Attach renderer.\n\t\t// @ts-ignore\n\t\tcomposer._threeRenderer = renderer;\n\t\treturn composer;\n\t}\n\n\t/**\n\t * Create a GPUComposer.\n\t * @param params - GPUComposer parameters.\n\t * @param params.canvas - HTMLCanvasElement associated with this GPUComposer (you must add to DOM yourself).\n\t * @param params.context - Pass in a WebGL context for the GPUComposer to user.\n\t * @param params.contextID - Set the contextID to use when initing a new WebGL context.\n\t * @param params.contextAttributes - Options to pass to WebGL context on initialization (see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext for more information).\n\t * @param params.glslVersion - Set the GLSL version to use, defaults to GLSL3 for WebGL2 contexts.\n\t * @param params.intPrecision - Set the global integer precision in shader programs.\n\t * @param params.floatPrecision - Set the global float precision in shader programs.\n\t * @param params.clearValue - Value to write to canvas when GPUComposer.clear() is called.\n\t * @param params.verboseLogging - Set the verbosity of GPUComposer logging (defaults to false).\n\t * @param params.errorCallback - Custom error handler, defaults to throwing an Error with message.\n\t */\n\tconstructor(\n\t\tparams: {\n\t\t\tcanvas: HTMLCanvasElement,\n\t\t\tcontext?: WebGLRenderingContext | WebGL2RenderingContext,\n\t\t\tcontextID?: typeof WEBGL2 | typeof WEBGL1 | typeof EXPERIMENTAL_WEBGL | typeof EXPERIMENTAL_WEBGL2 | string,\n\t\t\tcontextAttributes?: {\n\t\t\t\t[key: string]: any,\n\t\t\t},\n\t\t\tglslVersion?: GLSLVersion,\n\t\t\tintPrecision?: GLSLPrecision,\n\t\t\tfloatPrecision?: GLSLPrecision,\n\t\t\tclearValue?: number | number[],\n\t\t\tverboseLogging?: boolean,\n\t\t\t// Optionally pass in an error callback in case we want to handle errors related to webgl support.\n\t\t\t// e.g. throw up a modal telling user this will not work on their device.\n\t\t\terrorCallback?: ErrorCallback,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['canvas', 'context', 'contextID', 'contextAttributes', 'glslVersion', 'intPrecision', 'floatPrecision', 'clearValue', 'verboseLogging', 'errorCallback'];\n\t\tconst requiredKeys = ['canvas'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer(params)');\n\n\t\tif (params.verboseLogging !== undefined) this.verboseLogging = params.verboseLogging;\n\n\t\t// Save callback in case we run into an error.\n\t\tconst self = this;\n\t\tthis._errorCallback = (message: string) => {\n\t\t\tif (self._errorState) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tself._errorState = true;\n\t\t\tparams.errorCallback ? params.errorCallback(message) : DEFAULT_ERROR_CALLBACK(message);\n\t\t}\n\n\t\tconst { canvas } = params;\n\t\tlet gl = params.context;\n\n\t\t// Init GL.\n\t\tif (!gl) {\n\t\t\t// Init a gl context if not passed in.\n\t\t\tif (params.contextID) {\n\t\t\t\tconst _gl = canvas.getContext(params.contextID, params.contextAttributes) as WebGLRenderingContext | null;\n\t\t\t\tif (!_gl) {\n\t\t\t\t\tconsole.warn(`Unable to initialize WebGL context with contextID: ${params.contextID}.`);\n\t\t\t\t} else {\n\t\t\t\t\tgl = _gl;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!gl) {\n\t\t\t\tconst _gl = canvas.getContext(WEBGL2, params.contextAttributes)  as WebGL2RenderingContext | null\n\t\t\t\t\t|| canvas.getContext(WEBGL1, params.contextAttributes)  as WebGLRenderingContext | null\n\t\t\t\t\t|| canvas.getContext(EXPERIMENTAL_WEBGL2, params.contextAttributes)  as WebGLRenderingContext | null\n\t\t\t\t\t|| canvas.getContext(EXPERIMENTAL_WEBGL, params.contextAttributes)  as WebGLRenderingContext | null;\n\t\t\t\tif (_gl) {\n\t\t\t\t\tgl = _gl;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!gl) {\n\t\t\t\tthis._errorCallback('Unable to initialize WebGL context.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.isWebGL2 = isWebGL2(gl);\n\t\tif (this.isWebGL2) {\n\t\t\tif (this.verboseLogging) console.log('Using WebGL 2.0 context.');\n\t\t} else {\n\t\t\tif (this.verboseLogging) console.log('Using WebGL 1.0 context.');\n\t\t}\n\t\tthis.gl = gl;\n\n\t\t// Save glsl version, default to 3 if using webgl2 context.\n\t\tlet glslVersion = params.glslVersion || (this.isWebGL2 ? GLSL3 : GLSL1);\n\t\tif (!this.isWebGL2 && glslVersion === GLSL3) {\n\t\t\tconsole.warn('GLSL3.x is incompatible with WebGL1.0 contexts, falling back to GLSL1.');\n\t\t\tglslVersion = GLSL1; // Fall back to GLSL1 in these cases.\n\t\t}\n\t\tthis.glslVersion = glslVersion;\n\n\t\t// Set default int/float precision.\n\t\tthis.intPrecision = params.intPrecision || PRECISION_HIGH_P;\n\t\tthis.floatPrecision = params.floatPrecision || PRECISION_HIGH_P;\n\n\t\t// GL setup.\n\t\t// Disable depth testing globally.\n\t\tgl.disable(gl.DEPTH_TEST);\n\t\t// Set unpack alignment to 1 so we can have textures of arbitrary dimensions.\n\t\t// https://stackoverflow.com/questions/51582282/error-when-creating-textures-in-webgl-with-the-rgb-format\n\t\tgl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n\n\t\t// Unbind active buffer.\n\t\tif (this.isWebGL2) (gl as WebGL2RenderingContext).bindVertexArray(null);\n\t\telse {\n\t\t\tconst ext = getExtension(this, OES_VERTEX_ARRAY_OBJECT, true);\n\t\t\text.bindVertexArrayOES(null)\n\t\t}\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n\t\tif (params.clearValue !== undefined) {\n\t\t\tthis.clearValue = params.clearValue;\n\t\t}\n\n\t\t// Canvas setup.\n\t\tthis.resize([canvas.clientWidth, canvas.clientHeight]);\n\n\t\tif (this.verboseLogging) {\n\t\t\t// Log number of textures available.\n\t\t\tconsole.log(`${this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS)} textures max.`);\n\t\t}\n\t}\n\n\tget canvas() {\n\t\treturn this.gl.canvas as HTMLCanvasElement;\n\t}\n\n\t/**\n\t * Gets (and caches) generic set value programs for several input types.\n\t * Used for GPUComposer.clear() and GPULayer.clear(), among other things.\n\t * @private\n\t */\n\t_setValueProgramForType(type: GPULayerType) {\n\t\tconst { _setValuePrograms } = this;\n\t\tconst key = uniformTypeForType(type, this.glslVersion);\n\t\tif (_setValuePrograms[key] === undefined) {\n\t\t\t_setValuePrograms[key] = setValueProgram(this, { type, value: [0, 0, 0, 0] });\n\t\t}\n\t\treturn _setValuePrograms[key]!;\n\t}\n\t/**\n\t * Gets (and caches) generic copy programs for several input types.\n\t * Used for partial rendering to output, among other things.\n\t * @private\n\t */\n\t_copyProgramForType(type: GPULayerType) {\n\t\tconst { _copyPrograms } = this;\n\t\tconst key = uniformTypeForType(type, this.glslVersion);\n\t\tif (_copyPrograms[key] === undefined) {\n\t\t\t_copyPrograms[key] = copyProgram(this, { type });\n\t\t}\n\t\treturn _copyPrograms[key]!;\n\t}\n\t// /**\n\t//  * Gets (and caches) a generic color program for wrapped line segment rendering.\n\t//  * @private\n\t//  */\n\t// private _getWrappedLineColorProgram() {\n\t// \tif (this._wrappedLineColorProgram === undefined) {\n\t// \t\tthis._wrappedLineColorProgram = wrappedLineColorProgram({ composer: this });\n\t// \t}\n\t// \treturn this._wrappedLineColorProgram;\n\t// }\n\n\t/**\n\t * Init a buffer for vertex shader attributes.\n\t * @private\n\t */\n\tprivate _initVertexBuffer(\n\t\tdata: Float32Array,\n\t) {\n\t\tconst { _errorCallback, gl, isWebGL2 } = this;\n\t\t// Unbind any  VAOs.\n\t\tif (isWebGL2) (gl as WebGL2RenderingContext).bindVertexArray(null);\n\t\telse {\n\t\t\tconst ext = getExtension(this, OES_VERTEX_ARRAY_OBJECT, true);\n\t\t\text.bindVertexArrayOES(null)\n\t\t}\n\t\tconst buffer = gl.createBuffer();\n\t\tif (!buffer) {\n\t\t\t_errorCallback('Unable to allocate gl buffer.');\n\t\t\treturn;\n\t\t}\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t// Add buffer data.\n\t\tgl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\t\treturn buffer;\n\t}\n\t/**\n\t * Get (and cache) positions buffer for rendering full screen quads.\n\t * @private\n\t */\n\t_getQuadPositionsBuffer() {\n\t\tif (this._quadPositionsBuffer === undefined) {\n\t\t\tconst fsQuadPositions = new Float32Array([ -1, -1, 1, -1, -1, 1, 1, 1 ]);\n\t\t\tthis._quadPositionsBuffer = this._initVertexBuffer(fsQuadPositions)!;\n\t\t}\n\t\treturn this._quadPositionsBuffer!;\n\t}\n\t/**\n\t * Get (and cache) positions buffer for rendering lines on boundary.\n\t * @private\n\t */\n\tprivate _getBoundaryPositionsBuffer() {\n\t\tif (this._boundaryPositionsBuffer === undefined) {\n\t\t\tconst boundaryPositions = new Float32Array([ -1, -1, 1, -1, 1, 1, -1, 1, -1, -1 ]);\n\t\t\tthis._boundaryPositionsBuffer = this._initVertexBuffer(boundaryPositions)!;\n\t\t}\n\t\treturn this._boundaryPositionsBuffer!;\n\t}\n\t/**\n\t * Get (and cache) positions buffer for rendering circle with various numbers of segments.\n\t * @private\n\t */\n\tprivate _getCirclePositionsBuffer(numSegments: number) {\n\t\tconst { _circlePositionsBuffer } = this;\n\t\tif (_circlePositionsBuffer[numSegments] == undefined) {\n\t\t\tconst unitCirclePoints = [0, 0];\n\t\t\tfor (let i = 0; i < numSegments; i++) {\n\t\t\t\tunitCirclePoints.push(\n\t\t\t\t\tMath.cos(2 * Math.PI * i / numSegments),\n\t\t\t\t\tMath.sin(2 * Math.PI * i / numSegments),\n\t\t\t\t);\n\t\t\t}\n\t\t\t// Add one more point to close the loop on the triangle fan.\n\t\t\tunitCirclePoints.push(\n\t\t\t\tMath.cos(0),\n\t\t\t\tMath.sin(0),\n\t\t\t);\n\t\t\tconst circlePositions = new Float32Array(unitCirclePoints);\n\t\t\tconst buffer = this._initVertexBuffer(circlePositions)!;\n\t\t\t_circlePositionsBuffer[numSegments] = buffer;\n\t\t}\n\t\treturn _circlePositionsBuffer[numSegments];\n\t}\n\n\t/**\n\t * Used internally, see GPULayer.clone() for public API.\n\t * @private\n\t */\n\t_cloneGPULayer(gpuLayer: GPULayer, name?: string) {\n\t\tconst dimensions = gpuLayer.is1D() ? gpuLayer.length : [gpuLayer.width, gpuLayer.height];\n\n\t\tconst clone = new GPULayer(this, {\n\t\t\tname: name || `${gpuLayer.name}-clone`,\n\t\t\tdimensions,\n\t\t\ttype: gpuLayer.type,\n\t\t\tnumComponents: gpuLayer.numComponents,\n\t\t\tfilter: gpuLayer.filter,\n\t\t\twrapX: gpuLayer.wrapX,\n\t\t\twrapY: gpuLayer.wrapY,\n\t\t\tnumBuffers: gpuLayer.numBuffers,\n\t\t\tclearValue: gpuLayer.clearValue,\n\t\t});\n\n\t\t// Copy current state with several draw calls.\n\t\tconst copyProgram = this._copyProgramForType(gpuLayer.type);\n\t\t// Set bufferIndex = gpuLayer.numBuffers - 1.\n\t\tfor (let i = 0; i < gpuLayer.numBuffers - 1; i++ ){\n\t\t\tclone.incrementBufferIndex();\n\t\t}\n\t\tfor (let i = 0; i < gpuLayer.numBuffers; i++) {\n\t\t\tthis.step({\n\t\t\t\tprogram: copyProgram,\n\t\t\t\tinput: gpuLayer.getStateAtIndex(i),\n\t\t\t\toutput: clone,\n\t\t\t});\n\t\t}\n\t\t// Increment clone's buffer index until it is identical to the original layer.\n\t\tfor (let i = -1; i < gpuLayer.bufferIndex; i++ ){\n\t\t\tclone.incrementBufferIndex();\n\t\t}\n\n\t\treturn clone;\n\t}\n\n\t/**\n\t * Gets (and caches) vertex shaders based on shader source code and compile time constants.\n\t * Tries to minimize the number of new vertex shaders that must be compiled.\n\t * @private\n\t */\n\t _getVertexShader(\n\t\tname: PROGRAM_NAME_INTERNAL,\n\t\tvertexID: string,\n\t\tvertexCompileConstants: CompileTimeConstants,\n\t\tprogramName: string,\n\t) {\n\t\tconst {\n\t\t\t_errorCallback,\n\t\t\t_vertexShaders,\n\t\t\tgl,\n\t\t\tglslVersion,\n\t\t\tintPrecision,\n\t\t\tfloatPrecision,\n\t\t} = this;\n\t\tconst { compiledShaders, src } = _vertexShaders[name];\n\t\tif (vertexID === '') vertexID = '_default';\n\t\tif (compiledShaders[vertexID] === undefined) {\n\t\t\t// Compile a vertex shader (this only happens once for each possible vertex shader across all GPUPrograms).\n\t\t\tif (src === '') {\n\t\t\t\tthrow new Error(`Error compiling GPUProgram \"${programName}\": no source for vertex shader with name \"${name}\".`);\n\t\t\t}\n\t\t\tconst preprocessedSrc = preprocessVertexShader(src, glslVersion);\n\t\t\tconst shader = compileShader(\n\t\t\t\tgl,\n\t\t\t\tglslVersion,\n\t\t\t\tintPrecision,\n\t\t\t\tfloatPrecision,\n\t\t\t\tpreprocessedSrc,\n\t\t\t\tgl.VERTEX_SHADER,\n\t\t\t\tprogramName,\n\t\t\t\t_errorCallback,\n\t\t\t\tvertexCompileConstants,\n\t\t\t\tundefined,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tif (!shader) {\n\t\t\t\t_errorCallback(`Unable to compile \"${name}${vertexID}\" vertex shader for GPUProgram \"${programName}\".`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Save the results so this does not have to be repeated.\n\t\t\tcompiledShaders[vertexID] = shader;\n\t\t}\n\t\treturn compiledShaders[vertexID];\n\t}\n\n\t/**\n\t * Notify the GPUComposer that the canvas should change size.\n\t * @param dimensions - The new [width, height] to resize to.\n\t */\n\tresize(dimensions: [number, number]) {\n\t\tconst { canvas } = this;\n\t\tconst [width, height] = dimensions;\n\t\tif (!isNonNegativeInteger(width) || !isNonNegativeInteger(height)) {\n\t\t\tif (!isArray(dimensions)) throw new Error(`Invalid dimensions parameter supplied to GPUComposer.resize(), expected dimensions array of length 2, got: ${JSON.stringify(dimensions)}`);\n\t\t\telse throw new Error(`Invalid dimensions parameter supplied to GPUComposer.resize(), expected positive integers, got: ${width}, ${height}`);\n\t\t}\n\t\t// Set correct canvas pixel size.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/By_example/Canvas_size_and_WebGL\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\t// Save dimensions.\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t};\n\n\t/**\n\t * Set inputs and outputs in preparation for draw call.\n\t * @private\n\t */\n\tprivate _drawSetup(\n\t\tgpuProgram: GPUProgram,\n\t\tprogramName: PROGRAM_NAME_INTERNAL,\n\t\tvertexCompileConstants: CompileTimeConstants,\n\t\tfullscreenRender: boolean,\n\t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\toutput?: GPULayer | GPULayer[],\n\t) {\n\t\tconst { gl } = this;\n\n\t\t// CAUTION: the order of these next few lines is important.\n\n\t\t// Get a shallow copy of current textures.\n\t\t// This line must come before this._setOutputLayer() as it depends on current internal state.\n\t\tconst inputTextures: GPULayerState[] = [];\n\t\tif (input) {\n\t\t\tif ((input as GPULayerState).layer) {\n\t\t\t\tinputTextures.push(input as GPULayerState);\n\t\t\t} else if (input.constructor === GPULayer) {\n\t\t\t\tinputTextures.push((input as GPULayer).currentState);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < (input as (GPULayer | GPULayerState)[]).length; i++) {\n\t\t\t\t\tconst layer = (input as (GPULayer | GPULayerState)[])[i];\n\t\t\t\t\tinputTextures.push((layer as GPULayer).currentState ? (layer as GPULayer).currentState : layer as GPULayerState);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst program = gpuProgram._getProgramWithName(programName, vertexCompileConstants, inputTextures)!;\n\n\t\t// Set output framebuffer.\n\t\t// This may modify WebGL internal state.\n\t\tthis._setOutputLayer(gpuProgram.name, fullscreenRender, input, output);\n\n\t\t// Set current program.\n\t\t// Must do this before calling gpuProgram._setInternalFragmentUniforms(program, inputTextures);\n\t\tgl.useProgram(program);\n\n\t\t// Set input textures.\n\t\tfor (let i = 0; i < inputTextures.length; i++) {\n\t\t\tgl.activeTexture(gl.TEXTURE0 + i);\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTextures[i].texture);\n\t\t}\n\t\tgpuProgram._setInternalFragmentUniforms(program, inputTextures);\n\t\treturn program;\n\t}\n\t/**\n\t * Set blend mode for draw call.\n\t * @private\n\t */\n\tprivate _setBlendMode(blendAlpha?: boolean) {\n\t\tconst { gl } = this;\n\t\tif (blendAlpha) {\n\t\t\tgl.enable(gl.BLEND);\n\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\t\t}\n\t}\n\t/**\n\t * Add GPULayer to inputs if needed.\n\t * @private\n\t */\n\tprivate _addLayerToInputs(\n\t\tlayer: GPULayer,\n\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t) {\n\t\t// Add layer to end of input if needed.\n\t\t// Do this with no mutations.\n\t\tif (input === undefined) {\n\t\t\treturn [layer];\n\t\t}\n\t\tif (isArray(input)) {\n\t\t\t// Return input with layer added if needed.\n\t\t\tif (indexOfLayerInArray(layer, (input as (GPULayer | GPULayerState)[])) >= 0) {\n\t\t\t\treturn input  as (GPULayer | GPULayerState)[];\n\t\t\t}\n\t\t\treturn [...(input as (GPULayer | GPULayerState)[]), layer];\n\t\t}\n\t\tif (input === layer || (input as GPULayerState).layer === layer) {\n\t\t\treturn [input as GPULayerState];\n\t\t}\n\t\treturn [(input as GPULayer | GPULayerState), layer];\n\t}\n\t/**\n\t * Copy data from input to output.\n\t * This is used when rendering to part of output state (not fullscreen quad).\n\t * @private\n\t */\n\tprivate _passThroughLayerDataFromInputToOutput(state: GPULayer) {\n\t\t// TODO: figure out the fastest way to copy a texture.\n\t\tconst copyProgram = this._copyProgramForType(state._internalType);\n\t\tthis.step({\n\t\t\tprogram: copyProgram,\n\t\t\tinput: state,\n\t\t\toutput: state,\n\t\t});\n\t}\n\t/**\n\t * Set output for draw command.\n\t * @private\n\t */\n\tprivate _setOutputLayer(\n\t\tprogramName: string,\n\t\tfullscreenRender: boolean,\n\t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t) {\n\t\tconst { gl, isWebGL2 } = this;\n\n\t\t// Render to screen.\n\t\tif (!output) {\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t// Resize viewport.\n\t\t\tconst { _width, _height } = this;\n\t\t\tgl.viewport(0, 0, _width, _height);\n\t\t\treturn;\n\t\t}\n\n\t\tconst outputArray = (isArray(output) ? output : [output]) as GPULayer[];\n\n\t\tfor (let i = 0, numOutputs = outputArray.length; i < numOutputs; i++) {\n\t\t\tconst outputLayer = outputArray[i];\n\t\t\t// Check if output is same as one of input layers.\n\t\t\tif (input && ((input === output || (input as GPULayerState).layer === output) ||\n\t\t\t\t(isArray(input) && indexOfLayerInArray(outputLayer, input as (GPULayer | GPULayerState)[]) >= 0))) {\n\t\t\t\tif (outputLayer.numBuffers === 1) {\n\t\t\t\t\tthrow new Error(`Cannot use same buffer \"${outputLayer.name}\" for input and output of a program. Try increasing the number of buffers in your output layer to at least 2 so you can render to nextState using currentState as an input.`);\n\t\t\t\t}\n\t\t\t\tif (fullscreenRender) {\n\t\t\t\t\t// Render and increment buffer.\n\t\t\t\t\toutputLayer._prepareForWrite(true);\n\t\t\t\t} else {\n\t\t\t\t\t// Pass input texture through to output.\n\t\t\t\t\tthis._passThroughLayerDataFromInputToOutput(outputLayer);\n\t\t\t\t\t// Render to output without incrementing buffer.\n\t\t\t\t\toutputLayer._prepareForWrite(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (fullscreenRender) {\n\t\t\t\t\t// Render and increment buffer.\n\t\t\t\t\toutputLayer._prepareForWrite(true);\n\t\t\t\t} else {\n\t\t\t\t\t// If we are doing a sneaky thing with a swapped texture and are\n\t\t\t\t\t// only rendering part of the screen, we may need to add a copy operation.\n\t\t\t\t\tif (outputLayer._usingTextureOverrideForCurrentBuffer()) {\n\t\t\t\t\t\tthis._passThroughLayerDataFromInputToOutput(outputLayer);\n\t\t\t\t\t}\n\t\t\t\t\toutputLayer._prepareForWrite(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Bind framebuffer.\n\t\tconst layer0 = outputArray[0];\n\t\tlet additionalTextures: WebGLTexture[] | undefined = undefined;\n\t\tconst drawBuffers = [gl.COLOR_ATTACHMENT0];\n\t\tif (outputArray.length > 1) {\n\t\t\tadditionalTextures = [];\n\t\t\tfor (let i = 1, numOutputs = outputArray.length; i < numOutputs; i++) {\n\t\t\t\tadditionalTextures.push(outputArray[i]._currentTexture);\n\t\t\t\tdrawBuffers.push(gl.COLOR_ATTACHMENT0 + i);\n\t\t\t}\n\t\t}\n\t\tbindFrameBuffer(this, layer0, layer0._currentTexture, additionalTextures);\n\t\t// Tell WebGL to draw to output textures.\n\t\tif (isWebGL2) {\n\t\t\t(gl as WebGL2RenderingContext).drawBuffers(drawBuffers);\n\t\t}\n\t\t// Resize viewport.\n\t\tconst { width, height } = this._widthHeightForOutput(programName, output);\n\t\tgl.viewport(0, 0, width, height);\n\t};\n\t/**\n\t * Set vertex shader attribute.\n\t * @private\n\t */\n\tprivate _setVertexAttribute(program: WebGLProgram, name: string, size: number, programName: string) {\n\t\tconst { gl, _vertexAttributeLocations, _enabledVertexAttributes } = this;\n\t\t// Enable vertex attribute array.\n\t\tlet locations = _vertexAttributeLocations[name];\n\t\tlet location;\n\t\tif (!locations) {\n\t\t\tlocations = new WeakMap<WebGLProgram, number>();\n\t\t\t_vertexAttributeLocations[name] = locations;\n\t\t} else {\n\t\t// \tlocation = locations.get(program);\n\t\t}\n\t\tif (location === undefined) {\n\t\t\tlocation = gl.getAttribLocation(program, name);\n\t\t\tif (location < 0) {\n\t\t\t\tthrow new Error(`Unable to find vertex attribute \"${name}\" in program \"${programName}\".`);\n\t\t\t}\n\t\t\t// Cache attribute location.\n\t\t\tlocations.set(program, location);\n\t\t}\n\n\t\t// INT types not supported for attributes in WebGL1.\n\t\t// We're only really using INT vertex attributes for WebGL1 cases anyway,\n\t\t// because WebGL1 does not support gl_VertexID.\n\t\t// Use FLOAT rather than SHORT bc FLOAT covers more INT range.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n\t\tgl.vertexAttribPointer(location, size, gl.FLOAT, false, 0, 0);\n\t\t// Enable the attribute.\n\t\tgl.enableVertexAttribArray(location);\n\t\t_enabledVertexAttributes[location] = true;\n\t}\n\tprivate _disableVertexAttributes() {\n\t\tconst { _enabledVertexAttributes, gl } = this;\n\t\tconst locations = Object.keys(_enabledVertexAttributes) as any as number[];\n\t\tfor (let i = 0, numAttributes = locations.length; i < numAttributes; i++) {\n\t\t\tconst location = locations[i];\n\t\t\tif (_enabledVertexAttributes[location]) {\n\t\t\t\tgl.disableVertexAttribArray(location);\n\t\t\t\tdelete _enabledVertexAttributes[location];\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Set vertex shader position attribute.\n\t * @private\n\t */\n\t_setPositionAttribute(program: WebGLProgram, programName: string) {\n\t\tthis._setVertexAttribute(program, 'a_gpuio_position', 2, programName);\n\t}\n\t/**\n\t * Set vertex shader index attribute.\n\t * @private\n\t */\n\tprivate _setIndexAttribute(program: WebGLProgram, programName: string) {\n\t\tthis._setVertexAttribute(program, 'a_gpuio_index', 1, programName);\n\t}\n\t/**\n\t * Set vertex shader uv attribute.\n\t * @private\n\t */\n\tprivate _setUVAttribute(program: WebGLProgram, programName: string) {\n\t\tthis._setVertexAttribute(program, 'a_gpuio_uv', 2, programName);\n\t}\n\n\tprivate _widthHeightForOutput(programName: string, output?: GPULayer | GPULayer[]) {\n\t\tif (isArray(output)) {\n\t\t\t// Check that all outputs have the same size.\n\t\t\tconst firstOutput = (output as GPULayer[])[0];\n\t\t\tconst width = firstOutput ? firstOutput.width : this._width;\n\t\t\tconst height = firstOutput ? firstOutput.height : this._height;\n\t\t\tfor (let i = 1, numOutputs = (output as GPULayer[]).length; i < numOutputs; i++) {\n\t\t\t\tconst nextOutput = (output as GPULayer[])[i];\n\t\t\t\tif (nextOutput.width !== width || nextOutput.height !== height) {\n\t\t\t\t\tthrow new Error(`Output GPULayers must have the same dimensions, got dimensions [${width}, ${height}] and [${nextOutput.width}, ${nextOutput.height}] for program \"${programName}\".`);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { width, height };\n\t\t}\n\t\tconst width = output ? (output as GPULayer).width : this._width;\n\t\tconst height = output ? (output as GPULayer).height : this._height;\n\t\treturn { width, height};\n\t}\n\n\t/**\n\t * Call stepping/drawing function once for each output.\n\t * This is required when attempting to draw to multiple outputs using GLSL1.\n\t */\n\tprivate _iterateOverOutputsIfNeeded(params: any, methodName: string) {\n\t\tif (params.output && isArray(params.output) && this.glslVersion === GLSL1) {\n\t\t\tfor (let i = 0, numOutputs = (params.output as GPULayer[]).length; i < numOutputs; i++) {\n\t\t\t\t(this[methodName as keyof this] as any)({\n\t\t\t\t\t...params,\n\t\t\t\t\tprogram: i === 0 ? params.program : params.program._childPrograms![i - 1],\n\t\t\t\t\toutput: (params.output as GPULayer[])[i],\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _drawFinish(params: {\n\t\tblendAlpha?: boolean,\n\t}) {\n\t\tconst { gl } = this;\n\t\t// Reset WebGL state.\n\t\tif (params.blendAlpha) gl.disable(gl.BLEND);\n\t\t// this._disableVertexAttributes();\n\t}\n\n\t/**\n\t * Step GPUProgram entire fullscreen quad.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tstep(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'input', 'output', 'blendAlpha'];\n\t\tconst requiredKeys = ['program'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.step(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.step(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'step')) return;\n\t\tconst { gl, _errorState } = this;\n\t\tconst { program, input, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, {}, true, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1, 1], FLOAT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [0, 0], FLOAT);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getQuadPositionsBuffer());\n\t\tthis._setPositionAttribute(glProgram, program.name);\n\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\tthis._drawFinish(params)\n\t}\n\n\t/**\n\t * Step GPUProgram only for a 1px strip of pixels along the boundary.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.edges - Specify which edges to step, defaults to stepping entire boundary.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tstepBoundary(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t\t\tedges?: BoundaryEdge | BoundaryEdge[];\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'input', 'output', 'edges', 'blendAlpha'];\n\t\tconst requiredKeys = ['program'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.stepBoundary(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.stepBoundary(params)');\n\t\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'stepBoundary')) return;\n\t\tconst { gl, _errorState } = this;\n\t\tconst { program, input, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\tconst { width, height } = this._widthHeightForOutput(program.name, output);\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, {}, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\t// Frame needs to be offset and scaled so that all four sides are in viewport.\n\t\tconst onePx = [ 1 / width, 1 / height];\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1 - onePx[0], 1 - onePx[1]], FLOAT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', onePx, FLOAT);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getBoundaryPositionsBuffer());\n\t\tthis._setPositionAttribute(glProgram, program.name);\n\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tif (params.edges) {\n\t\t\tlet { edges } = params;\n\t\t\tif (!isArray(edges)) edges = [edges as BoundaryEdge];\n\t\t\tfor (let i = 0, numEdges = edges.length; i < numEdges; i++) {\n\t\t\t\t// TODO: do this in one draw call.\n\t\t\t\tconst edge = edges[i];\n\t\t\t\tif (edge === BOUNDARY_LEFT) {\n\t\t\t\t\tgl.drawArrays(gl.LINES, 3, 2);\n\t\t\t\t}\n\t\t\t\tif (edge === BOUNDARY_RIGHT) {\n\t\t\t\t\tgl.drawArrays(gl.LINES, 1, 2);\n\t\t\t\t}\n\t\t\t\tif (edge === BOUNDARY_TOP) {\n\t\t\t\t\tgl.drawArrays(gl.LINES, 2, 2);\n\t\t\t\t}\n\t\t\t\tif (edge === BOUNDARY_BOTTOM) {\n\t\t\t\t\tgl.drawArrays(gl.LINES, 0, 2);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tgl.drawArrays(gl.LINE_LOOP, 0, 4);\n\t\t}\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * Step GPUProgram for all but a 1px strip of pixels along the boundary.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tstepNonBoundary(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'input', 'output', 'blendAlpha'];\n\t\tconst requiredKeys = ['program'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.stepNonBoundary(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.stepNonBoundary(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'stepNonBoundary')) return;\n\t\tconst { gl, _errorState } = this;\n\t\tconst { program, input, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\tconst { width, height } = this._widthHeightForOutput(program.name, output);\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, {}, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tconst onePx = [ 1 / width, 1 / height];\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1 - 2 * onePx[0], 1 - 2 * onePx[1]], FLOAT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', onePx, FLOAT);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getQuadPositionsBuffer());\n\t\tthis._setPositionAttribute(glProgram, program.name);\n\t\t\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * Step GPUProgram inside a circular spot.  This is useful for touch interactions.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.position - Position of center of circle.\n\t * @param params.diameter - Circle diameter in pixels.\n\t * @param params.useOutputScale - If true position and diameter are scaled relative to the output dimensions, else they are scaled relative to the current canvas size, defaults to false.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.numSegments - Number of segments in circle, defaults to 18.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tstepCircle(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tposition: number[], // Position is in units of pixels.\n\t\t\tdiameter: number, // Diameter is in units of pixels.\n\t\t\tuseOutputScale?: boolean,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t\t\tnumSegments?: number,\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'position', 'diameter', 'useOutputScale', 'input', 'output', 'numSegments', 'blendAlpha'];\n\t\tconst requiredKeys = ['program', 'position', 'diameter'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.stepCircle(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.stepCircle(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'stepCircle')) return;\n\t\tconst { gl, _errorState } = this;\n\t\tconst { program, position, diameter, input, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\tlet width = this._width;\n\t\tlet height = this._height;\n\t\tif (params.useOutputScale) {\n\t\t\t({ width, height } = this._widthHeightForOutput(program.name, output));\n\t\t}\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, {}, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [diameter / width, diameter / height], FLOAT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [2 * position[0] / width - 1, 2 * position[1] / height - 1], FLOAT);\n\t\tconst numSegments = params.numSegments ? params.numSegments : DEFAULT_CIRCLE_NUM_SEGMENTS;\n\t\tif (numSegments < 3) {\n\t\t\tthrow new Error(`numSegments for GPUComposer.stepCircle must be greater than 2, got ${numSegments}.`);\n\t\t}\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getCirclePositionsBuffer(numSegments));\n\t\tthis._setPositionAttribute(glProgram, program.name);\n\t\t\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tgl.drawArrays(gl.TRIANGLE_FAN, 0, numSegments + 2);\t\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * Step GPUProgram inside a line segment (rounded end caps available).\n\t * This is useful for touch interactions during pointermove.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.position1 - Position of one end of segment.\n\t * @param params.position2 - Position of the other end of segment.\n\t * @param params.thickness - Thickness in pixels.\n\t * @param params.useOutputScale - If true position and thickness are scaled relative to the output dimensions, else they are scaled relative to the current canvas size, defaults to false.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.endCaps - Flag to draw with rounded end caps, defaults to false.\n\t * @param params.numCapSegments - Number of segments in rounded end caps, defaults to 9, must be divisible by 3.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tstepSegment(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tposition1: number[], \n\t\t\tposition2: number[],\n\t\t\tthickness: number,\n\t\t\tuseOutputScale?: boolean,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[],\n\t\t\tendCaps?: boolean,\n\t\t\tnumCapSegments?: number,\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'position1', 'position2', 'thickness', 'useOutputScale', 'input', 'output', 'endCaps', 'numCapSegments', 'blendAlpha'];\n\t\tconst requiredKeys = ['program', 'position1', 'position2', 'thickness'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.stepSegment(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.stepSegment(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'stepSegment')) return;\n\t\tconst { gl, _errorState } = this;\n\t\tconst { program, position1, position2, thickness, input, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\tlet width = this._width;\n\t\tlet height = this._height;\n\t\tif (params.useOutputScale) {\n\t\t\t({ width, height } = this._widthHeightForOutput(program.name, output));\n\t\t}\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, SEGMENT_PROGRAM_NAME, {}, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_halfThickness', thickness / 2, FLOAT);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [2 / width, 2 / height], FLOAT);\n\t\tconst diffX = position1[0] - position2[0];\n\t\tconst diffY = position1[1] - position2[1];\n\t\tconst angle = Math.atan2(diffY, diffX);\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_rotation', angle, FLOAT);\n\t\tconst centerX = (position1[0] + position2[0]) / 2;\n\t\tconst centerY = (position1[1] + position2[1]) / 2;\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [2 * centerX / width - 1, 2 * centerY / height - 1], FLOAT);\n\t\tconst length = Math.sqrt(diffX * diffX + diffY * diffY);\n\t\t\n\t\tconst numSegments = params.numCapSegments ? params.numCapSegments * 2 : DEFAULT_CIRCLE_NUM_SEGMENTS;\n\t\tif (params.endCaps) {\n\t\t\tif (numSegments < 6 || numSegments % 6 !== 0) {\n\t\t\t\tthrow new Error(`numCapSegments for GPUComposer.stepSegment must be divisible by 3, got ${numSegments / 2}.`);\n\t\t\t}\n\t\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_length', length, FLOAT);\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getCirclePositionsBuffer(numSegments));\n\t\t} else {\n\t\t\t// u_gpuio_length + thickness = length, bc we are stretching a square of size thickness into a rectangle.\n\t\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_length', length - thickness, FLOAT);\n\t\t\t// Use a rectangle in case of no caps.\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._getQuadPositionsBuffer());\n\t\t}\n\t\tthis._setPositionAttribute(glProgram, program.name);\n\t\t\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tif (params.endCaps) {\n\t\t\tgl.drawArrays(gl.TRIANGLE_FAN, 0, numSegments + 2);\n\t\t} else {\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t}\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * Step GPUProgram inside a rectangle.\n\t * @param params - Step parameters.\n\t * @param params.program - GPUProgram to run.\n\t * @param params.position - Position of one top corner of rectangle.\n\t * @param params.size - Width and height of rectangle.\n\t * @param params.useOutputScale - If true position and size are scaled relative to the output dimensions, else they are scaled relative to the current canvas size, defaults to false.\n\t * @param params.input - Input GPULayers to GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\t stepRect(\n\t\tparams: {\n\t\t\tprogram: GPUProgram,\n\t\t\tposition: number[],\n\t\t\tsize: number[],\n\t\t\tuseOutputScale?: boolean,\n\t\t\tinput?:  (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[],\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\t// Check params.\n\t\tconst validKeys = ['program', 'position', 'size', 'useOutputScale', 'input', 'output', 'blendAlpha'];\n\t\tconst requiredKeys = ['program', 'position', 'size'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.stepRect(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.stepRect(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'stepRect')) return;\n\t\tconst position1 = [params.position[0], params.position[1] + params.size[1] / 2];\n\t\tconst position2 = [params.position[0] + params.size[0], position1[1]];\n\t\tthis.stepSegment({\n\t\t\tprogram: params.program,\n\t\t\tposition1,\n\t\t\tposition2,\n\t\t\tthickness: params.size[1],\n\t\t\tuseOutputScale: params.useOutputScale,\n\t\t\tinput: params.input,\n\t\t\toutput: params.output,\n\t\t\tendCaps: false,\n\t\t\tblendAlpha: params.blendAlpha,\n\t\t});\n\t}\n\n\t// stepPolyline(\n\t// \tparams: {\n\t// \t\tprogram: GPUProgram,\n\t// \t\tpositions: number[][],\n\t// \t\tthickness: number, // Thickness of line is in units of pixels.\n\t// \t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t// \t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t// \t\tcloseLoop?: boolean,\n\t// \t\tincludeUVs?: boolean,\n\t// \t\tincludeNormals?: boolean,\n\t// \t\tblendAlpha?: boolean,\n\t// \t},\n\t// ) {\n\n\t// // Check params.\n\t// const validKeys = ['program', 'positions', 'thickness', 'input', 'output', 'closeLoop', 'includeUVs', 'includeNormals', 'blendAlpha'];\n\t// const requiredKeys = ['program', 'positions', 'thickness'];\n\t// const keys = Object.keys(params);\n\t// checkValidKeys(keys, validKeys, 'GPUComposer.stepPolyline(params)');\n\t// checkRequiredKeys(keys, requiredKeys, 'GPUComposer.stepPolyline(params)');\n\n\t// \tif (this._iterateOverOutputsIfNeeded(params, 'stepPolyline')) return;\n\t// \tconst { gl, _width, _height, _errorState } = this;\n\t// \tconst { program, input, output } = params;\n\n\t// \tif (_errorState) return;\n\n\t// \tconst vertices = params.positions;\n\t// \tconst closeLoop = !!params.closeLoop;\n\t\t\n\t// \t// Offset vertices.\n\t// \tconst halfThickness = params.thickness / 2;\n\t// \tconst numPositions = closeLoop ? vertices.length * 4 + 2 : (vertices.length - 1) * 4;\n\t// \tconst positions = new Float32Array(2 * numPositions);\n\t// \tconst uvs = params.includeUVs ? new Float32Array(2 * numPositions) : undefined;\n\t// \tconst normals = params.includeNormals ? new Float32Array(2 * numPositions) : undefined;\n\n\t// \t// tmp arrays.\n\t// \tconst s1 = [0, 0];\n\t// \tconst s2 = [0, 0];\n\t// \tconst n1 = [0, 0];\n\t// \tconst n2 = [0, 0];\n\t// \tconst n3 = [0, 0];\n\t// \tfor (let i = 0; i < vertices.length; i++) {\n\t// \t\tif (!closeLoop && i === vertices.length - 1) continue;\n\t// \t\t// Vertices on this segment.\n\t// \t\tconst v1 = vertices[i];\n\t// \t\tconst v2 = vertices[(i + 1) % vertices.length];\n\t// \t\ts1[0] = v2[0] - v1[0];\n\t// \t\ts1[1] = v2[1] - v1[1];\n\t// \t\tconst length1 = Math.sqrt(s1[0] * s1[0] + s1[1] * s1[1]);\n\t// \t\tn1[0] = s1[1] / length1;\n\t// \t\tn1[1] = - s1[0] / length1;\n\n\t// \t\tconst index = i * 4 + 2;\n\n\t// \t\tif (!closeLoop && i === 0) {\n\t// \t\t\t// Add starting points to positions array.\n\t// \t\t\tpositions[0] = v1[0] + n1[0] * halfThickness;\n\t// \t\t\tpositions[1] = v1[1] + n1[1] * halfThickness;\n\t// \t\t\tpositions[2] = v1[0] - n1[0] * halfThickness;\n\t// \t\t\tpositions[3] = v1[1] - n1[1] * halfThickness;\n\t// \t\t\tif (uvs) {\n\t// \t\t\t\tuvs[0] = 0;\n\t// \t\t\t\tuvs[1] = 1;\n\t// \t\t\t\tuvs[2] = 0;\n\t// \t\t\t\tuvs[3] = 0;\n\t// \t\t\t}\n\t// \t\t\tif (normals) {\n\t// \t\t\t\tnormals[0] = n1[0];\n\t// \t\t\t\tnormals[1] = n1[1];\n\t// \t\t\t\tnormals[2] = n1[0];\n\t// \t\t\t\tnormals[3] = n1[1];\n\t// \t\t\t}\n\t// \t\t}\n\n\t// \t\tconst u = (i + 1) / (vertices.length - 1);\n\n\t// \t\t// Offset from v2.\n\t// \t\tpositions[2 * index] = v2[0] + n1[0] * halfThickness;\n\t// \t\tpositions[2 * index + 1] = v2[1] + n1[1] * halfThickness;\n\t// \t\tpositions[2 * index + 2] = v2[0] - n1[0] * halfThickness;\n\t// \t\tpositions[2 * index + 3] = v2[1] - n1[1] * halfThickness;\n\t// \t\tif (uvs) {\n\t// \t\t\tuvs[2 * index] = u;\n\t// \t\t\tuvs[2 * index + 1] = 1;\n\t// \t\t\tuvs[2 * index + 2] = u;\n\t// \t\t\tuvs[2 * index + 3] = 0;\n\t// \t\t}\n\t// \t\tif (normals) {\n\t// \t\t\tnormals[2 * index] = n1[0];\n\t// \t\t\tnormals[2 * index + 1] = n1[1];\n\t// \t\t\tnormals[2 * index + 2] = n1[0];\n\t// \t\t\tnormals[2 * index + 3] = n1[1];\n\t// \t\t}\n\n\t// \t\tif ((i < vertices.length - 2) || closeLoop) {\n\t// \t\t\t// Vertices on next segment.\n\t// \t\t\tconst v3 = vertices[(i + 1) % vertices.length];\n\t// \t\t\tconst v4 = vertices[(i + 2) % vertices.length];\n\t// \t\t\ts2[0] = v4[0] - v3[0];\n\t// \t\t\ts2[1] = v4[1] - v3[1];\n\t// \t\t\tconst length2 = Math.sqrt(s2[0] * s2[0] + s2[1] * s2[1]);\n\t// \t\t\tn2[0] = s2[1] / length2;\n\t// \t\t\tn2[1] = - s2[0] / length2;\n\n\t// \t\t\t// Offset from v3\n\t// \t\t\tpositions[2 * ((index + 2) % (4 * vertices.length))] = v3[0] + n2[0] * halfThickness;\n\t// \t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 1] = v3[1] + n2[1] * halfThickness;\n\t// \t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 2] = v3[0] - n2[0] * halfThickness;\n\t// \t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 3] = v3[1] - n2[1] * halfThickness;\n\t// \t\t\tif (uvs) {\n\t// \t\t\t\tuvs[2 * ((index + 2) % (4 * vertices.length))] = u;\n\t// \t\t\t\tuvs[2 * ((index + 2) % (4 * vertices.length)) + 1] = 1;\n\t// \t\t\t\tuvs[2 * ((index + 2) % (4 * vertices.length)) + 2] = u;\n\t// \t\t\t\tuvs[2 * ((index + 2) % (4 * vertices.length)) + 3] = 0;\n\t// \t\t\t}\n\t// \t\t\tif (normals) {\n\t// \t\t\t\tnormals[2 * ((index + 2) % (4 * vertices.length))] = n2[0];\n\t// \t\t\t\tnormals[2 * ((index + 2) % (4 * vertices.length)) + 1] = n2[1];\n\t// \t\t\t\tnormals[2 * ((index + 2) % (4 * vertices.length)) + 2] = n2[0];\n\t// \t\t\t\tnormals[2 * ((index + 2) % (4 * vertices.length)) + 3] = n2[1];\n\t// \t\t\t}\n\n\t// \t\t\t// Check the angle between adjacent segments.\n\t// \t\t\tconst cross = n1[0] * n2[1] - n1[1] * n2[0];\n\t// \t\t\tif (Math.abs(cross) < 1e-6) continue;\n\t// \t\t\tn3[0] = n1[0] + n2[0];\n\t// \t\t\tn3[1] = n1[1] + n2[1];\n\t// \t\t\tconst length3 = Math.sqrt(n3[0] * n3[0] + n3[1] * n3[1]);\n\t// \t\t\tn3[0] /= length3;\n\t// \t\t\tn3[1] /= length3;\n\t// \t\t\t// Make adjustments to positions.\n\t// \t\t\tconst angle = Math.acos(n1[0] * n2[0] + n1[1] * n2[1]);\n\t// \t\t\tconst offset = halfThickness / Math.cos(angle / 2);\n\t// \t\t\tif (cross < 0) {\n\t// \t\t\t\tpositions[2 * index] = v2[0] + n3[0] * offset;\n\t// \t\t\t\tpositions[2 * index + 1] = v2[1] + n3[1] * offset;\n\t// \t\t\t\tpositions[2 * ((index + 2) % (4 * vertices.length))] = positions[2 * index];\n\t// \t\t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 1] = positions[2 * index + 1];\n\t// \t\t\t} else {\n\t// \t\t\t\tpositions[2 * index + 2] = v2[0] - n3[0] * offset;\n\t// \t\t\t\tpositions[2 * index + 3] = v2[1] - n3[1] * offset;\n\t// \t\t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 2] = positions[2 * index + 2];\n\t// \t\t\t\tpositions[2 * ((index + 2) % (4 * vertices.length)) + 3] = positions[2 * index + 3];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \tif (closeLoop) {\n\t// \t\t// Duplicate starting points to end of positions array.\n\t// \t\tpositions[vertices.length * 8] = positions[0];\n\t// \t\tpositions[vertices.length * 8 + 1] = positions[1];\n\t// \t\tpositions[vertices.length * 8 + 2] = positions[2];\n\t// \t\tpositions[vertices.length * 8 + 3] = positions[3];\n\t// \t\tif (uvs) {\n\t// \t\t\tuvs[vertices.length * 8] = uvs[0];\n\t// \t\t\tuvs[vertices.length * 8 + 1] = uvs[1];\n\t// \t\t\tuvs[vertices.length * 8 + 2] = uvs[2];\n\t// \t\t\tuvs[vertices.length * 8 + 3] = uvs[3];\n\t// \t\t}\n\t// \t\tif (normals) {\n\t// \t\t\tnormals[vertices.length * 8] = normals[0];\n\t// \t\t\tnormals[vertices.length * 8 + 1] = normals[1];\n\t// \t\t\tnormals[vertices.length * 8 + 2] = normals[2];\n\t// \t\t\tnormals[vertices.length * 8 + 3] = normals[3];\n\t// \t\t}\n\t// \t}\n\n\t// \tconst vertexShaderOptions: CompileTimeConstants = {};\n\t// \tif (uvs) vertexShaderOptions[GPUIO_VS_UV_ATTRIBUTE] = '1';\n\t// \tif (normals) vertexShaderOptions[GPUIO_VS_NORMAL_ATTRIBUTE] = '1';\n\n\t// \t// Do setup - this must come first.\n\t// \tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t// \t// Update uniforms and buffers.\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [2 / _width, 2 / _height], FLOAT);\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [-1, -1], FLOAT);\n\t// \t// Init positions buffer.\n\t// \tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(positions)!);\n\t// \tthis._setPositionAttribute(glProgram, program.name);\n\t// \tif (uvs) {\n\t// \t\t// Init uv buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(uvs)!);\n\t// \t\tthis._setUVAttribute(glProgram, program.name);\n\t// \t}\n\t// \tif (normals) {\n\t// \t\t// Init normals buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(normals)!);\n\t// \t\tthis._setVertexAttribute(glProgram, 'a_gpuio_normal', 2, program.name);\n\t// \t}\n\n\t// \t// Draw.\n\t// \tthis._setBlendMode(params.blendAlpha);\n\t// \tgl.drawArrays(gl.TRIANGLE_STRIP, 0, numPositions);\n\t// \tthis._drawFinish();\n\t// }\n\n\t// stepTriangleStrip(\n\t// \tparams: {\n\t// \t\tprogram: GPUProgram,\n\t// \t\tpositions: Float32Array,\n\t// \t\tnormals?: Float32Array,\n\t// \t\tuvs?: Float32Array,\n\t// \t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t// \t\toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t// \t\tcount?: number,\n\t// \t\tblendAlpha?: boolean,\n\t// \t},\n\t// ) {\n\t// \tif (this._iterateOverOutputsIfNeeded(params, 'stepTriangleStrip')) return;\n\t// \tconst { gl, _width, _height, _errorState } = this;\n\t// \tconst { program, input, output, positions, uvs, normals } = params;\n\n\t// \tif (_errorState) return;\n\n\t// \tconst vertexShaderOptions: CompileTimeConstants = {};\n\t// \tif (uvs) vertexShaderOptions[GPUIO_VS_UV_ATTRIBUTE] = '1';\n\t// \tif (normals) vertexShaderOptions[GPUIO_VS_NORMAL_ATTRIBUTE] = '1';\n\n\t// \t// Do setup - this must come first.\n\t// \tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t// \t// Update uniforms and buffers.\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [2 / _width, 2 / _height], FLOAT);\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [-1, -1], FLOAT);\n\t// \t// Init positions buffer.\n\t// \tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(positions)!);\n\t// \tthis._setPositionAttribute(glProgram, program.name);\n\t// \tif (uvs) {\n\t// \t\t// Init uv buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(uvs)!);\n\t// \t\tthis._setUVAttribute(glProgram, program.name);\n\t// \t}\n\t// \tif (normals) {\n\t// \t\t// Init normals buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(normals)!);\n\t// \t\tthis._setVertexAttribute(glProgram, 'a_gpuio_normal', 2, program.name);\n\t// \t}\n\n\t// \tconst count = params.count ? params.count : positions.length / 2;\n\n\t// \t// Draw.\n\t// \tthis._setBlendMode(params.blendAlpha);\n\t// \tgl.drawArrays(gl.TRIANGLE_STRIP, 0, count);\n\t// \tthis._drawFinish();\n\t// }\n\n\t// stepLines(params: {\n\t// \tprogram: GPUProgram,\n\t// \tpositions: Float32Array,\n\t// \tindices?: Uint16Array | Uint32Array | Int16Array | Int32Array,\n\t// \tnormals?: Float32Array,\n\t// \tuvs?: Float32Array,\n\t// \tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t// \toutput?: GPULayer | GPULayer[], // Undefined renders to screen.\n\t// \tcount?: number,\n\t// \tcloseLoop?: boolean,\n\t// \tblendAlpha?: boolean,\n\t// }) {\n\t// \tconst { gl, _width, _height, _errorState } = this;\n\t// \tconst { indices, uvs, normals, input, output, program } = params;\n\n\t// \tif (_errorState) return;\n\n\t// \t// Check that params are valid.\n\t// \tif (params.closeLoop && indices) {\n\t// \t\tthrow new Error(`GPUComposer.stepLines() can't be called with closeLoop == true and indices.`);\n\t// \t}\n\n\t// \tconst vertexShaderOptions: CompileTimeConstants = {};\n\t// \tif (uvs) vertexShaderOptions[GPUIO_VS_UV_ATTRIBUTE] = '1';\n\t// \tif (normals) vertexShaderOptions[GPUIO_VS_NORMAL_ATTRIBUTE] = '1';\n\n\t// \t// Do setup - this must come first.\n\t// \tconst glProgram = this._drawSetup(program, DEFAULT_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t// \tconst count = params.count ? params.count : (indices ? indices.length : (params.positions.length / 2));\n\n\t// \t// Update uniforms and buffers.\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [2 / _width, 2 / _height], FLOAT);\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_translation', [-1, -1], FLOAT);\n\t// \tif (indices) {\n\t// \t\t// Reorder positions array to match indices.\n\t// \t\tconst positions = new Float32Array(2 * count);\n\t// \t\tfor (let i = 0; i < count; i++) {\n\t// \t\t\tconst index = indices[i];\n\t// \t\t\tpositions[2 * i] = params.positions[2 * index];\n\t// \t\t\tpositions[2 * i + 1] = params.positions[2 * index + 1];\n\t// \t\t}\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(positions)!);\n\t// \t} else {\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(params.positions)!);\n\t// \t}\n\t// \tthis._setPositionAttribute(glProgram, program.name);\n\t// \tif (uvs) {\n\t// \t\t// Init uv buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(uvs)!);\n\t// \t\tthis._setUVAttribute(glProgram, program.name);\n\t// \t}\n\t// \tif (normals) {\n\t// \t\t// Init normals buffer.\n\t// \t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._initVertexBuffer(normals)!);\n\t// \t\tthis._setVertexAttribute(glProgram, 'a_gpuio_normal', 2, program.name);\n\t// \t}\n\n\t// \t// Draw.\n\t// \tthis._setBlendMode(params.blendAlpha);\n\t// \tif (params.indices) {\n\t// \t\tgl.drawArrays(gl.LINES, 0, count);\n\t// \t} else {\n\t// \t\tif (params.closeLoop) {\n\t// \t\t\tgl.drawArrays(gl.LINE_LOOP, 0, count);\n\t// \t\t} else {\n\t// \t\t\tgl.drawArrays(gl.LINE_STRIP, 0, count);\n\t// \t\t}\n\t// \t}\n\t// \tthis._drawFinish(params);\n\t// }\n\n\t/**\n\t * Draw the contents of a GPULayer as points.  This assumes the components of the GPULayer have the form [xPosition, yPosition] or [xPosition, yPosition, xOffset, yOffset].\n\t * @param params - Draw parameters.\n\t * @param params.layer - GPULayer containing position data.\n\t * @param params.program - GPUProgram to run, defaults to drawing points in red.\n\t * @param params.input - Input GPULayers for GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.pointSize - Pixel size of points.\n\t * @param params.useOutputScale - If true position and pointSize are scaled relative to the output dimensions, else they are scaled relative to the current canvas size, defaults to false.\n\t * @param params.count - How many points to draw, defaults to positions.length.\n\t * @param params.color - (If no program passed in) RGB color in range [0, 1] to draw points.\n\t * @param params.wrapX - Wrap points positions in X, defaults to false.\n\t * @param params.wrapY - Wrap points positions in Y, defaults to false.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tdrawLayerAsPoints(\n\t\tparams: {\n\t\t\tlayer: GPULayer, // Positions in units of pixels.\n\t\t\tprogram?: GPUProgram,\n\t\t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[],\n\t\t\tpointSize?: number,\n\t\t\tuseOutputScale?: boolean,\n\t\t\tcount?: number,\n\t\t\tcolor?: number[],\n\t\t\twrapX?: boolean,\n\t\t\twrapY?: boolean,\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\tconst validKeys = ['layer', 'program', 'input', 'output', 'pointSize', 'useOutputScale', 'count', 'color', 'wrapX', 'wrapY', 'blendAlpha'];\n\t\tconst requiredKeys = ['layer'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.drawLayerAsPoints(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.drawLayerAsPoints(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'drawLayerAsPoints')) return;\n\t\tconst { gl, _pointIndexArray, glslVersion, _errorState } = this;\n\t\tconst { layer, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\t// Check that numPoints is valid.\n\t\tif (layer.numComponents !== 2 && layer.numComponents !== 4) {\n\t\t\tthrow new Error(`GPUComposer.drawLayerAsPoints() must be passed a layer parameter with either 2 or 4 components, got layer \"${layer.name}\" with ${layer.numComponents} components.`);\n\t\t}\n\t\tconst { length } = layer;\n\t\tconst count = params.count || length;\n\t\tif (count > length) {\n\t\t\tthrow new Error(`Invalid count ${count} for layer parameter of length ${length}.`);\n\t\t}\n\t\tif (glslVersion === GLSL1 && count > MAX_FLOAT_INT) {\n\t\t\tconsole.warn(`Points positions array length: ${count} is longer than what is supported by GLSL1 : ${MAX_FLOAT_INT}.`);\n\t\t}\n\n\t\tlet program = params.program;\n\t\tif (program === undefined) {\n\t\t\tprogram = this._setValueProgramForType(FLOAT);\n\t\t\tconst color = params.color || [1, 0, 0]; // Default of red.\n\t\t\tif (color.length !== 3) throw new Error(`Color parameter must have length 3, got ${JSON.stringify(color)}.`);\n\t\t\tprogram.setUniform('u_value', [...color, 1], FLOAT);\n\t\t}\n\n\t\t// Add positions to end of input if needed.\n\t\tconst input = this._addLayerToInputs(layer, params.input);\n\n\t\tconst vertexShaderOptions: CompileTimeConstants = {};\n\t\t// Tell whether we are using an absolute position (2 components),\n\t\t// or position with accumulation buffer (4 components, better floating pt accuracy).\n\t\tif (layer.numComponents === 4) vertexShaderOptions[GPUIO_VS_POSITION_W_ACCUM] = '1';\n\t\tif (params.wrapX) vertexShaderOptions[GPUIO_VS_WRAP_X] = '1';\n\t\tif (params.wrapY) vertexShaderOptions[GPUIO_VS_WRAP_Y] = '1';\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, LAYER_POINTS_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_positions', indexOfLayerInArray(layer, input), INT);\n\t\tlet width = this._width;\n\t\tlet height = this._height;\n\t\tif (params.useOutputScale) {\n\t\t\t({ width, height } = this._widthHeightForOutput(program.name, output));\n\t\t}\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1 / width, 1 / height], FLOAT);\n\t\t// Set default pointSize.\n\t\tconst pointSize = params.pointSize || 1;\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_pointSize', pointSize, FLOAT);\n\t\tconst positionLayerDimensions = [layer.width, layer.height];\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_positionsDimensions', positionLayerDimensions, FLOAT);\n\t\t// We get this for free in GLSL3 with gl_VertexID.\n\t\tif (glslVersion === GLSL1) {\n\t\t\tif (this._pointIndexBuffer === undefined || (_pointIndexArray && _pointIndexArray.length < count)) {\n\t\t\t\t// Have to use float32 array bc int is not supported as a vertex attribute type.\n\t\t\t\tconst indices = initSequentialFloatArray(length);\n\t\t\t\tthis._pointIndexArray = indices;\n\t\t\t\tthis._pointIndexBuffer = this._initVertexBuffer(indices);\n\t\t\t}\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._pointIndexBuffer!);\n\t\t\tthis._setIndexAttribute(glProgram, program.name);\n\t\t}\n\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tgl.drawArrays(gl.POINTS, 0, count);\n\t\tthis._drawFinish(params);\n\t}\n\n\t// drawLayerAsLines(\n\t// \tparams: {\n\t// \t\tpositions: GPULayer,\n\t// \t\tindices?: Float32Array | Uint16Array | Uint32Array | Int16Array | Int32Array,\n\t// \t\tprogram?: GPUProgram,\n\t// \t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t// \t\toutput?: GPULayer | GPULayer[],\n\t// \t\tcount?: number,\n\t// \t\tcolor?: number[]\n\t// \t\twrapX?: boolean,\n\t// \t\twrapY?: boolean,\n\t// \t\tcloseLoop?: boolean,\n\t// \t\tblendAlpha?: boolean,\n\t// \t},\n\t// ) {\n\t// const validKeys = ['positions', 'indices', 'program', 'input', 'output', 'count', 'color', 'wrapX', 'wrapY', 'closeLoop', 'blendAlpha'];\n\t// const requiredKeys = ['positions'];\n\t// const keys = Object.keys(params);\n\t// checkValidKeys(keys, validKeys, 'GPUComposer.drawLayerAsLines(params)');\n\t// checkRequiredKeys(keys, requiredKeys, 'GPUComposer.drawLayerAsLines(params)');\n\t// \tif (this._iterateOverOutputsIfNeeded(params, 'drawLayerAsLines')) return;\n\t// \tconst { gl, _width, _height, glslVersion, _errorState } = this;\n\t// \tconst { positions, output } = params;\n\n\t// \tif (_errorState) return;\n\n\t// \t// Check that positions is valid.\n\t// \tif (positions.numComponents !== 2 && positions.numComponents !== 4) {\n\t// \t\tthrow new Error(`GPUComposer.drawLayerAsLines() must be passed a position GPULayer with either 2 or 4 components, got position GPULayer \"${positions.name}\" with ${positions.numComponents} components.`)\n\t// \t}\n\t// \t// Check that params are valid.\n\t// \tif (params.closeLoop && params.indices) {\n\t// \t\tthrow new Error(`GPUComposer.drawLayerAsLines() can't be called with closeLoop == true and indices.`);\n\t// \t}\n\n\t// \tlet program = params.program;\n\t// \tif (program === undefined) {\n\t// \t\tprogram = params.wrapX || params.wrapY ? this._getWrappedLineColorProgram() : this._setValueProgramForType(FLOAT);;\n\t// \t\tconst color = params.color || [1, 0, 0]; // Default to red.\n\t//\t\tif (color.length !== 3) throw new Error(`color parameter must have length 3, got ${JSON.stringify(color)}.`);\n\t// \t\tprogram.setUniform('u_value', [...color, 1], FLOAT);\n\t// \t}\n\n\t// \t// Add positionLayer to end of input if needed.\n\t// \tconst input = this._addLayerToInputs(positions, params.input);\n\n\t// \tconst vertexShaderOptions: CompileTimeConstants = {};\n\t// \t// Tell whether we are using an absolute position (2 components),\n\t// \t// or position with accumulation buffer (4 components, better floating pt accuracy).\n\t// \tif (positions.numComponents === 4) vertexShaderOptions[GPUIO_VS_POSITION_W_ACCUM] = '1';\n\t// \tif (params.wrapX) vertexShaderOptions[GPUIO_VS_WRAP_X] = '1';\n\t// \tif (params.wrapY) vertexShaderOptions[GPUIO_VS_WRAP_Y] = '1';\n\t// \tvertexShaderOptions[GPUIO_VS_INDEXED_POSITIONS] = params.indices ? '1': '0';\n\n\t// \t// Do setup - this must come first.\n\t// \tconst glProgram = this._drawSetup(program, LAYER_LINES_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t// \tconst count = params.count ? params.count : (params.indices ? params.indices.length : positions.length);\n\n\t// \t// Update uniforms and buffers.\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_positions', indexOfLayerInArray(positions, input), INT);\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1 / _width, 1 / _height], FLOAT);\n\t// \tconst positionLayerDimensions = [positions.width, positions.height];\n\t// \tprogram._setVertexUniform(glProgram, 'u_gpuio_positionsDimensions', positionLayerDimensions, FLOAT);\n\t// \t// Only pass in indices if we are using indexed pts or GLSL1, otherwise we get this for free from gl_VertexID.\n\t// \tif (params.indices || glslVersion === GLSL1) {\n\t// \t\t// TODO: cache indexArray if no indices passed in.\n\t// \t\tconst indices = params.indices ? params.indices : initSequentialFloatArray(count);\n\t// \t\tif (this._indexedLinesIndexBuffer === undefined) {\n\t// \t\t\t// Have to use float32 array bc int is not supported as a vertex attribute type.\n\t// \t\t\tlet floatArray: Float32Array;\n\t// \t\t\tif (indices.constructor !== Float32Array) {\n\t// \t\t\t\t// Have to use float32 array bc int is not supported as a vertex attribute type.\n\t// \t\t\t\tfloatArray = new Float32Array(indices.length);\n\t// \t\t\t\tfor (let i = 0; i < count; i++) {\n\t// \t\t\t\t\tfloatArray[i] = indices[i];\n\t// \t\t\t\t}\n\t// \t\t\t\tconsole.warn(`Converting indices array of type ${indices.constructor} to Float32Array in GPUComposer.drawIndexedLines for WebGL compatibility, you may want to use a Float32Array to store this information so the conversion is not required.`);\n\t// \t\t\t} else {\n\t// \t\t\t\tfloatArray = indices as Float32Array;\n\t// \t\t\t}\n\t// \t\t\tthis._indexedLinesIndexBuffer = this._initVertexBuffer(floatArray);\n\t// \t\t} else {\n\t// \t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._indexedLinesIndexBuffer!);\n\t// \t\t\t// Copy buffer data.\n\t// \t\t\tgl.bufferData(gl.ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n\t// \t\t}\n\t// \t\tthis._setIndexAttribute(glProgram, program.name);\n\t// \t}\n\n\t// \t// Draw.\n\t// \tthis._setBlendMode(params.blendAlpha);\n\t// \tif (params.indices) {\n\t// \t\tgl.drawArrays(gl.LINES, 0, count);\n\t// \t} else {\n\t// \t\tif (params.closeLoop) {\n\t// \t\t\tgl.drawArrays(gl.LINE_LOOP, 0, count);\n\t// \t\t} else {\n\t// \t\t\tgl.drawArrays(gl.LINE_STRIP, 0, count);\n\t// \t\t}\n\t// \t}\n\t// \tthis._drawFinish(params);\n\t// }\n\n\t/**\n\t * Draw the contents of a 2 component GPULayer as a vector field.\n\t * @param params - Draw parameters.\n\t * @param params.layer - GPULayer containing vector data.\n\t * @param params.program - GPUProgram to run, defaults to drawing vector lines in red.\n\t * @param params.input - Input GPULayers for GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.vectorSpacing - Spacing between vectors, defaults to drawing a vector every 10 pixels.\n\t * @param params.vectorScale - Scale factor to apply to vector lengths.\n\t * @param params.color - (If no program passed in) RGB color in range [0, 1] to draw points.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\tdrawLayerAsVectorField(\n\t\tparams: {\n\t\t\tlayer: GPULayer,\n\t\t\tprogram?: GPUProgram,\n\t\t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[],\n\t\t\tvectorSpacing?: number,\n\t\t\tvectorScale?: number,\n\t\t\tcolor?: number[],\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\tconst validKeys = ['layer', 'program', 'input', 'output', 'vectorSpacing', 'vectorScale', 'color', 'blendAlpha'];\n\t\tconst requiredKeys = ['layer'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.drawLayerAsVectorField(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.drawLayerAsVectorField(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'drawLayerAsVectorField')) return;\n\t\tconst { gl, _vectorFieldIndexArray, _width, _height, glslVersion, _errorState } = this;\n\t\tconst { layer, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\t// Check that field is valid.\n\t\tif (layer.numComponents !== 2) {\n\t\t\tthrow new Error(`GPUComposer.drawLayerAsVectorField() must be passed a fieldLayer with 2 components, got fieldLayer \"${layer.name}\" with ${layer.numComponents} components.`);\n\t\t}\n\t\t// Check aspect ratio.\n\t\t// const dimensions = [vectorLayer.width, vectorLayer.height];\n\t\t// if (Math.abs(dimensions[0] / dimensions[1] - width / height) > 0.01) {\n\t\t// \tthrow new Error(`Invalid aspect ratio ${(dimensions[0] / dimensions[1]).toFixed(3)} vector GPULayer with dimensions [${dimensions[0]}, ${dimensions[1]}], expected ${(width / height).toFixed(3)}.`);\n\t\t// }\n\n\t\tlet program = params.program;\n\t\tif (program === undefined) {\n\t\t\tprogram = this._setValueProgramForType(FLOAT);;\n\t\t\tconst color = params.color || [1, 0, 0]; // Default to red.\n\t\t\tif (color.length !== 3) throw new Error(`color parameter must have length 3, got ${JSON.stringify(color)}.`);\n\t\t\tprogram.setUniform('u_value', [...color, 1], FLOAT);\n\t\t}\n\n\t\t// Add data to end of input if needed.\n\t\tconst input = this._addLayerToInputs(layer, params.input);\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, LAYER_VECTOR_FIELD_PROGRAM_NAME, {}, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_vectors', indexOfLayerInArray(layer, input), INT);\n\t\t// Set default scale.\n\t\tconst vectorScale = params.vectorScale || 1;\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [vectorScale / _width, vectorScale / _height], FLOAT);\n\t\tconst vectorSpacing = params.vectorSpacing || 10;\n\t\tconst spacedDimensions = [Math.floor(_width / vectorSpacing), Math.floor(_height / vectorSpacing)];\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_dimensions', spacedDimensions, FLOAT);\n\t\tconst length = 2 * spacedDimensions[0] * spacedDimensions[1];\n\t\t// We get this for free in GLSL3 with gl_VertexID.\n\t\tif (glslVersion === GLSL1) {\n\t\t\tif (this._vectorFieldIndexBuffer === undefined || (_vectorFieldIndexArray && _vectorFieldIndexArray.length < length)) {\n\t\t\t\t// Have to use float32 array bc int is not supported as a vertex attribute type.\n\t\t\t\tconst indices = initSequentialFloatArray(length);\n\t\t\t\tthis._vectorFieldIndexArray = indices;\n\t\t\t\tthis._vectorFieldIndexBuffer = this._initVertexBuffer(indices);\n\t\t\t}\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._vectorFieldIndexBuffer!);\n\t\t\tthis._setIndexAttribute(glProgram, program.name);\n\t\t}\n\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tgl.drawArrays(gl.LINES, 0, length);\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * Draw 2D mesh to screen.\n\t * @param params - Draw parameters.\n\t * @param params.layer - GPULayer containing vector data.\n\t * @param params.indices - GPUIndexBuffer containing mesh index data.\n\t * @param params.program - GPUProgram to run, defaults to drawing vector lines in red.\n\t * @param params.input - Input GPULayers for GPUProgram.\n\t * @param params.output - Output GPULayer, will draw to screen if undefined.\n\t * @param params.useOutputScale - If true positions are scaled relative to the output dimensions, else they are scaled relative to the current canvas size, defaults to false.\n\t * @param params.color - (If no program passed in) RGB color in range [0, 1] to draw points.\n\t * @param params.blendAlpha - Blend mode for draw, defaults to false.\n\t * @returns \n\t */\n\t drawLayerAsMesh(\n\t\tparams: {\n\t\t\tlayer: GPULayer,\n\t\t\tindices?: GPUIndexBuffer,\n\t\t\tprogram?: GPUProgram,\n\t\t\tinput?: (GPULayer | GPULayerState)[] | GPULayer | GPULayerState,\n\t\t\toutput?: GPULayer | GPULayer[],\n\t\t\tuseOutputScale?: boolean,\n\t\t\tcolor?: number[],\n\t\t\tblendAlpha?: boolean,\n\t\t},\n\t) {\n\t\tconst validKeys = ['layer', 'indices', 'program', 'input', 'output', 'useOutputScale', 'color', 'blendAlpha'];\n\t\tconst requiredKeys = ['layer'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.drawLayerAsMesh(params)');\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUComposer.drawLayerAsMesh(params)');\n\n\t\tif (this._iterateOverOutputsIfNeeded(params, 'drawLayerAsMesh')) return;\n\t\tconst { gl, _width, _height, glslVersion, _errorState, _meshIndexBuffer, _meshIndexArray } = this;\n\t\tconst { layer, output } = params;\n\n\t\tif (_errorState) return;\n\n\t\t// Check that layer is valid.\n\t\tif (layer.numComponents !== 2 && layer.numComponents !== 4) {\n\t\t\tthrow new Error(`GPUComposer.drawLayerAsMesh() must be passed a layer parameter with either 2 or 4 components, got position GPULayer \"${layer.name}\" with ${layer.numComponents} components.`);\n\t\t}\n\n\t\tconst positionsCount = layer.is1D() ? layer.length : layer.width * layer.height;\n\t\tif (glslVersion === GLSL1 && positionsCount > MAX_FLOAT_INT) {\n\t\t\tconsole.warn(`Mesh positions array length: ${positionsCount} is longer than what is supported by GLSL1 : ${MAX_FLOAT_INT}.`);\n\t\t}\n\n\t\tlet program = params.program;\n\t\tif (program === undefined) {\n\t\t\tprogram = this._setValueProgramForType(FLOAT);\n\t\t\tconst color = params.color || [1, 0, 0]; // Default of red.\n\t\t\tif (color.length !== 3) throw new Error(`Color parameter must have length 3, got ${JSON.stringify(color)}.`);\n\t\t\tprogram.setUniform('u_value', [...color, 1], FLOAT);\n\t\t}\n\n\t\t// Add positions to end of input if needed.\n\t\tconst input = this._addLayerToInputs(layer, params.input);\n\n\t\tconst vertexShaderOptions: CompileTimeConstants = {};\n\t\t// Tell whether we are using an absolute position (2 components),\n\t\t// or position with accumulation buffer (4 components, better floating pt accuracy).\n\t\tif (layer.numComponents === 4) vertexShaderOptions[GPUIO_VS_POSITION_W_ACCUM] = '1';\n\n\t\t// Do setup - this must come first.\n\t\tconst glProgram = this._drawSetup(program, LAYER_MESH_PROGRAM_NAME, vertexShaderOptions, false, input, output);\n\n\t\t// Update uniforms and buffers.\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_positions', indexOfLayerInArray(layer, input), INT);\n\t\tlet width = _width;\n\t\tlet height = _height;\n\t\tif (params.useOutputScale) {\n\t\t\t({ width, height } = this._widthHeightForOutput(program.name, output));\n\t\t}\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_scale', [1 / width, 1 / height], FLOAT);\n\t\tconst positionLayerDimensions = [layer.width, layer.height];\n\t\tprogram._setVertexUniform(glProgram, 'u_gpuio_positionsDimensions', positionLayerDimensions, FLOAT);\n\t\t// We get this for free in GLSL3 with gl_VertexID.\n\t\tif (glslVersion === GLSL1) {\n\t\t\tif (_meshIndexBuffer === undefined || (_meshIndexArray && _meshIndexArray.length < positionsCount)) {\n\t\t\t\t// Have to use float32 array bc int is not supported as a vertex attribute type.\n\t\t\t\tconst indices = initSequentialFloatArray(positionsCount);\n\t\t\t\tthis._meshIndexArray = indices;\n\t\t\t\tthis._meshIndexBuffer = this._initVertexBuffer(indices);\n\t\t\t}\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this._meshIndexBuffer!);\n\t\t\tthis._setIndexAttribute(glProgram, program.name);\n\t\t}\n\n\t\t// Draw.\n\t\tthis._setBlendMode(params.blendAlpha);\n\t\tif (params.indices) {\n\t\t\tconst { glType, count, buffer } = params.indices;\n\t\t\t// https://webglfundamentals.org/webgl/lessons/webgl-indexed-vertices.html\n\t\t\t// Make index buffer the current ELEMENT_ARRAY_BUFFER.\n\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n\t\t\tconst offset = 0;\n\t\t\tgl.drawElements(gl.TRIANGLES, count, glType, offset);\n\t\t} else {\n\t\t\t// We are assuming that positions are already grouped into triangles.\n\t\t\tgl.drawArrays(gl.TRIANGLES, 0, positionsCount);\n\t\t}\n\t\tthis._drawFinish(params);\n\t}\n\n\t/**\n\t * Set the clearValue of the GPUComposer, which is applied during GPUComposer.clear().\n\t */\n\tset clearValue(clearValue: number | number[]) {\n\t\tconst type = FLOAT;\n\t\tconst numComponents = 4;\n\t\tif (!isValidClearValue(clearValue, numComponents, type)) {\n\t\t\tthrow new Error(`Invalid clearValue: ${JSON.stringify(clearValue)} for GPUComposer, expected ${type} or array of ${type} of length ${numComponents}.`);\n\t\t}\n\t\t// Make deep copy if needed.\n\t\tthis._clearValue = isArray(clearValue) ? (clearValue as number[]).slice() : clearValue;\n\t\tthis._clearValueVec4 = undefined;\n\t}\n\n\t/**\n\t * Get the clearValue of the GPUComposer.\n\t */\n\tget clearValue() {\n\t\treturn this._clearValue;\n\t}\n\n\t/**\n\t * Get the clearValue of the GPUComposer as a vec4, pad with zeros as needed.\n\t */\n\tprivate get clearValueVec4() {\n\t\tlet { _clearValueVec4 } = this;\n\t\tif (!_clearValueVec4) {\n\t\t\tconst { clearValue } = this;\n\t\t\t_clearValueVec4 = [];\n\t\t\tif (isFiniteNumber(clearValue)) {\n\t\t\t\t_clearValueVec4.push(clearValue as number, clearValue as number, clearValue as number, clearValue as number);\n\t\t\t} else {\n\t\t\t\t_clearValueVec4.push(...clearValue as number[]);\n\t\t\t\tfor (let j = _clearValueVec4.length; j < 4; j++) {\n\t\t\t\t\t_clearValueVec4.push(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._clearValueVec4 = _clearValueVec4;\n\t\t}\n\t\treturn _clearValueVec4;\n\t}\n\n\t/**\n\t * Clear all data in canvas to GPUComposer.clearValue.\n\t */\n\tclear() {\n\t\tconst { verboseLogging, clearValueVec4 } = this;\n\t\tif (verboseLogging) console.log(`Clearing GPUComoser.`);\n\t\tconst program = this._setValueProgramForType(FLOAT);\n\t\tprogram.setUniform('u_value', clearValueVec4);\n\t\t// Write clear value to canvas.\n\t\tthis.step({\n\t\t\tprogram,\n\t\t});\n\t}\n\n\t/**\n\t * If this GPUComposer has been inited via GPUComposer.initWithThreeRenderer(), call undoThreeState() in render loop before performing any gpu-io step or draw functions.\n\t */\n\tundoThreeState() {\n\t\tconst { gl, _threeRenderer, isWebGL2 } = this;\n\t\tif (!_threeRenderer) {\n\t\t\tthrow new Error(`Can't call undoThreeState() on a GPUComposer that was not inited with GPUComposer.initWithThreeRenderer().`);\n\t\t}\n\t\t\n\t\t// Disable blend mode.\n\t\tgl.disable(gl.BLEND);\n\n\t\t// Unbind VAO for threejs compatibility.\n\t\tif (_threeRenderer) {\n\t\t\tif (isWebGL2) (gl as WebGL2RenderingContext).bindVertexArray(null);\n\t\t\telse {\n\t\t\t\tconst ext = getExtension(this, OES_VERTEX_ARRAY_OBJECT, true);\n\t\t\t\text.bindVertexArrayOES(null);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * If this GPUComposer has been inited via GPUComposer.initWithThreeRenderer(), call resetThreeState() in render loop after performing any gpu-io step or draw functions.\n\t */\n\tresetThreeState() {\n\t\tconst { gl, _threeRenderer } = this;\n\t\tif (!_threeRenderer) {\n\t\t\tthrow new Error(`Can't call resetThreeState() on a GPUComposer that was not inited with GPUComposer.initWithThreeRenderer().`);\n\t\t}\n\t\t\n\t\t// Reset viewport.\n\t\tconst viewport = _threeRenderer.getViewport(new ThreejsUtils.Vector4() as Vector4);\n\t\tgl.viewport(viewport.x, viewport.y, viewport.width, viewport.height);\n\t\t// Unbind framebuffer (render to screen).\n\t\t// Reset threejs WebGL bindings and state, this also unbinds the framebuffer.\n\t\t_threeRenderer.resetState();\n\t}\n\n\t// TODO: params.callback is not generated in the docs.\n\t/**\n\t * Save the current state of the canvas to png.\n\t * @param params - PNG parameters.\n\t * @param params.filename - PNG filename (no extension).\n\t * @param params.dpi - PNG dpi (defaults to 72dpi).\n\t * @param params.callback - Optional callback when Blob is ready, default behavior saves the PNG using file-saver.\n\t*/\n\tsavePNG(params: {\n\t\tfilename?: string,\n\t\tdpi?: number,\n\t\tcallback?: (blob: Blob, filename: string) => void,\n\t} = {}) {\n\t\tconst validKeys = ['filename', 'dpi', 'callback'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUComposer.savePNG(params)');\n\n\t\tconst { canvas } = this;\n\t\tconst filename = params.filename || 'output';\n\t\tconst callback = params.callback || saveAs; // Default to saving the image with file-saver.\n\t\t// TODO: need to adjust the canvas size to get the correct px ratio from toBlob().\n\t\t// const ratio = window.devicePixelRatio || 1;\n\t\tcanvas.toBlob((blob) => {\n\t\t\tif (!blob) {\n\t\t\t\tconsole.warn(`Problem saving PNG, unable to init blob from canvas.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (params.dpi) {\n\t\t\t\tchangeDpiBlob(blob, params.dpi).then((blob: Blob) => {\n\t\t\t\t\tcallback(blob, `${filename}.png`);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcallback(blob, `${filename}.png`);\n\t\t\t}\n\t\t}, 'image/png');\n\t}\n\n\t/**\n\t * Call tick() from your render loop to measure the FPS of your application.\n\t * Internally, this does some low pass filtering to give consistent results.\n\t * @returns An Object containing the current fps of your application and the number of times tick() has been called.\n\t */\n\ttick(): { fps: number, numTicks: number} {\n\t\tthis._numTicks += 1;\n\t\tlet { _lastTickTime, _lastTickFPS } = this;\n\t\tconst currentTime = performance.now();\n\t\tthis._lastTickTime = currentTime;\n\t\tif (!_lastTickTime) {\n\t\t\treturn { fps: 0, numTicks: this._numTicks };\n\t\t}\n\t\tconst currentFPS = 1000 / (currentTime - _lastTickTime);\n\t\tif (!_lastTickFPS) _lastTickFPS = currentFPS;\n\t\t// Use a low pass filter to smooth out fps reading.\n\t\tconst factor = 0.9;\n\t\tconst fps =  Number.parseFloat((factor * _lastTickFPS + (1 - factor) * currentFPS).toFixed(1));\n\t\tthis._lastTickFPS = fps;\n\t\treturn {\n\t\t\tfps,\n\t\t\tnumTicks: this._numTicks,\n\t\t};\n\t}\n\n\t/**\n\t * Return the number of ticks of the simulation.\n\t * Use GPUComposer.tick() to increment this value on each animation cycle.\n\t */\n\tget numTicks() {\n\t\treturn this._numTicks;\n\t}\n\t\n\t/**\n\t * Deallocate GPUComposer instance and associated WebGL properties.\n\t */\n\tdispose() {\n\t\tconst { gl, verboseLogging } = this;\n\n\t\tif (verboseLogging) console.log(`Deallocating GPUComposer.`);\n\n\t\t// Delete buffers.\n\t\tif (this._quadPositionsBuffer) {\n\t\t\tgl.deleteBuffer(this._quadPositionsBuffer);\n\t\t\tdelete this._quadPositionsBuffer;\n\t\t}\n\t\tif (this._boundaryPositionsBuffer) {\n\t\t\tgl.deleteBuffer(this._boundaryPositionsBuffer);\n\t\t\tdelete this._boundaryPositionsBuffer;\n\t\t}\n\t\t(Object.keys(this._circlePositionsBuffer) as any as number[]).forEach(key => {\n\t\t\tgl.deleteBuffer(this._circlePositionsBuffer[key]);\n\t\t});\n\t\t// @ts-ignore\n\t\tdelete this._circlePositionsBuffer;\n\t\tdelete this._pointIndexArray;\n\t\tif (this._pointIndexBuffer) {\n\t\t\tgl.deleteBuffer(this._pointIndexBuffer);\n\t\t\tdelete this._pointIndexBuffer;\n\t\t}\n\t\tdelete this._vectorFieldIndexArray;\n\t\tif (this._vectorFieldIndexBuffer) {\n\t\t\tgl.deleteBuffer(this._vectorFieldIndexBuffer);\n\t\t\tdelete this._vectorFieldIndexBuffer;\n\t\t}\n\t\tif (this._indexedLinesIndexBuffer) {\n\t\t\tgl.deleteBuffer(this._indexedLinesIndexBuffer);\n\t\t\tdelete this._indexedLinesIndexBuffer;\n\t\t}\n\n\t\t// Delete vertex attribute locations.\n\t\tObject.keys(this._vertexAttributeLocations).forEach((key) => {\n\t\t\tdelete this._vertexAttributeLocations[key];\n\t\t});\n\t\t// @ts-ignore\n\t\tdelete this._vertexAttributeLocations;\n\t\t// @ts-ignore\n\t\tdelete this._enabledVertexAttributes;\n\n\t\t// Delete vertex shaders.\n\t\tObject.values(this._vertexShaders).forEach(({ compiledShaders })=> {\n\t\t\tObject.keys(compiledShaders).forEach(key => {\n\t\t\t\tgl.deleteShader(compiledShaders[key]);\n\t\t\t\tdelete compiledShaders[key];\n\t\t\t});\n\t\t});\n\t\t// @ts-ignore\n\t\tdelete this._vertexShaders;\n\t\t\n\t\t// Delete fragment shaders.\n\t\tObject.values(this._copyPrograms).forEach(program => {\n\t\t\tprogram.dispose();\n\t\t});\n\t\tObject.keys(this._copyPrograms).forEach(key => {\n\t\t\t// @ts-ignore\n\t\t\tdelete this._copyPrograms[key];\n\t\t});\n\t\t// @ts-ignore;\n\t\tdelete this._copyPrograms;\n\n\t\tObject.values(this._setValuePrograms).forEach(program => {\n\t\t\tprogram.dispose();\n\t\t});\n\t\tObject.keys(this._setValuePrograms).forEach(key => {\n\t\t\t// @ts-ignore\n\t\t\tdelete this._setValuePrograms[key];\n\t\t});\n\t\t// @ts-ignore;\n\t\tdelete this._setValuePrograms;\n\n\t\tthis._wrappedLineColorProgram?.dispose();\n\t\tdelete this._wrappedLineColorProgram;\n\n\t\t// @ts-ignore\n\t\tdelete this._threeRenderer;\n\t\t// @ts-ignore\n\t\tdelete this.gl;\n\t\t// @ts-ignore;\n\t\tdelete this.canvas;\n\t\t// GL context will be garbage collected by webgl.\n\t\t// @ts-ignore\n\t\tdelete this._errorCallback;\n\t\t// @ts-ignore\n\t\tdelete this._extensions;\n\n\t\t// Delete all other keys.\n\t\t// This is mostly for testing so we can be sure we've deallocated everything.\n\t\t// @ts-ignore;\n\t\tdelete this._errorState;\n\t\t// @ts-ignore;\n\t\tdelete this.verboseLogging;\n\t\t// @ts-ignore;\n\t\tdelete this._numTicks;\n\t\t// @ts-ignore;\n\t\tdelete this.isWebGL2;\n\t\t// @ts-ignore;\n\t\tdelete this.glslVersion;\n\t\t// @ts-ignore;\n\t\tdelete this.intPrecision;\n\t\t// @ts-ignore;\n\t\tdelete this.floatPrecision;\n\t\t// @ts-ignore;\n\t\tdelete this._width;\n\t\t// @ts-ignore;\n\t\tdelete this._height;\n\t\t// @ts-ignore\n\t\tdelete this._clearValue;\n\t\tdelete this._clearValueVec4;\n\t}\n}","export const SEGMENT_VERTEX_SHADER_SOURCE = `\nin vec2 a_gpuio_position;\n\nuniform float u_gpuio_halfThickness;\nuniform vec2 u_gpuio_scale;\nuniform float u_gpuio_length;\nuniform float u_gpuio_rotation;\nuniform vec2 u_gpuio_translation;\n\nout vec2 v_uv_local;\nout vec2 v_uv;\n\nmat2 rotate2d(float _angle){\n\treturn mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tv_uv_local = 0.5 * (a_gpuio_position + 1.0);\n\n\tvec2 position = a_gpuio_position;\n\t// Apply thickness / radius.\n\tposition *= u_gpuio_halfThickness;\n\t// Stretch center of shape to form a round-capped line segment.\n\tfloat signX = sign(position.x);\n\tposition.x += signX * u_gpuio_length / 2.0;\n\tv_uv_local.x = (signX + 1.0) / 2.0;// Set entire cap uv.x to 1 or 0.\n\t// Apply transformations.\n\tposition = u_gpuio_scale * (rotate2d(-u_gpuio_rotation) * position) + u_gpuio_translation;\n\n\t// Calculate a global uv for the viewport.\n\tv_uv = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}`;","import { isObject } from '@amandaghassaei/type-checks';\nimport { isTypedArray } from '@petamoriken/float16';\nimport { checkRequiredKeys, checkValidKeys } from './checks';\nimport { getExtension, OES_ELEMENT_INDEX_UINT } from './extensions';\nimport type { GPUComposer } from './GPUComposer';\n\nexport class GPUIndexBuffer {\n\t// Keep a reference to GPUComposer.\n\tprivate readonly _composer: GPUComposer;\n\n\t/**\n\t * GL buffer.\n\t */\n\treadonly buffer: WebGLBuffer;\n\t/**\n\t * GL type.\n\t */\n\treadonly glType: number;\n\t/**\n\t * Index buffer count.\n\t */\n\treadonly count: number;\n\t\n\t/**\n\t * Init a GPUIndexBuffer to use with GPUComposer.drawLayerAsMesh().\n\t * @param composer - The current GPUComposer instance.\n\t * @param params - GPUIndexBuffer parameters.\n\t * @param params.indices - A 1D array containing indexed geometry.  For a mesh, this would be an array of triangle indices.\n\t * @param params.name - Name of GPUIndexBuffer, used for error logging.\n\t * @returns \n\t */\n\tconstructor(\n\t\tcomposer: GPUComposer,\n\t\tparams: {\n\t\t\tindices: number[] | Uint8Array | Uint16Array | Uint32Array,\n\t\t\tname?: string,\n\t\t},\n\t) {\n\t\tthis._composer = composer;\n\n\t\tif (!params) {\n\t\t\tthrow new Error('Error initing GPUIndexBuffer: must pass params to GPUIndexBuffer(composer, params).');\n\t\t}\n\t\tif (!isObject(params)) {\n\t\t\tthrow new Error(`Error initing GPUIndexBuffer: must pass valid params object to GPUIndexBuffer(composer, params), got ${JSON.stringify(params)}.`);\n\t\t}\n\t\t// Check params.\n\t\tconst validKeys = ['indices', 'name'];\n\t\tconst requiredKeys = ['indices'];\n\t\tconst keys = Object.keys(params);\n\t\tcheckValidKeys(keys, validKeys, 'GPUIndexBuffer(composer, params)', params.name);\n\t\tcheckRequiredKeys(keys, requiredKeys, 'GPUIndexBuffer(composer, params)', params.name);\n\n\t\tlet { indices } = params;\n\n\t\tconst { gl, isWebGL2 } = composer;\n\t\t\n\t\tconst indexBuffer = gl.createBuffer()!;\n\t\t// Make index buffer the current ELEMENT_ARRAY_BUFFER.\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n\t\t// Cast indices to correct type.\n\t\tif (!isTypedArray(indices)) {\n\t\t\tindices = new Uint32Array(indices);\n\t\t}\n\t\tlet glType;\n\t\tswitch(indices.constructor) {\n\t\t\tcase Uint8Array:\n\t\t\t\tglType = gl.UNSIGNED_BYTE;\n\t\t\t\tbreak;\n\t\t\tcase Uint16Array:\n\t\t\t\tglType = gl.UNSIGNED_SHORT;\n\t\t\t\tbreak;\n\t\t\tcase Uint32Array:\n\t\t\t\tif (!isWebGL2) {\n\t\t\t\t\tconst ext = getExtension(composer, OES_ELEMENT_INDEX_UINT, true);\n\t\t\t\t\tif (!ext) {\n\t\t\t\t\t\t// Fall back to using gl.UNSIGNED_SHORT.\n\t\t\t\t\t\tglType = gl.UNSIGNED_SHORT;\n\t\t\t\t\t\tindices = Uint16Array.from(indices);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tglType = gl.UNSIGNED_INT;\n\t\t\t\tbreak;\n\t\t}\n\t\t// Fill the current element array buffer with data.\n\t\tgl.bufferData(\n\t\t\tgl.ELEMENT_ARRAY_BUFFER,\n\t\t\tindices,\n\t\t\tgl.STATIC_DRAW\n\t\t);\n\n\t\tthis.buffer = indexBuffer;\n\t\tthis.glType = glType as number;\n\t\tthis.count = indices.length;\n\t}\n\n\t/**\n\t * Deallocate GPUIndexBuffer instance and associated WebGL properties.\n\t */\n\tdispose() {\n\t\tconst { _composer, buffer } = this;\n\t\t_composer.gl.deleteBuffer(buffer);\n\n\t\t// Delete all references.\n\t\t// @ts-ignore\n\t\tdelete this._composer;\n\t\t// @ts-ignore\n\t\tdelete this.buffer;\n\n\t\t// Delete these too (for easier testing of deallocations).\n\t\t// @ts-ignore\n\t\tdelete this.glType;\n\t\t// @ts-ignore\n\t\tdelete this.count;\n\t}\n}","import { isFloat16Array } from \"./Float16Array.mjs\";\nimport { isNativeTypedArray } from \"./_util/is.mjs\";\n\n/**\n * @param {unknown} target\n * @returns {value is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array}\n */\nexport function isTypedArray(target) {\n  return isNativeTypedArray(target) || isFloat16Array(target);\n}\n","import * as utils from './utils';\nimport { GPUComposer } from './GPUComposer';\nimport { GPULayer } from './GPULayer';\nimport * as GPULayerHelpers from './GPULayerHelpers';\nimport { GPUProgram } from './GPUProgram';\nimport { GPUIndexBuffer } from './GPUIndexBuffer';\nimport * as checks from './checks';\nimport * as regex from './regex';\nimport * as extensions from './extensions';\nimport * as polyfills from './polyfills';\nimport * as conversions from './conversions';\nimport * as Programs from './Programs';\n\n// These exports are only used for testing.\n/**\n * @private\n */\nconst _testing = {\n\tisFloatType: utils.isFloatType,\n\tisUnsignedIntType: utils.isUnsignedIntType,\n\tisSignedIntType: utils.isSignedIntType,\n\tisIntType: utils.isIntType,\n\tmakeShaderHeader: utils.makeShaderHeader,\n\tcompileShader: utils.compileShader,\n\tinitGLProgram: utils.initGLProgram,\n\treadyToRead: utils.readyToRead,\n\tpreprocessVertexShader: utils.preprocessVertexShader,\n\tpreprocessFragmentShader: utils.preprocessFragmentShader,\n\tisPowerOf2: utils.isPowerOf2,\n\tinitSequentialFloatArray: utils.initSequentialFloatArray,\n\tuniformInternalTypeForValue: utils.uniformInternalTypeForValue,\n\tindexOfLayerInArray: utils.indexOfLayerInArray,\n\treadPixelsAsync: utils.readPixelsAsync,\n\t...extensions,\n\t...regex,\n\t...checks,\n\t...GPULayerHelpers,\n\t...polyfills,\n\t...conversions,\n}\n\n// Named exports.\nconst {\n\tisWebGL2,\n\tisWebGL2Supported,\n\tisHighpSupportedInVertexShader,\n\tisHighpSupportedInFragmentShader,\n\tgetVertexShaderMediumpPrecision,\n\tgetFragmentShaderMediumpPrecision,\n} = utils;\nconst {\n\tcopyProgram,\n\taddLayersProgram,\n\taddValueProgram,\n\tmultiplyValueProgram,\n\tsetValueProgram,\n\tsetColorProgram,\n\tzeroProgram,\n\trenderRGBProgram,\n\trenderAmplitudeProgram,\n\trenderSignedAmplitudeProgram,\n} = Programs;\n\nexport {\n\tGPUComposer,\n\tGPULayer,\n\tGPUProgram,\n\tGPUIndexBuffer,\n\tisWebGL2,\n\tisWebGL2Supported,\n\tisHighpSupportedInVertexShader,\n\tisHighpSupportedInFragmentShader,\n\tgetVertexShaderMediumpPrecision,\n\tgetFragmentShaderMediumpPrecision,\n\tcopyProgram,\n\taddLayersProgram,\n\taddValueProgram,\n\tmultiplyValueProgram,\n\trenderAmplitudeProgram,\n\trenderSignedAmplitudeProgram,\n\tsetValueProgram,\n\tsetColorProgram,\n\tzeroProgram,\n\trenderRGBProgram,\n\t_testing,\n}\nexport * from './constants';"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__assign","assign","t","s","i","n","arguments","length","apply","this","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__spreadArray","to","from","pack","ar","l","slice","concat","exports","isNumber","Number","isNaN","isFiniteNumber","isFinite","isInteger","isPositiveNumber","isPositiveInteger","isNegativeNumber","isNegativeInteger","isNonNegativeNumber","isNonNegativeInteger","isNonPositiveNumber","isNonPositiveInteger","isNumberInRange","min","max","isIntegerInRange","isString","isTypedArray","ArrayBuffer","isView","DataView","isArray","isObject","isBoolean","defineProperty","factory","HALF_FLOAT","FLOAT","UNSIGNED_BYTE","BYTE","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BOOL","UINT","NEAREST","LINEAR","CLAMP_TO_EDGE","REPEAT","validArrayTypes","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","validDataTypes","validFilters","validWraps","RGBA","validImageFormats","validImageTypes","GLSL3","GLSL1","WEBGL2","WEBGL1","EXPERIMENTAL_WEBGL","EXPERIMENTAL_WEBGL2","PRECISION_LOW_P","PRECISION_MEDIUM_P","PRECISION_HIGH_P","FLOAT_1D_UNIFORM","FLOAT_2D_UNIFORM","FLOAT_3D_UNIFORM","FLOAT_4D_UNIFORM","INT_1D_UNIFORM","INT_2D_UNIFORM","INT_3D_UNIFORM","INT_4D_UNIFORM","UINT_1D_UNIFORM","UINT_2D_UNIFORM","UINT_3D_UNIFORM","UINT_4D_UNIFORM","BOOL_1D_UNIFORM","BOOL_2D_UNIFORM","BOOL_3D_UNIFORM","BOOL_4D_UNIFORM","DEFAULT_PROGRAM_NAME","SEGMENT_PROGRAM_NAME","LAYER_POINTS_PROGRAM_NAME","LAYER_LINES_PROGRAM_NAME","LAYER_VECTOR_FIELD_PROGRAM_NAME","LAYER_MESH_PROGRAM_NAME","GPUIO_VS_WRAP_X","GPUIO_VS_WRAP_Y","GPUIO_VS_INDEXED_POSITIONS","GPUIO_VS_UV_ATTRIBUTE","GPUIO_VS_NORMAL_ATTRIBUTE","GPUIO_VS_POSITION_W_ACCUM","DEFAULT_ERROR_CALLBACK","message","Error","MIN_UNSIGNED_BYTE","MAX_UNSIGNED_BYTE","Math","pow","MIN_BYTE","MAX_BYTE","MIN_UNSIGNED_SHORT","MAX_UNSIGNED_SHORT","MIN_SHORT","MAX_SHORT","MIN_UNSIGNED_INT","MAX_UNSIGNED_INT","MIN_INT","MAX_INT","MAX_FLOAT_INT","GPUIO_INT_PRECISION","GPUIO_FLOAT_PRECISION","BOUNDARY_TOP","BOUNDARY_BOTTOM","BOUNDARY_LEFT","BOUNDARY_RIGHT","intForPrecision","precision","JSON","stringify","uniformTypeForType","type","glslVersion","arrayConstructorForType","halfFloatsAsFloats","glslTypeForType","numComponents","glslPrefixForType","glslComponentSelectionForNumComponents","PRECISION_SOURCE","glsl1VertexIn","shaderSource","replace","escapeRegExp","string","typecastVariable","variableName","regexMatch","RegExp","assignmentExpressions","match","regexValueMatch","regexReplace","console","warn","_castVaryingToFloat","regexString","castToFloatExpressions","regexVariableMatch","variable","castVaryingToFloat","glsl1VertexOut","glsl1FragmentIn","getFragmentOuts","programName","outs","maxLocation","keys","variableNames","numVariables","outsSorted","fill","undefined","name_1","_a","location_1","location","type_1","name","name_2","location_2","parseInt","glsl1FragmentOut","shaderSources","numOuts","name_3","outRegex","outShaderSource","assignmentFound","regex","output","filler","checkFragmentShaderForFragColor","gl_FragColor","containsGLFragColor","glsl1Texture","glsl1Sampler2D","glsl1Uint","highpToMediump","stripVersion","origLength","stripPrecision","stripComments","getSampler2DsInProgram","samplersNoDuplicates","samplers","uniformMatch","forEach","sampler","uniform","SAMPLER2D_WRAP_X","SAMPLER2D_WRAP_Y","SAMPLER2D_CAST_INT","SAMPLER2D_FILTER","SAMPLER2D_HALF_PX_UNIFORM","SAMPLER2D_DIMENSIONS_UNIFORM","texturePolyfill","textureCalls","samplerUniforms","remainingTextureCalls","polyfillUniforms","make_GPUIO_TEXTURE_POLYFILL","prefix","castOpening","castEnding","make_GPUIO_TEXTURE_WRAP","map","key","join","wrap","lookupFunction","wrapType","extraParams","index","floatTypeForIntType","abs","sign","trunc","round","roundEven","type1","type2","clamp","mix","floatTypeForBoolType","det2","m","size","det3","offset","GLSL1Polyfills","GLSL1_POLYFILLS","includes","E","index1DToUV","modi","stepi","bitshiftLeft","bitshiftRight","bitwiseOr","numBits","bitwiseXOR","bitwiseAnd","bitwiseNot","fragmentShaderPolyfills","FRAGMENT_SHADER_POLYFILLS","suffix","results","supportsWebGL2","supportsHighpVertex","supportsHighpFragment","mediumpVertexPrecision","mediumpFragmentPrecision","isUnsignedIntType","isSignedIntType","isIntType","convertCompileTimeConstantsToString","compileTimeConstants","CTCSource","makeShaderHeader","intPrecision","floatPrecision","extensions","versionSource","compileTimeConstantsSource","precisionConstantsSource","compileShader","gl","shaderType","errorCallback","checkCompileStatus","shader","createShader","shaderHeader","fullShaderSource","getShaderParameter","COMPILE_STATUS","log","split","line","FRAGMENT_SHADER","getShaderInfoLog","initGLProgram","vertexShader","fragmentShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","isWebGL2","WebGL2RenderingContext","WebGL2ComputeRenderingContext","readyToRead","checkFramebufferStatus","FRAMEBUFFER","FRAMEBUFFER_COMPLETE","isHighpSupported","vsSource","fsSource","document","createElement","getContext","vs","VERTEX_SHADER","fs","deleteProgram","deleteShader","isHighpSupportedInVertexShader","vertexSupport","isHighpSupportedInFragmentShader","fragmentSupport","test1PxCalc","addUniforms","positionLocation","getAttribLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","viewport","useProgram","drawArrays","POINTS","pixel","readPixels","disableVertexAttribArray","deleteBuffer","initSequentialFloatArray","array","preprocessShader","convertShaderToGLSL1","convertFragmentShaderToGLSL1","preprocessVertexShader","convertVertexShaderToGLSL1","preprocessFragmentShader","sources","numSources","shift","additionalSources","uniformInternalTypeForValue","uniformName","indexOfLayerInArray","layer","findIndex","item","clientWaitAsync","sync","flags","interval_ms","test","res","clientWaitSync","WAIT_FAILED","TIMEOUT_EXPIRED","setTimeout","getBufferSubDataAsync","target","srcByteOffset","dstBuffer","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","deleteSync","getBufferSubData","readPixelsAsync","x","w","h","format","buf","PIXEL_PACK_BUFFER","byteLength","STREAM_READ","dist","changeDpiBlob_1","changeDpiBlob","blob","dpi","headerChunk","fileReader","FileReader","onload","dataArray","tail","changedArray","changeDpiOnArray","Blob","readAsArrayBuffer","calcCrc","c","pngDataTable","crcTable","k","createPngDataTable","changeDpiDataUrl","base64Image","dataSplitted","headerLength","overwritepHYs","indexOf","PNG","b64Index","data","b64index","b64PhysSignature1","b64PhysSignature2","b64PhysSignature3","detectPhysChunkFromDataUrl","ceil","JPEG","stringHeader","substring","restOfData","headerBytes","atob","charCodeAt","finalArray","base64Header","btoa","String","fromCharCode","arr","arr2","_toConsumableArray","_P","_H","_Y","_S","physChunk","crc","crcChunk","startingIndex","searchStartOfPhys","set","chunkLength","finalHeader","THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY","THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT","ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER","CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT","CANNOT_MIX_BIGINT_AND_OTHER_TYPES","ITERATOR_PROPERTY_IS_NOT_CALLABLE","REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE","OFFSET_IS_OUT_OF_BOUNDS","uncurryThis","args","ReflectApply","uncurryThisGetter","ReflectGetOwnPropertyDescriptor","get","construct","ReflectConstruct","ReflectDefineProperty","ReflectGet","getOwnPropertyDescriptor","getPrototypeOf","ReflectGetPrototypeOf","has","ReflectHas","ownKeys","ReflectOwnKeys","ReflectSet","ReflectSetPrototypeOf","Reflect","NativeProxy","Proxy","MAX_SAFE_INTEGER","NumberIsFinite","NumberIsNaN","SymbolIterator","species","SymbolSpecies","toStringTag","SymbolToStringTag","for","SymbolFor","NativeObject","create","ObjectCreate","ObjectDefineProperty","freeze","ObjectFreeze","is","ObjectIs","ObjectPrototype","ObjectPrototype__lookupGetter__","__lookupGetter__","object","NativeTypeError","descriptor","ObjectHasOwn","hasOwn","NativeArray","ArrayIsArray","ArrayPrototype","ArrayPrototypeJoin","ArrayPrototypePush","ArrayPrototypeToLocaleString","toLocaleString","NativeArrayPrototypeSymbolIterator","ArrayPrototypeSymbolIterator","MathTrunc","NativeArrayBuffer","ArrayBufferIsView","ArrayBufferPrototype","ArrayBufferPrototypeSlice","ArrayBufferPrototypeGetByteLength","NativeSharedArrayBuffer","SharedArrayBuffer","SharedArrayBufferPrototypeGetByteLength","TypedArray","TypedArrayFrom","TypedArrayPrototype","NativeTypedArrayPrototypeSymbolIterator","TypedArrayPrototypeKeys","TypedArrayPrototypeValues","values","TypedArrayPrototypeEntries","entries","TypedArrayPrototypeSet","TypedArrayPrototypeReverse","reverse","TypedArrayPrototypeFill","TypedArrayPrototypeCopyWithin","copyWithin","TypedArrayPrototypeSort","sort","TypedArrayPrototypeSlice","TypedArrayPrototypeSubarray","subarray","TypedArrayPrototypeGetBuffer","TypedArrayPrototypeGetByteOffset","TypedArrayPrototypeGetLength","TypedArrayPrototypeGetSymbolToStringTag","NativeUint16Array","Uint16ArrayFrom","NativeUint32Array","NativeFloat32Array","ArrayIteratorPrototype","ArrayIteratorPrototypeNext","GeneratorPrototypeNext","IteratorPrototype","DataViewPrototype","DataViewPrototypeGetUint16","getUint16","DataViewPrototypeSetUint16","setUint16","NativeRangeError","RangeError","NativeWeakSet","WeakSet","WeakSetPrototype","WeakSetPrototypeAdd","add","WeakSetPrototypeHas","NativeWeakMap","WeakMap","WeakMapPrototype","WeakMapPrototypeGet","WeakMapPrototypeHas","WeakMapPrototypeSet","arrayIterators","SafeIteratorPrototype","arrayIterator","safeIfNeeded","safe","generators","DummyArrayIteratorPrototype","writable","configurable","dummy","isObjectLike","isNativeTypedArray","isNativeBigIntTypedArray","typedArrayName","isSharedArrayBuffer","isOrdinaryArray","isCanonicalIntegerIndexString","number","brand","floatView","uint32View","baseTable","shiftTable","roundToFloat16Bits","num","mantissaTable","exponentTable","offsetTable","convertToNumber","float16bits","ToIntegerOrInfinity","ToLength","SpeciesConstructor","defaultConstructor","constructor","IsDetachedBuffer","defaultCompare","isXNaN","isYNaN","isXPlusZero","isYPlusZero","float16bitsArrays","isFloat16Array","hasFloat16ArrayBrand","assertFloat16Array","assertSpeciesTypedArray","count","isTargetFloat16Array","isTargetTypedArray","float16bitsArray","getFloat16BitsArray","float16","cloned","Float16Array","byteOffset","copyToArray","TypedArrayPrototypeGetters","handler","receiver","input","_byteOffset","_length","isArrayBuffer","list","BufferConstructor","proxy","static","src","opts","Constructor","uint16","mapFunc","val","items","at","relativeIndex","callback","filter","kept","reduce","accumulator","start","reduceRight","find","findLast","findLastIndex","every","some","targetOffset","targetLength","srcLength","Infinity","compareFn","sortCompare","end","relativeStart","relativeEnd","final","begin","uint16Subarray","element","lastIndexOf","separator","Float16ArrayPrototype","getFloat16","dataView","setFloat16","a","autoBom","XMLHttpRequest","open","responseType","response","onerror","error","send","status","dispatchEvent","MouseEvent","createEvent","initMouseEvent","window","self","global","navigator","userAgent","saveAs","HTMLAnchorElement","URL","webkitURL","j","download","rel","href","origin","createObjectURL","revokeObjectURL","msSaveOrOpenBlob","title","innerText","HTMLElement","safari","onloadend","readAsDataURL","module","isValidDataType","isValidFilter","isValidWrap","isValidImageFormat","isValidImageType","isValidClearValue","clearValue","isNumberOfType","checkValidKeys","validKeys","methodName","checkRequiredKeys","requiredKeys","framebufferMap","allTextureFramebuffersMap","bindFrameBuffer","composer","layer0","texture0","additionalTextures","framebuffer","_errorCallback","createFramebuffer","bindFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","numTextures","getError","initFrameBuffer","allFramebuffers","texture","allFramebuffers_1","GPULayer","params","_clearValue","_bufferIndex","_buffers","dimensions","_composer","calcGPULayerSize","verboseLogging","width","height","_width","_height","defaultFilter","wrapX","wrapY","internalType","getGPULayerInternalType","_internalType","_b","getGLTextureParameters","glFormat","glInternalFormat","glType","glNumChannels","_glInternalFormat","_glFormat","_glType","_glNumChannels","internalFilter","getGPULayerInternalFilter","_internalFilter","_glFilter","_internalWrapX","getGPULayerInternalWrap","_glWrapS","_internalWrapY","_glWrapT","numBuffers","_initBuffers","initFromImageURL","url","image","Image","resize","is1D","is2D","_usingTextureOverrideForCurrentBuffer","_textureOverrides","bufferIndex","copyCurrentStateToGPULayer","copyProgram","_copyProgramForType","arrayOrImage","validatedArrayOrImage","validateGPULayerArray","HTMLImageElement","createTexture","bindTexture","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texImage2D","incrementBufferIndex","decrementBufferIndex","getStateAtIndex","_prepareForWrite","setFromArray","_currentTexture","validatedArray","_destroyBuffers","_clearValueVec4","clear","applyToAllBuffers","clearValueVec4","_setValueProgramForType","setUniform","endIndex","_getValuesSetup","_valuesRaw","RGBA_INTEGER","_getValuesPost","OUTPUT_LENGTH","handleFloat16Conversion","_valuesBufferView","_values","initArrayForType","length_1","index1","index2","getValues","getValuesAsync","_c","_getCanvasWithImageData","multiplier","canvas","context","imageData","getImageData","indexFlipped","putImageData","getImage","toDataURL","savePNG","filename","toBlob","attachToThreeTexture","currentState","_threeRenderer","offsetTextureProperties","properties","deleteTexture","__webglTexture","__webglInit","numFramebuffers","deleteFramebuffer","delete","disposeFramebuffers","clone","_cloneGPULayer","dispose","OES_TEXTURE_FLOAT","OES_TEXTURE_HALF_FLOAT","OES_TEXTURE_FLOAT_LINEAR","OES_TEXTURE_HAlF_FLOAT_LINEAR","EXT_COLOR_BUFFER_FLOAT","EXT_COLOR_BUFFER_HALF_FLOAT","OES_VERTEX_ARRAY_OBJECT","OES_ELEMENT_INDEX_UINT","OES_STANDARD_DERIVATIVES","getExtension","extensionName","optional","_extensions","extension","writeSupport","filterWrapSupport","shouldCastIntTypeAsFloat","testWriteSupport","validStatus","testFilterWrap","glWrap","glFilter","valuesTyped","valuesTyped16","float16View","fragmentShaderSource","wrapValue","_getVertexShader","activeTexture","TEXTURE0","uniform2fv","getUniformLocation","_getQuadPositionsBuffer","_setPositionAttribute","TRIANGLE_STRIP","disable","BLEND","filtered","supported","tol","expected","_x","minMaxValuesForType","width_1","sqrt","height_1","RED","RG","RED_INTEGER","RG_INTEGER","R16F","RG16F","RGBA16F","R32F","RG32F","RGBA32F","R8UI","RG8UI","RGBA8UI","R8I","RG8I","RGBA8I","R16I","RG16I","RGBA16I","R16UI","RG16UI","RGBA16UI","R32I","RG32I","RGBA32I","R32UI","RG32UI","RGBA32UI","HALF_FLOAT_OES","missingParams","shouldTypeCast","arrayLength","shouldResize","view","_len","origValue","clipped","Vector4","z","copy","DEFAULT_VERT_SHADER_SOURCE","VERTEX_SHADER_HELPERS_SOURCE","LAYER_LINES_VERTEX_SHADER_SOURCE","LAYER_POINTS_VERTEX_SHADER_SOURCE","LAYER_VECTOR_FIELD_VERTEX_SHADER_SOURCE","LAYER_MESH_VERTEX_SHADER_SOURCE","GPUProgram","_this","_fragmentShaders","_compileTimeConstants","_uniforms","_programs","_programsKeyLookup","_samplerUniformsIndices","uniforms","_fragmentShaderSource","inputIndex","shaderIndex","_childPrograms","numChildren","GPUProgramChild","recompile","needsRecompile","programKeys","numPrograms","fragmentShaderKeys","numFragmentShaders","numUniforms","_getFragmentShader","fragmentId","internalCompileTimeConstants","_getProgramWithName","vertexCompileConstants","fragmentID","fragmentCompileConstants","wrapXVal","wrapYVal","filterVal","vertexID","uniformNames","_setProgramUniform","isGLSL3","_location","getUniform","badType","uniform1i","uniform2i","uniform3i","uniform4i","uniform1f","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1ui","uniform2uiv","uniform3uiv","uniform4uiv","_cacheUniformValue","oldValue","length_2","currentType","samplerUniform","programNames","_setInternalFragmentUniforms","indexLookup","length_4","length_5","filterMismatch","halfPxSize","halfPxUniform","dimensionsUniform","_setVertexUniform","_super","_gpuio_child_params","__","__extends","glslType","setValueProgram","valueLength","valueType","outputType","GPUComposer","_errorState","_circlePositionsBuffer","_vertexAttributeLocations","_enabledVertexAttributes","_copyPrograms","_setValuePrograms","_vertexShaders","compiledShaders","_numTicks","_gl","contextID","contextAttributes","DEPTH_TEST","pixelStorei","UNPACK_ALIGNMENT","bindVertexArray","bindVertexArrayOES","clientWidth","clientHeight","getParameter","MAX_TEXTURE_IMAGE_UNITS","initWithThreeRenderer","renderer","capabilities","domElement","_initVertexBuffer","_quadPositionsBuffer","fsQuadPositions","_getBoundaryPositionsBuffer","_boundaryPositionsBuffer","boundaryPositions","_getCirclePositionsBuffer","numSegments","unitCirclePoints","cos","PI","sin","circlePositions","gpuLayer","_drawSetup","gpuProgram","fullscreenRender","inputTextures","_setOutputLayer","_setBlendMode","blendAlpha","enable","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","_addLayerToInputs","_passThroughLayerDataFromInputToOutput","state","outputArray","numOutputs","outputLayer","drawBuffers","_widthHeightForOutput","_setVertexAttribute","locations","_disableVertexAttributes","numAttributes","_setIndexAttribute","_setUVAttribute","firstOutput","nextOutput","_iterateOverOutputsIfNeeded","_drawFinish","glProgram","stepBoundary","onePx","edges","numEdges","edge","LINES","LINE_LOOP","stepNonBoundary","stepCircle","position","diameter","useOutputScale","TRIANGLE_FAN","stepSegment","position1","position2","thickness","diffX","diffY","angle","atan2","centerX","centerY","numCapSegments","endCaps","stepRect","drawLayerAsPoints","_pointIndexArray","color","vertexShaderOptions","pointSize","positionLayerDimensions","_pointIndexBuffer","indices","drawLayerAsVectorField","_vectorFieldIndexArray","vectorScale","vectorSpacing","spacedDimensions","floor","_vectorFieldIndexBuffer","drawLayerAsMesh","_meshIndexBuffer","_meshIndexArray","positionsCount","ELEMENT_ARRAY_BUFFER","drawElements","TRIANGLES","undoThreeState","resetThreeState","getViewport","ThreejsUtils.Vector4","resetState","tick","_lastTickTime","_lastTickFPS","currentTime","performance","now","fps","numTicks","currentFPS","parseFloat","toFixed","_indexedLinesIndexBuffer","_wrappedLineColorProgram","GPUIndexBuffer","indexBuffer","_testing","isFloatType","utils.isUnsignedIntType","utils.isSignedIntType","utils.isIntType","utils.makeShaderHeader","utils.compileShader","utils.initGLProgram","utils.readyToRead","utils.preprocessVertexShader","utils.preprocessFragmentShader","isPowerOf2","utils.initSequentialFloatArray","utils.uniformInternalTypeForValue","utils.indexOfLayerInArray","utils.readPixelsAsync","checks","GPULayerHelpers","polyfills","conversions","utils.isWebGL2","isWebGL2Supported","utils.isHighpSupportedInVertexShader","utils.isHighpSupportedInFragmentShader","getVertexShaderMediumpPrecision","gl_1","input_1","vLocation","uniform3f","mediumpPrecision","getFragmentShaderMediumpPrecision","gl_2","input_2","Programs.copyProgram","addLayersProgram","numInputs","components","arrayOfLengthNumInputs","el","addValueProgram","componentSelection","multiplyValueProgram","Programs.setValueProgram","setColorProgram","opacity","zeroProgram","renderRGBProgram","glslFloatType","glslPrefix","shouldCast","scale","renderAmplitudeProgram","colorMax","colorMin","renderSignedAmplitudeProgram","castFloat","component","bias","colorCenter"],"mappings":"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","x_google_ignoreList":[0,1,8,9,10,11,12,13,14,15,16,17,18,36]}